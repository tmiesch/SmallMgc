/******************************************************************************
 * SmallMGC
 *
 * Copyright (C) 2009 Thomas Miesch
 *
 * Authors: Thomas Miesch <thomas.miesch@smallmgc.org>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <http://www.gnu.org/licenses/old-licenses/gpl-2.0.html>
 *
 * created:
 * filename:
 * purpose:
 *
 ******************************************************************************/
#include "Poco/FileStream.h"
#include "Poco/File.h"

#include "h248_cli_stimulis.h"
#include <stdio.h>
#include "sub_h248_database.h"
#include "sub_sdp_parser.h"
#include "h248stack_database.h"
#include "h248stack_a_messagebuilder.h"

H248_CLI_Stimuli::H248_CLI_Stimuli(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database): m_command(command), m_database(database)
{
  if (parent != 0)
    parent->addChild(this);
}

H248_CLI_Stimuli::~H248_CLI_Stimuli()
{
  std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      delete (*iterChildList);
    }
}
void H248_CLI_Stimuli::doAction(char *argv[])
{

  if (m_command.find (argv[0]) != std::string::npos)
  {
  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->doAction(&argv[1]);
    }
  }

}

void H248_CLI_Stimuli::help(char *argv[])
{

}

void H248_CLI_Stimuli::addChild(class H248_CLI_Stimuli* child)
{
  m_childs.push_back(child);
}


H248_CLI_Stimuli_Root::H248_CLI_Stimuli_Root(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database): H248_CLI_Stimuli(command, parent, database)
{
}

H248_CLI_Stimuli_Root::~H248_CLI_Stimuli_Root()
{

}
void H248_CLI_Stimuli_Root::doAction(char *argv[])
{

  std::string command(argv[0]);
  if (command.find ("help") != std::string::npos)
  {
    if (argv[1] != 0)
      help(&argv[1]);
    else
    {
      std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
      for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
      {

        (*iterChildList)->help(&argv[1]);
      }
    }
  }
  if ((m_command.find (argv[0]) != std::string::npos) && (argv[1] == 0))
  {
    printf("root command of the stimulis");
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
      consumed++;
    }
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_Root::help(char *argv[])
{
  if ((m_command.find (argv[0]) != std::string::npos) && (argv[1] == 0))
  {
    printf(" This is the help function for root\n");
  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}

H248_CLI_Stimuli_Database::H248_CLI_Stimuli_Database(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database): H248_CLI_Stimuli(command, parent, database)
{
}

H248_CLI_Stimuli_Database::~H248_CLI_Stimuli_Database()
{

}
void H248_CLI_Stimuli_Database::doAction(char *argv[])
{

  if ((m_command.find (argv[0]) != std::string::npos) && (argv[1] == 0))
  {
    printf("Database\n");
    printf("--------------\n");
    printf("MGC Max Retransmission           %u\n", m_database->getDatabase()->getMgcMaxRetransmission());
    printf("MGC Number of Modifies in Bundle %u\n", m_database->getDatabase()->getMgcModifyBundles());
    printf("MGC Startup Modify with Timer (1= yes)/(0 = no) %u\n", m_database->getDatabase()->getMgcStartupModifyWithTimer());
    printf("MGC Root Digitmap                %s\n", m_database->getDatabase()->getRootDigitmap().c_str());
    printf("MGC BundlesTimeout in [ms]       %u\n", m_database->getDatabase()->getMgcBundlesTimeout());
    printf("MGC IP Port                      %s\n", m_database->getDatabase()->getMgcH248IpPort().c_str());
    printf("MGC IP Address                   %s\n", m_database->getDatabase()->getMgcH248IpAddress().c_str());
    printf("\n");
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
     consumed++;
    }

    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_Database::help(char *argv[])
{
  if ((argv[0] == 0) || ((m_command.find (argv[0]) != std::string::npos) && (argv[1] == 0)))
  {
    printf("Call: database\n");
    if (m_childs.size() != 0)
    {
      std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
      for (iterChildList = m_childs.begin();  iterChildList != m_childs.end(); iterChildList++)
      {
        printf("----------------------------------------------\n");
        (*iterChildList)->help(&argv[0]);

      }
    }
  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}

H248_CLI_Stimuli_Db_Gateways::H248_CLI_Stimuli_Db_Gateways(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database): H248_CLI_Stimuli(command, parent, database)
{
}

H248_CLI_Stimuli_Db_Gateways::~H248_CLI_Stimuli_Db_Gateways()
{

}
void H248_CLI_Stimuli_Db_Gateways::doAction(char *argv[])
{

  if ((m_command.find (argv[0]) != std::string::npos) && (argv[1] == 0))
  {
    printf("Gateways in Database\n");
    printf("--------------------\n");
    printf("\n");
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
     consumed++;
    }

    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_Db_Gateways::help(char *argv[])
{
  if ((argv[0] == 0) || ((m_command.find (argv[0]) != std::string::npos) && (argv[1] == 0)))
  {
    printf("Call: database gateways\n");
  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}

//#include "Poco/Util/Application.h"
#include "smallmgc.h"
#include "sub_h248_basenotify.h"

H248_CLI_Stimuli_SendMessages::H248_CLI_Stimuli_SendMessages(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database,
                            class SmallMgc* app): H248_CLI_Stimuli(command, parent, database), m_app(app)
{
}

H248_CLI_Stimuli_SendMessages::~H248_CLI_Stimuli_SendMessages()
{

}
void H248_CLI_Stimuli_SendMessages::doAction(char *argv[])
{

  if ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0))
  {
    if (argv[1] != 0)
    {
      printf("   Send Message to Parser\n");
      printf("---------------------------------\n");
      int whichMessage = atoi(argv[1]);
      std::string mesg;
      switch (whichMessage)
      {
        case 1: mesg = "!/1 [10.1.2.51]:2944 P=543{C=-{sc=ROOT}}";
             break;
        case 2: mesg = "MEGACO/1 [10.1.2.20]:2944\nT=1{\n C=-{\n   ServiceChange=ROOT{\n      Services{\n        Method=Restart\n      }\n   }\n }\n}";
             break;
        case 3: mesg = //"MEGACO/1 [10.1.2.20]:2944\nT=1{\n C=-{\n   ServiceChange=ROOT{\n      Services{\n        Method=Restart\n      }\n   }\n }\n}";
                     "MEGACO/1 [127.0.0.1]\nTransaction=30914{\nContext=-{\nServiceChange=root{Services{Method=Restart, Reason=\"901 Cold Boot\", Version=2, 20091112T15233000}}\n}\n}";
                     break;

      }
      if (!mesg.empty())
      {
        printf("%s\n", mesg.c_str());
        SUB_H248_BaseNotify* message = new SUB_H248_BaseNotify(mesg);
        m_app->getParserQueue()->enqueueNotification(message);
      }
      //m_app->displayQueueInfo();
      printf("\n");
    }
    else
    {
      printf("Parameter 1 is missing");
    }
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
      consumed++;
    }
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed+1] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_SendMessages::help(char *argv[])
{
  if ((argv[0] == 0) || ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0)))
  {
    printf("Call: send param\n");
    printf("Param  1  : Service change reply of real softswitch in esa mode\n");
    if (m_childs.size() != 0)
    {
      std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
          for (iterChildList = m_childs.begin();
              iterChildList != m_childs.end();
              iterChildList++)
          {
              printf("----------------------------------------------\n");
              (*iterChildList)->help(&argv[0]);

          }
    }
  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}

H248_CLI_Stimuli_SendMessagesHR::H248_CLI_Stimuli_SendMessagesHR(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database,
                            class SmallMgc* app): H248_CLI_Stimuli(command, parent, database), m_app(app)
{
}

H248_CLI_Stimuli_SendMessagesHR::~H248_CLI_Stimuli_SendMessagesHR()
{

}
void H248_CLI_Stimuli_SendMessagesHR::doAction(char *argv[])
{

  if ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0))
  {
    printf("   Send Message H to Parser\n");
    printf("---------------------------------\n");
    int whichMessage = atoi(argv[1]);
    std::string mesg;
    switch (whichMessage)
    {
      case 1: mesg = "!/1 [172.31.47.195]:2944 T=372799720{C=-{MF=A0{E=369099268{dd/ce{DM=dmap1},al/*},SG{cg/dt},DM=dmap1{([2-8]xxxxxxx|13xxxxxxxxx|0xxxxxxxxx|9xxxx|1[0124-9]x|E|F|x.F|[0-9].L)}}}}";
             break;
      case 2: mesg = "!/1 [172.31.47.195]:2944 T=372799721{C=-{MF=A0{E=369099269{tonedet/std{tl=*},al/*},SG{}}}}";
             break;
      case 3: mesg = "!/1 [172.31.47.195]:2944 T=369391850{C=${A=A0{M{O{MO=IN,RV=OFF,RG=OFF}},E=369099270{tonedet/std{tl=*},al/*},SG{}},A=${M{O{MO=RC,RV=OFF,RG=OFF},L{v=0\n    c=IN IP4 $\n    m=audio $ RTP/AVP 8\n    a=ptime:20\n    }}}}}";
             break;
     case 4: mesg = "!/1 [172.31.47.195]:2944 T=369391851{C=${A=A1{M{O{MO=SR,RV=OFF,RG=OFF}},E=369099527{al/*},SG{}},A=${M{O{MO=IN,RV=OFF,RG=OFF},L{v=0\n    c=IN IP4 $\n    m=audio $ RTP/AVP 8\n    a=ptime:20\n    },R{v=0\n    c=IN IP4 172.31.32.110\n    m=audio 50000 RTP/AVP 8\n    a=ptime:20\n    }}}}}";
             break;
     case 5: mesg = "!/1 [172.31.47.195]:2944 T=372799724{C=2{MF=A1{E=369099528{al/*},SG{al/ri}}}}";
             break;
     case 6: mesg = "!/1 [172.31.47.195]:2944 T=370309357{C=1{MF=A0{E=369099273{al/*},SG{cg/rt}}}}";
             break;
     case 7: mesg = "!/1 [172.31.47.195]:2944 T=370309360{C=2{MF=A1{M{O{MO=SR,RV=OFF,RG=OFF,tdmc/ec=ON}},E=369099530{al/*},SG{}},MF=A1000001{M{O{MO=SR,RV=OFF,RG=OFF},R{v=0\n    c=IN IP4 172.31.32.110\n    m=audio 50000 RTP/AVP 8\n    a=ptime:20\n    }}}}}";
             break;
     case 8: mesg = "!/1 [172.31.47.195]:2944 T=370309361{C=1{MF=A0{M{O{MO=SR,RV=OFF,RG=OFF,tdmc/ec=ON}},E=369099275{al/*},SG{}},MF=A1000000{M{O{MO=SR,RV=OFF,RG=OFF},R{v=0\n    c=IN IP4 172.31.32.110\n    m=audio 50004 RTP/AVP 8\n    a=ptime:20\n    }}}}}";
             break;
     case 9: mesg = "!/1 [172.31.47.195]:2944 T=370309366{C=1{MF=A0{E=369099276{al/*},SG{}},MF=A1000000{M{O{MO=IN,RV=OFF,RG=OFF}}}}}";
             break;
     case 10: mesg = "!/1 [172.31.47.195]:2944 T=372537591{C=1{O-S=*}}";
             break;
     case 11: mesg = "!/1 [172.31.47.195]:2944 T=372799736{C=-{MF=A0{E=369099277{al/*},SG{}}}}";
             break;
     case 12: mesg = "!/1 [172.31.47.195]:2944 T=370309369{C=2{MF=A1{M{O{MO=IN,RV=OFF,RG=OFF}},E=369099534{al/*},SG{cg/bt}},MF=A1000001{M{O{MO=IN,RV=OFF,RG=OFF}}}}}";
             break;
     case 13: mesg = "!/1 [172.31.47.195]:2944 T=372799738{C=-{MF=A0{E=369099279{al/*},SG{}}}}";
             break;
     case 14: mesg = "MEGACO/2 <G10-SFU>:2944 Transaction=23737{Context=-{ServiceChange=root{Services{Method=Restart, Reason=\"901 Cold Boot\"}}}}TransactionResponseAck{23736}";
             break;
     case 15: mesg = "MEGACO/2 <G10-SFU>:2944 Transaction=15497{Context=-{NOTIFY=p/1{ObservedEvents=2{20100728T15044658:al/of}}}}";
//     case 15: mesg = "MEGACO/2 <G10-SFU>:2944 Transaction=15497{Context=-{Notify=p/1{ObservedEvents=2{al/of}}}}";
             break;
    }
    if (!mesg.empty())
    {
      printf("%s\n", mesg.c_str());
      SUB_H248_BaseNotify* message = new SUB_H248_BaseNotify(mesg);
      m_app->getParserQueue()->enqueueNotification(message);
    }
    //m_app->displayQueueInfo();
    printf("\n");
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
      consumed++;
    }
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed+1] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_SendMessagesHR::help(char *argv[])
{
  if ((argv[0] == 0) || ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0)))
  {
    printf("Call: send hcommands param\n");
    printf("");


  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}

H248_CLI_Stimuli_SendMessagesER::H248_CLI_Stimuli_SendMessagesER(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database,
                            class SmallMgc* app): H248_CLI_Stimuli(command, parent, database), m_app(app)
{
}

H248_CLI_Stimuli_SendMessagesER::~H248_CLI_Stimuli_SendMessagesER()
{

}
void H248_CLI_Stimuli_SendMessagesER::doAction(char *argv[])
{

  if ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0))
  {
    printf("   Send Message E to Parser\n");
    printf("---------------------------------\n");
    int whichMessage = atoi(argv[1]);
    std::string mesg;
    switch (whichMessage)
    {
      case 1: mesg = "!/1 <test01> T=612840747{C=-{SC=ROOT{SV{MT=RS,V=2,PF=BT_AGW/3,RE=\"901\",20090522T09561319}}}}";
             break;
      case 2: mesg = "";
             break;
      case 3: mesg = "!/2 <test01> P=27854249{C=-{MF=ROOT}}";
             break;
     case 4: mesg = "";
             break;
     case 5: mesg = "";
             break;
     case 6: mesg = "!/2 <test01> P=27854256{C=-{AV=Aln/6/31{M{TS{SI=IV}}}},C=*{AV=aln/6/31{ER=411{\"The transaction refers to an unknown ContextID\"}}}}";
             break;
     case 7: mesg = "!/2 <test01> T=242{C=19{N=Aln/6/31{OE=22403840{20090522T09594600:stimal/stedsig{sig=offHook}}}}}";
             break;
     case 8: mesg = "!/2 <test01> P=27855160{C=17{A=aln/6/31}}";
             break;
     case 9: mesg = "!/2 <test01> T=236{C=17{N=Aln/6/31{OE=22267392{20090522T09565700:xdd/xce{ds=\"033138281953\",meth=FM}}}}}";
             break;
     case 10: mesg = "!/2 <test01> P=27855227{C=17{MF=aln/6/31{ER=501{\"Not Implemented\"}}}}";
             break;
     case 11: mesg = "!/2 <test01> T=237{C=17{N=Aln/6/31{OE=22267392{20090522T09565700:xdd/d4}}}}";
             break;
     case 12: mesg = "!/2 <test01> P=27855267{C=17{MF=Aln/6/31,A=A100000008{M{O{MO=SR,RV=ON},L{v=0    c=IN IP4 10.210.4.130    m=audio 28640 RTP/AVP 8    a=rtpmap:98 telephone-event/8000    a=ptime:20    },R{v=0    c=IN IP4 10.211.4.53    m=audio 54522 RTP/AVP 8    a=rtpmap:98 telephone-event/8000    a=ptime:20    }}}}}";
             break;
     case 13: mesg = "!/2 <test01> T=238{C=17{N=Aln/6/31{OE=22267392{20090522T09572500:stimal/stedsig{sig=onHook}}}}}";
             break;
     case 14: mesg = "!/2 <test01> P=27855937{C=17{S=a100000008{SA{nt/dur=26710,nt/os=0,nt/or=0,rtp/ps=0,rtp/pr=0,rtp/pl=0,rtp/jit=0,rtp/delay=0}}}}";
                  break;
     case 15: mesg = "!/2 <test01> P=27855940{C=17{S=Aln/6/31{SA{tdmc/dur=30850}}}}";
                  break;
     case 16: mesg = "!/2 <test01> P=27859947{C=19{MF=Aln/6/31,A=A100000010{M{O{MO=SR,RV=ON},L{v=0    c=IN IP4 10.210.4.130    m=audio 28632 RTP/AVP 8    a=rtpmap:98 telephone-event/8000    a=ptime:20    },R{v=0    c=IN IP4 10.211.4.53    m=audio 54892 RTP/AVP 8    a=rtpmap:98 telephone-event/8000    a=ptime:20    }}}}}";
                  break;
     case 17: mesg = "";
                  break;
     case 18: mesg = "";
                  break;
     case 19: mesg = "";
                  break;
     case 20: mesg = "";
                  break;

    }
    if (!mesg.empty())
    {
      printf("%s\n", mesg.c_str());
      SUB_H248_BaseNotify* message = new SUB_H248_BaseNotify(mesg);
      m_app->getParserQueue()->enqueueNotification(message);
    }
    //m_app->displayQueueInfo();
    printf("\n");
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
      consumed++;
    }
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed+1] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_SendMessagesER::help(char *argv[])
{
  if ((argv[0] == 0) || ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0)))
  {
    printf("Call: send hcommands param\n");
    printf("");


  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}




H248_CLI_Stimuli_SendMessagesH::H248_CLI_Stimuli_SendMessagesH(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database,
                            class SmallMgc* app): H248_CLI_Stimuli(command, parent, database), m_app(app)
{
}

H248_CLI_Stimuli_SendMessagesH::~H248_CLI_Stimuli_SendMessagesH()
{

}
void H248_CLI_Stimuli_SendMessagesH::doAction(char *argv[])
{

  if ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0))
  {
    printf("   Send Message Replies H to Parser\n");
    printf("---------------------------------\n");
    int whichMessage = atoi(argv[1]);
    std::string mesg;
    switch (whichMessage)
    {
      case 1: mesg = "!/1 [172.31.32.110]:2944 P=372799720{C=-{mf=A0{e=369099268{DD/CE{dm=dmap1},AL/FL{MINDUR=80,MAXDUR=650},AL/ON{STRICT=EXACT},AL/OF{STRICT=EXACT}}}}}";
             break;
      case 2: mesg = "!/1 [172.31.32.110]:2944 P=372799721{C=-{mf=A0{e=369099269{TONEDET/STD{TL=*},AL/FL{MINDUR=80,MAXDUR=650},AL/ON{STRICT=EXACT},AL/OF{STRICT=EXACT}}}}}";
             break;
      case 3: mesg = "!/1 [172.31.32.110]:2944 P=369391850{C=1{a=A0{e=369099270{TONEDET/STD{TL=*},AL/FL{MINDUR=80,MAXDUR=650},AL/ON{STRICT=EXACT},AL/OF{STRICT=EXACT}}} ,a=A1000000{m{st=1{l{\n    v=0\n    o=KeymileBerne1 2272060971 2272060971 IN IP4 172.31.32.110\n    s=-\n    p=+55\n    c=IN IP4 172.31.32.110\n    t=0 0\n    m=audio 50000 RTP/AVP 8\n    a=ptime:20\n    }}}}}}";
             break;
     case 4: mesg = "!/1 [172.31.32.110]:2944 P=369391851{C=2{a=A1{e=369099527{AL/FL{MINDUR=80,MAXDUR=650},AL/ON{STRICT=EXACT},AL/OF{STRICT=EXACT}}} ,a=A1000001{m{st=1{l{\n    v=0\n    o=KeymileBerne1 2272060971 2272060971 IN IP4 172.31.32.110\n    s=-\n    p=+55\n    c=IN IP4 172.31.32.110\n    t=0 0\n    m=audio 50004 RTP/AVP 8\n    a=ptime:20\n    },r{\n    v=0\n    c=IN IP4 172.31.32.110\n    m=audio 50000 RTP/AVP 8\n    a=ptime:20\n    }}}}}}";
             break;
     case 5: mesg = " !/1 [172.31.32.110]:2944 P=372799724{C=2{mf=A1{e=369099528{AL/FL{MINDUR=80,MAXDUR=650},AL/ON{STRICT=EXACT},AL/OF{STRICT=EXACT}}}}}";
             break;
     case 6: mesg = "!/1 [172.31.32.110]:2944 P=370309357{C=1{mf=A0{e=369099273{AL/FL{MINDUR=80,MAXDUR=650},AL/ON{STRICT=EXACT},AL/OF{STRICT=EXACT}}}}}";
             break;
     case 7: mesg = "!/1 [172.31.32.110]:2944 P=370309360{C=2{mf=A1{e=369099530{AL/FL{MINDUR=80,MAXDUR=650},AL/ON{STRICT=EXACT},AL/OF{STRICT=EXACT}}} ,mf=A1000001{m{st=1{r{\n    v=0\n    c=IN IP4 172.31.32.110\n    m=audio 50000 RTP/AVP 8\n    a=ptime:20\n    }}}}}}";
             break;
     case 8: mesg = "!/1 [172.31.32.110]:2944 P=370309361{C=1{mf=A0{e=369099275{AL/FL{MINDUR=80,MAXDUR=650},AL/ON{STRICT=EXACT},AL/OF{STRICT=EXACT}}} ,mf=A1000000{m{st=1{r{\n    v=0\n    c=IN IP4 172.31.32.110\n    m=audio 50004 RTP/AVP 8\n    a=ptime:20\n    }}}}}}";
             break;
     case 9: mesg = "!/1 [172.31.32.110]:2944 P=372537591{C=1{s=A1000000{sa{NT/OR=0,NT/DUR=33760,NT/OS=0,RTP/PR=0,RTP/PL=0,RTP/JIT=0,RTP/DELAY=0,RTP/PS=0}} ,s=A0{sa{NT/OR=0,NT/DUR=33775,NT/OS=0,AMET/PCSLR=0,AMET/CPC=0}}}}";
             break;
     case 10: mesg = "!/1 [172.31.32.110]:2944 P=370309366{C=1{mf=A0{e=369099276{AL/FL{MINDUR=80,MAXDUR=650},AL/ON{STRICT=EXACT},AL/OF{STRICT=EXACT}}} ,mf=A1000000{er=411{\"The_transaction_refers_to_an_unknown_ContextId\"}}}}";
             break;
     case 11: mesg = "!/1 [172.31.32.110]:2944 P=370309369{C=2{mf=A1{e=369099534{AL/FL{MINDUR=80,MAXDUR=650},AL/ON{STRICT=EXACT},AL/OF{STRICT=EXACT}}} ,mf=A1000001}}";
             break;
     case 12: mesg = "!/1 [172.31.32.110]:2944 P=372799741{C=-{mf=A1{er=435{\"Termination_ID_is_not_in_specified_Context\"}}}}";
             break;
     case 13:
     {	 char t[2];
    	      t[0] = '"';
    	      t[1] = 0;
    	      std::string test(t);

    	 mesg = "!/1 [172.31.32.110]:2944 T=100002{C=-{n=A0{oe=369099268{dd/ce{ds=" + test +"12341" + test +",METH=FM}}}}}";
    } break;
     case 14:
      	 mesg = "!/1 [172.31.32.110]:2944 P=1{C=-{n=p/1}}\nP=2{C=-{n=p/2}}";
                  break;

    }
    if (!mesg.empty())
    {
      printf("%s\n", mesg.c_str());
      SUB_H248_BaseNotify* message = new SUB_H248_BaseNotify(mesg);
      m_app->getParserQueue()->enqueueNotification(message);
    }
    //m_app->displayQueueInfo();
    printf("\n");
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
      consumed++;
    }
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed+1] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_SendMessagesH::help(char *argv[])
{
  if ((argv[0] == 0) || ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0)))
  {
    printf("Call: send hreplies param\n");
    printf("Param  1  : Test Parser Modify Digitmap\n");
    printf("Param  2  : Test Parser Modify Tonedet\n");
    printf("Param  3  : Test Parser Add Tonedet\n");
    printf("Param  4  : Test Parser Add \n");
    printf("Param  5  : Test Parser Modify Off/On hook\n");
    printf("Param  6  : Test Parser Modify Off/On hook other context\n");
    printf("Param  7  : Test Parser Modify Physical/Ephemeral\n");
    printf("Param  8  : Test Parser Modify Physical/Ephemeral other context\n");
    printf("Param  9  : Test Parser Subtract Physical/Ephemeral\n");
    printf("Param 10  : Test Parser Modify Physical/Ephemeral, Ephemeral with error\n");
    printf("Param 11  : Test Parser Modify Physical/Ephemeral, Ephemeral without parameter\n");
    printf("Param 12  : Test Parser Modify Physical with error\n");
  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}



H248_CLI_Stimuli_QueueInfo::H248_CLI_Stimuli_QueueInfo(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database,
                            class SmallMgc* app): H248_CLI_Stimuli(command, parent, database), m_app(app)
{
}

H248_CLI_Stimuli_QueueInfo::~H248_CLI_Stimuli_QueueInfo()
{

}
void H248_CLI_Stimuli_QueueInfo::doAction(char *argv[])
{

  if ((m_command.find (argv[0]) != std::string::npos) && (argv[1] == 0))
  {
    printf("Queue Info\n");
    printf("--------------\n");
    m_app->displayQueueInfo();
    printf("\n");
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
      consumed++;
    }
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_QueueInfo::help(char *argv[])
{
  if ((argv[0] == 0) || ((m_command.find (argv[0]) != std::string::npos) && (argv[1] == 0)))
  {
    printf("Call: queue\n");
  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}

#include "sub_h248_sctp.h"
H248_CLI_Stimuli_SendIUAMessages::H248_CLI_Stimuli_SendIUAMessages(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database,
                            class SmallMgc* app): H248_CLI_Stimuli(command, parent, database), m_app(app)
{
}

H248_CLI_Stimuli_SendIUAMessages::~H248_CLI_Stimuli_SendIUAMessages()
{

}
void H248_CLI_Stimuli_SendIUAMessages::doAction(char *argv[])
{

  if ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0))
  {
    printf("   Send IUA Message to Peer\n");
    printf("---------------------------------\n");
    int whichMessage = atoi(argv[1]);
    char info[] = {
    0x01, 0x00, 0x03,0x01, 0x00, 0x00, 0x00, 0x08 };

    std::string mesg;
    switch (whichMessage)
    {
      case 1: mesg.append(info, 8);  //ASP UP
             break;
      case 2: mesg = "0100040100000010000b000800000001";  //ASP ACTIVE
             break;
      case 3: mesg = "";
             break;
     case 4: mesg = "0";
             break;
     case 5: mesg = "";
             break;
     case 6: mesg = "";
             break;

    }
    //if (!mesg.empty())
    {
      printf("%s\n", mesg.c_str());
      std::string ipAddr("10.1.2.30");
      //SUB_H248_BaseNotify* message = new SUB_H248_BaseNotify(mesg);
      m_app->getSubSctp()->sendTo(ipAddr, mesg, 0);
    }
    //m_app->displayQueueInfo();
    printf("\n");
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
      consumed++;
    }
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed+1] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_SendIUAMessages::help(char *argv[])
{
  if ((argv[0] == 0) || ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0)))
  {
    printf("Call: send iua param\n");
    printf("param  1  : Send ASP UP to peer\n");
    printf("param  1  : Send ASP Active to peer\n");
  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}

#include "sub_iua_notify.h"
H248_CLI_Stimuli_SendIUAQ931Messages::H248_CLI_Stimuli_SendIUAQ931Messages(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database,
                            class SmallMgc* app): H248_CLI_Stimuli(command, parent, database), m_app(app)
{
}

H248_CLI_Stimuli_SendIUAQ931Messages::~H248_CLI_Stimuli_SendIUAQ931Messages()
{

}
void H248_CLI_Stimuli_SendIUAQ931Messages::doAction(char *argv[])
{

  if ((m_command.find (argv[0]) != std::string::npos)) // && (argv[2] == 0))
  {
    printf("   Send IUA Q931 Message to Peer\n");
    printf("---------------------------------\n");
    int whichMessage = atoi(argv[1]);
    char info[] = {
    0x01, 0x00, 0x03,0x01, 0x00, 0x00, 0x00, 0x08 };
    SUB_IUA_Base* iuaMessage = 0;
    Poco::UInt8 est_ind_iua[] = {0x01, 0x00,
    0x05, 0x07, 0x00, 0x00, 0x00, 0x18, 0x00, 0x01,
    0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05,
    0x00, 0x08, 0x00, 0x83, 0x00, 0x00 };

    Poco::UInt8 iua_rel_ind[] = {0x01, 0x00,
    		0x05, 0x0a, 0x00, 0x00, 0x00, 0x20, 0x00, 0x01,
    		0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05,
    		0x00, 0x08, 0x00, 0x83, 0x00, 0x00, 0x00, 0x0f,
    		0x00, 0x08, 0x00, 0x00, 0x00, 0x00 };

    Poco::UInt8 iua_user_alerting[] = {0x01, 0x00,
    		0x05, 0x02, 0x00, 0x00, 0x00, 0x24, 0x00, 0x01,
    		0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05,
    		0x00, 0x08, 0x00, 0x83, 0x00, 0x00, 0x00, 0x0e,
    		0x00, 0x0b, 0x08, 0x01, 0x84, 0x01, 0x18, 0x01,
    		0x89, 0x00 };

    Poco::UInt8 iua_user_connect[] = {0x01, 0x00,
    		0x05, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x01,
    		0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05,
    		0x00, 0x08, 0x00, 0x83, 0x00, 0x00, 0x00, 0x0e,
    		0x00, 0x08, 0x08, 0x01, 0x84, 0x07 };

    Poco::UInt8 iua_user_disconnect[] = {0x01, 0x00,
    		0x05, 0x02, 0x00, 0x00, 0x00, 0x24, 0x00, 0x01,
    		0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05,
    		0x00, 0x08, 0x00, 0x83, 0x00, 0x00, 0x00, 0x0e,
    		0x00, 0x0c, 0x08, 0x01, 0x84, 0x45, 0x08, 0x02,
    		0x80, 0x90 };
    Poco::UInt8 iua_user_information[] = {0x01, 0x00, 0x05, 0x02, 0x00, 0x00,
    		0x00, 0x24, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00,
    		0x00, 0x01, 0x00, 0x05, 0x00, 0x08, 0x00, 0x83,
    		0x00, 0x00, 0x00, 0x0e, 0x00, 0x0c, 0x08, 0x01,
    		0x01, 0x7b, 0x70, 0x02, 0x81, 0x32 };
    Poco::UInt8 iua_user_release_complete[] = {0x01, 0x00,
    		0x05, 0x02, 0x00, 0x00, 0x00, 0x24, 0x00, 0x01,
    		0x00, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05,
    		0x00, 0x08, 0x00, 0x83, 0x00, 0x00, 0x00, 0x0e,
    		0x00, 0x0c, 0x08, 0x01, 0x84, 0x5a, 0x08, 0x02,
    		0x80, 0x90 };
    Poco::UInt8 iua_user_setup[] = {0x01, 0x00, 0x05, 0x02, 0x00, 0x00,
    		0x00, 0x2c, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00,
    		0x00, 0x01, 0x00, 0x05, 0x00, 0x08, 0x00, 0x83,
    		0x00, 0x00, 0x00, 0x0e, 0x00, 0x14, 0x08, 0x01,
    		0x01, 0x05, 0x04, 0x03, 0x80, 0x90, 0xa3, 0x18,
    		0x01, 0x83, 0x7d, 0x02, 0x91, 0x81 };
    Poco::UInt8 iua_user_tei_ind[] = {0x01, 0x00, 0x00, 0x04, 0x00, 0x00,
    		0x00, 0x20, 0x00, 0x01, 0x00, 0x08, 0x00, 0x00,
    		0x00, 0x01, 0x00, 0x05, 0x00, 0x08, 0x00, 0x83,
    		0x00, 0x00, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00,
    		0x00, 0x00, 0x00};



    std::vector<Poco::UInt8> mesg;
    switch (whichMessage)
    {
      case 1: mesg.assign(est_ind_iua, est_ind_iua+sizeof(est_ind_iua));  //Establish indication
              iuaMessage = new SUB_IUA_EstablishInd(mesg);
      break;
      case 2: mesg.assign(iua_rel_ind, iua_rel_ind+sizeof(iua_rel_ind));
              iuaMessage = new SUB_IUA_ReleaseInd(mesg);
      break;
      case 3: mesg.assign(iua_user_alerting, iua_user_alerting+sizeof(iua_user_alerting));
              iuaMessage = new SUB_IUA_Data(mesg);
      break;
     case 4: mesg.assign(iua_user_connect, iua_user_connect+sizeof(iua_user_connect));
     iuaMessage = new SUB_IUA_Data(mesg);
      break;
     case 5: mesg.assign(iua_user_disconnect, iua_user_disconnect+sizeof(iua_user_disconnect));
     iuaMessage = new SUB_IUA_Data(mesg);
     break;
     case 6: mesg.assign(iua_user_information, iua_user_information+sizeof(iua_user_information));
     iuaMessage = new SUB_IUA_Data(mesg);
     break;
     case 7: mesg.assign(iua_user_release_complete, iua_user_release_complete+sizeof(iua_user_release_complete));
     iuaMessage = new SUB_IUA_Data(mesg);
     break;
     case 8: mesg.assign(iua_user_setup, iua_user_setup+sizeof(iua_user_setup));
     iuaMessage = new SUB_IUA_Data(mesg);
     break;
     case 9: mesg.assign(iua_user_tei_ind, iua_user_tei_ind+sizeof(iua_user_tei_ind));
     iuaMessage = new SUB_IUA_TeiIndication(mesg);        break;
     case 10:
     {
       std::string ipAddr(argv[2]);
       std::string iuaId(argv[3]);
       int length = 0;
       int rest = (20+iuaId.size()) % 4;
       if (rest != 0)
       {
         length = (20+iuaId.size()) + 4 -rest;
       }
       else
       {
         length = (20+iuaId.size());
       }

       SUB_IUA_Base* iuaMessage = 0;
       std::vector<Poco::UInt8> message;
       message.push_back((Poco::UInt8)1);
       message.push_back(0);  //reserved
       message.push_back((Poco::UInt8)  0);  // message class MGMT
       message.push_back((Poco::UInt8) 2); // message type TEI Request
       message.push_back( 0);
       message.push_back(0);
       message.push_back(length/0x100); //24
       message.push_back(length%0x100); //24

       // interface identifier at the moment only text
       message.push_back(0);
       message.push_back(0x3);
       message.push_back(0);
       message.push_back(4+ iuaId.size());

       int idLength;
       for (idLength = 0; idLength < iuaId.size(); idLength++)
       {
         message.push_back((Poco::UInt8)iuaId.at(idLength));
       }

       message.push_back(0);
       message.push_back(0x5); //dlci
       message.push_back(0);
       message.push_back(8);   // dlci length

       message.push_back(0);  //sapi
       message.push_back(0x7f<<1 | 0x1); // tei value in dlci must be ignored by SG
       message.push_back(0);
       message.push_back(0);

       std::string mesg;
       for (int  i= 0; i < message.size(); i++)
       {
         mesg.append((char*)&(message[i]), 1);
       }
       m_app->getSubSctp()->sendTo(ipAddr, mesg,  0);

     }
     return;
     default: break;
    }
    Poco::UInt32 ifType = mesg[8]*255 + mesg[9];
    Poco::UInt32 ifLength = 0;
    if (ifType == 1)
    {
      ifLength = 4;
      iuaMessage->setIntegerIfId(255*255*255*mesg[12]+255*255*mesg[13]+255*mesg[14]+mesg[15]);
    }
    else if (ifType == 3)
    {
      ifLength = mesg[10]*255+ mesg[11] -4;
      std::string test;
      for (int j = 0; j < ifLength; j++)
      {
    	 test.append((char*)&mesg[12+j]);
      }
      iuaMessage->setTextIfId(test);
    }
    std::string textId("ba/1");
    std::string ip("10.1.2.30");
    iuaMessage->setTei(mesg[21]>>1);
    iuaMessage->setStreamId(1);
    iuaMessage->setIpAddress(ip);
    iuaMessage->setTextIfId(textId);

    if ((whichMessage != 1) && (whichMessage != 2))
    {
      Poco::UInt32 layer3Length = mesg[22+ifLength]*255 + mesg[23+ifLength]-4;

      std::vector<Poco::UInt8> layer3(layer3Length+5);
      for (int j= 0; j < layer3Length+1; j++)
      {
    	layer3[j] = mesg[24+ifLength+j];
      }
      iuaMessage->setLayer3(layer3);
    }
    printf("Message-> Interface Id %u; Tei : %u",iuaMessage->getIntegerIfId(), iuaMessage->getTei());

    m_app->getIuaPackets()->enqueueNotification(iuaMessage);
    //if (!mesg.empty())
    {
     // printf("%s\n", mesg.c_str());
      //std::string ipAddr("10.1.2.30");
      //SUB_H248_BaseNotify* message = new SUB_H248_BaseNotify(mesg);
      //m_app->getSubSctp()->sendTo(ipAddr, mesg);
    }
    //m_app->displayQueueInfo();
    printf("\n");
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
      consumed++;
    }
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed+1] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_SendIUAQ931Messages::help(char *argv[])
{
  if ((argv[0] == 0) || ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0)))
  {
    printf("Call: send iuaq931 param\n");
    printf("Param  1  : IUA Q931 L2 Establish Indication as from Peer\n");
    printf("Param  2  : IUA Q931 Release Indication as from Peer\n");
    printf("Param  3  : IUA Q931 Alerting as from Peer\n");
    printf("Param  4  : IUA Q931 Connect as from Peer\n");
    printf("Param  5  : IUA Q931 Disconnect as from Peer\n");
    printf("Param  6  : IUA Q931 User Information as from Peer\n");
    printf("Param  7  : IUA Q931 Release Complete as from Peer\n");
    printf("Param  8  : IUA Q931 User Setup as from Peer\n");
    printf("Param  9  : IUA Q931 User Tei Indication as from Peer\n");
    printf("Param 10  : ipAddress iuaId ; IUA Tei Request to Peer\n");
  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}

H248_CLI_Stimuli_SendMessagesSip::H248_CLI_Stimuli_SendMessagesSip(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database,
                            class SmallMgc* app): H248_CLI_Stimuli(command, parent, database), m_app(app)
{
}

H248_CLI_Stimuli_SendMessagesSip::~H248_CLI_Stimuli_SendMessagesSip()
{

}
void H248_CLI_Stimuli_SendMessagesSip::doAction(char *argv[])
{

  if ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0))
  {
    printf("   Send Message Sip to Parser\n");
    printf("---------------------------------\n");
    int whichMessage = atoi(argv[1]);
    std::string mesg;
    char pkt1[] = {
    0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
    0x20, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
    0x6d, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x30, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49,
    0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3b, 0x62,
    0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x66, 0x66, 0x39, 0x62, 0x34, 0x36, 0x66, 0x62, 0x30, 0x35, 0x35,
    0x63, 0x30, 0x35, 0x32, 0x31, 0x63, 0x63, 0x32, 0x34, 0x30, 0x32, 0x34, 0x64, 0x61, 0x39, 0x36, 0x63, 0x64, 0x32, 0x39, 0x30, 0x0d, 0x0a, 0x56,
    0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37,
    0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62,
    0x4b, 0x32, 0x39, 0x31, 0x64, 0x39, 0x30, 0x65, 0x33, 0x31, 0x61, 0x34, 0x37, 0x62, 0x32, 0x32, 0x35, 0x62, 0x64, 0x30, 0x64, 0x64, 0x66, 0x66,
    0x34, 0x33, 0x35, 0x33, 0x65, 0x39, 0x63, 0x63, 0x30, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x32, 0x30,
    0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x70, 0x68,
    0x6f, 0x6e, 0x65, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x47, 0x52, 0x35, 0x32, 0x52, 0x57, 0x47, 0x33, 0x34, 0x36, 0x2d, 0x33, 0x34, 0x0d, 0x0a,
    0x54, 0x6f, 0x3a, 0x20, 0x22, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
    0x6d, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c,
    0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x30, 0x3e, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x31, 0x32,
    0x30, 0x31, 0x33, 0x32, 0x32, 0x33, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x0d, 0x0a, 0x43, 0x53, 0x65,
    0x71, 0x3a, 0x20, 0x31, 0x20, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x3c, 0x73,
    0x69, 0x70, 0x3a, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x30, 0x36, 0x30, 0x3e, 0x0d, 0x0a, 0x43,
    0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
    0x2f, 0x73, 0x64, 0x70, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x20, 0x20,
    0x32, 0x32, 0x39, 0x0d, 0x0a, 0x0d, 0x0a, 0x76, 0x3d, 0x30, 0x0d, 0x0a, 0x6f, 0x3d, 0x43, 0x6c, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x31, 0x32,
    0x30, 0x33, 0x38, 0x36, 0x20, 0x31, 0x32, 0x30, 0x33, 0x38, 0x37, 0x20, 0x49, 0x4e, 0x20, 0x49, 0x50, 0x34, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35,
    0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x36, 0x0d, 0x0a, 0x73, 0x3d, 0x43, 0x6c, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x43, 0x35, 0x43, 0x4d, 0x0d,
    0x0a, 0x63, 0x3d, 0x49, 0x4e, 0x20, 0x49, 0x50, 0x34, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x36, 0x0d, 0x0a,
    0x74, 0x3d, 0x30, 0x20, 0x30, 0x0d, 0x0a, 0x6d, 0x3d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x20, 0x34, 0x30, 0x33, 0x37, 0x36, 0x20, 0x52, 0x54, 0x50,
    0x2f, 0x41, 0x56, 0x50, 0x20, 0x38, 0x20, 0x31, 0x38, 0x20, 0x34, 0x20, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a,
    0x38, 0x20, 0x50, 0x43, 0x4d, 0x41, 0x2f, 0x38, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x31, 0x38,
    0x20, 0x47, 0x37, 0x32, 0x39, 0x2f, 0x38, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x34, 0x20, 0x47,
    0x37, 0x32, 0x33, 0x2f, 0x38, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x30, 0x20, 0x50, 0x43, 0x4d,
    0x55, 0x2f, 0x38, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x76, 0x0d, 0x0a };

    char pkt2[] = {
    0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e,
    0x30, 0x20, 0x31, 0x30, 0x30, 0x20, 0x54, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32,
    0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3b, 0x62, 0x72, 0x61, 0x6e,
    0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x66, 0x66, 0x39, 0x62, 0x34, 0x36, 0x66, 0x62, 0x30, 0x35, 0x35, 0x63, 0x30, 0x35,
    0x32, 0x31, 0x63, 0x63, 0x32, 0x34, 0x30, 0x32, 0x34, 0x64, 0x61, 0x39, 0x36, 0x63, 0x64, 0x32, 0x39, 0x30, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a,
    0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39,
    0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x32, 0x39,
    0x31, 0x64, 0x39, 0x30, 0x65, 0x33, 0x31, 0x61, 0x34, 0x37, 0x62, 0x32, 0x32, 0x35, 0x62, 0x64, 0x30, 0x64, 0x64, 0x66, 0x66, 0x34, 0x33, 0x35,
    0x33, 0x65, 0x39, 0x63, 0x63, 0x30, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x32, 0x30, 0x30, 0x2e, 0x35,
    0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x70, 0x68, 0x6f, 0x6e, 0x65,
    0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x47, 0x52, 0x35, 0x32, 0x52, 0x57, 0x47, 0x33, 0x34, 0x36, 0x2d, 0x33, 0x34, 0x0d, 0x0a, 0x54, 0x6f, 0x3a,
    0x20, 0x22, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x20,
    0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
    0x6d, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x30, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x32, 0x39, 0x38, 0x38, 0x35, 0x32, 0x30, 0x34, 0x34, 0x0d, 0x0a,
    0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40,
    0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3e, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c,
    0x2d, 0x49, 0x44, 0x3a, 0x20, 0x31, 0x32, 0x30, 0x31, 0x33, 0x32, 0x32, 0x33, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31,
    0x39, 0x35, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x0d, 0x0a, 0x53, 0x65, 0x72, 0x76,
    0x65, 0x72, 0x3a, 0x20, 0x58, 0x2d, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x31, 0x31, 0x30, 0x33, 0x6d,
    0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a };

    char pkt3[] = {
    0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e,
    0x30, 0x20, 0x31, 0x38, 0x30, 0x20, 0x52, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f,
    0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3b, 0x62, 0x72, 0x61,
    0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x66, 0x66, 0x39, 0x62, 0x34, 0x36, 0x66, 0x62, 0x30, 0x35, 0x35, 0x63, 0x30,
    0x35, 0x32, 0x31, 0x63, 0x63, 0x32, 0x34, 0x30, 0x32, 0x34, 0x64, 0x61, 0x39, 0x36, 0x63, 0x64, 0x32, 0x39, 0x30, 0x0d, 0x0a, 0x56, 0x69, 0x61,
    0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31,
    0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x32,
    0x39, 0x31, 0x64, 0x39, 0x30, 0x65, 0x33, 0x31, 0x61, 0x34, 0x37, 0x62, 0x32, 0x32, 0x35, 0x62, 0x64, 0x30, 0x64, 0x64, 0x66, 0x66, 0x34, 0x33,
    0x35, 0x33, 0x65, 0x39, 0x63, 0x63, 0x30, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x32, 0x30, 0x30, 0x2e,
    0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x70, 0x68, 0x6f, 0x6e,
    0x65, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x47, 0x52, 0x35, 0x32, 0x52, 0x57, 0x47, 0x33, 0x34, 0x36, 0x2d, 0x33, 0x34, 0x0d, 0x0a, 0x54, 0x6f,
    0x3a, 0x20, 0x22, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22,
    0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63,
    0x6f, 0x6d, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x30, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x32, 0x39, 0x38, 0x38, 0x35, 0x32, 0x30, 0x34, 0x34, 0x0d,
    0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f,
    0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3e, 0x0d, 0x0a, 0x43, 0x61, 0x6c,
    0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x31, 0x32, 0x30, 0x31, 0x33, 0x32, 0x32, 0x33, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e,
    0x31, 0x39, 0x35, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x0d, 0x0a, 0x53, 0x65, 0x72,
    0x76, 0x65, 0x72, 0x3a, 0x20, 0x58, 0x2d, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x31, 0x31, 0x30, 0x33,
    0x6d, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a };

    char pkt44[] = {
    0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
    0x45, 0x52, 0x20, 0x73, 0x69, 0x70, 0x3a, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30,
    0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35,
    0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x35, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63,
    0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x44, 0x43, 0x38, 0x35, 0x39, 0x35, 0x43, 0x44, 0x37, 0x37, 0x30, 0x45, 0x34, 0x33, 0x31,
    0x37, 0x41, 0x43, 0x42, 0x43, 0x33, 0x42, 0x36, 0x34, 0x43, 0x46, 0x35, 0x30, 0x31, 0x36, 0x43, 0x35, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a,
    0x20, 0x49, 0x76, 0x61, 0x6e, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x49, 0x76, 0x61, 0x6e, 0x40, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e, 0x63, 0x6f,
    0x6d, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x31, 0x35, 0x31, 0x36, 0x36, 0x35, 0x39, 0x33, 0x37, 0x30, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x49,
    0x76, 0x61, 0x6e, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x49, 0x76, 0x61, 0x6e, 0x40, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x3e,
    0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x22, 0x49, 0x76, 0x61, 0x6e, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x49,
    0x76, 0x61, 0x6e, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x35, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3e, 0x0d, 0x0a,
    0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x34, 0x36, 0x45, 0x31, 0x43, 0x33, 0x43, 0x42, 0x33, 0x36, 0x33, 0x30, 0x34, 0x46, 0x38,
    0x34, 0x41, 0x30, 0x32, 0x30, 0x43, 0x46, 0x36, 0x44, 0x44, 0x33, 0x46, 0x39, 0x36, 0x34, 0x36, 0x31, 0x40, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e,
    0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x33, 0x37, 0x37, 0x36, 0x34, 0x20, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
    0x52, 0x0d, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x3a, 0x20, 0x31, 0x38, 0x30, 0x30, 0x0d, 0x0a, 0x4d, 0x61, 0x78, 0x2d, 0x46, 0x6f,
    0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x37, 0x30, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20,
    0x56, 0x65, 0x72, 0x73, 0x6f, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20,
    0x31, 0x31, 0x30, 0x34, 0x77, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30,
    0x0d, 0x0a, 0x0d, 0x0a };

    char pkt45[] = {
    0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e,
    0x30, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55,
    0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x35, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x72, 0x65, 0x63,
    0x65, 0x69, 0x76, 0x65, 0x64, 0x3d, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x35, 0x3b, 0x72, 0x70, 0x6f, 0x72, 0x74,
    0x3d, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x44, 0x43, 0x38, 0x35,
    0x39, 0x35, 0x43, 0x44, 0x37, 0x37, 0x30, 0x45, 0x34, 0x33, 0x31, 0x37, 0x41, 0x43, 0x42, 0x43, 0x33, 0x42, 0x36, 0x34, 0x43, 0x46, 0x35, 0x30,
    0x31, 0x36, 0x43, 0x35, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x22, 0x49, 0x76, 0x61, 0x6e, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a,
    0x49, 0x76, 0x61, 0x6e, 0x40, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x31, 0x35, 0x31, 0x36,
    0x36, 0x35, 0x39, 0x33, 0x37, 0x30, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x22, 0x49, 0x76, 0x61, 0x6e, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a,
    0x49, 0x76, 0x61, 0x6e, 0x40, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x3e, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44,
    0x3a, 0x20, 0x34, 0x36, 0x45, 0x31, 0x43, 0x33, 0x43, 0x42, 0x33, 0x36, 0x33, 0x30, 0x34, 0x46, 0x38, 0x34, 0x41, 0x30, 0x32, 0x30, 0x43, 0x46,
    0x36, 0x44, 0x44, 0x33, 0x46, 0x39, 0x36, 0x34, 0x36, 0x31, 0x40, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x43, 0x53,
    0x65, 0x71, 0x3a, 0x20, 0x33, 0x37, 0x37, 0x36, 0x34, 0x20, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
    0x61, 0x63, 0x74, 0x3a, 0x20, 0x22, 0x49, 0x76, 0x61, 0x6e, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x49, 0x76, 0x61, 0x6e, 0x40, 0x32, 0x30,
    0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x35, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3e, 0x0d, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
    0x73, 0x3a, 0x20, 0x32, 0x30, 0x0d, 0x0a, 0x6d, 0x61, 0x78, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x37, 0x30, 0x0d,
    0x0a, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x70,
    0x68, 0x6f, 0x6e, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x31, 0x31, 0x30, 0x34, 0x77, 0x0d, 0x0a, 0x41, 0x6c, 0x6c, 0x6f,
    0x77, 0x3a, 0x20, 0x52, 0x45, 0x46, 0x45, 0x52, 0x2c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x2c, 0x20, 0x42, 0x59, 0x45, 0x2c, 0x20, 0x43, 0x41, 0x4e,
    0x43, 0x45, 0x4c, 0x2c, 0x20, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e,
    0x67, 0x74, 0x68, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a };

    char pkt195[] = {
    0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e,
    0x30, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x6b, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55,
    0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a,
    0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x66, 0x66, 0x39, 0x62, 0x34, 0x36, 0x66, 0x62, 0x30, 0x35, 0x35, 0x63, 0x30, 0x35, 0x32, 0x31, 0x63, 0x63,
    0x32, 0x34, 0x30, 0x32, 0x34, 0x64, 0x61, 0x39, 0x36, 0x63, 0x64, 0x32, 0x39, 0x30, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50,
    0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35,
    0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x32, 0x39, 0x31, 0x64, 0x39, 0x30,
    0x65, 0x33, 0x31, 0x61, 0x34, 0x37, 0x62, 0x32, 0x32, 0x35, 0x62, 0x64, 0x30, 0x64, 0x64, 0x66, 0x66, 0x34, 0x33, 0x35, 0x33, 0x65, 0x39, 0x63,
    0x63, 0x30, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e,
    0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3e, 0x3b, 0x74, 0x61,
    0x67, 0x3d, 0x47, 0x52, 0x35, 0x32, 0x52, 0x57, 0x47, 0x33, 0x34, 0x36, 0x2d, 0x33, 0x34, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x22, 0x66, 0x72,
    0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70,
    0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x35, 0x35,
    0x30, 0x36, 0x30, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x32, 0x39, 0x38, 0x38, 0x35, 0x32, 0x30, 0x34, 0x34, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
    0x61, 0x63, 0x74, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x32, 0x30, 0x30, 0x2e,
    0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3e, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a,
    0x20, 0x31, 0x32, 0x30, 0x31, 0x33, 0x32, 0x32, 0x33, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x0d, 0x0a,
    0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d,
    0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x64, 0x70, 0x0d, 0x0a, 0x53,
    0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x58, 0x2d, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x31, 0x31,
    0x30, 0x33, 0x6d, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x32, 0x39, 0x38,
    0x0d, 0x0a, 0x0d, 0x0a, 0x76, 0x3d, 0x30, 0x0d, 0x0a, 0x6f, 0x3d, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x20, 0x31, 0x33, 0x30,
    0x30, 0x34, 0x39, 0x37, 0x30, 0x20, 0x31, 0x33, 0x30, 0x31, 0x33, 0x34, 0x34, 0x32, 0x20, 0x49, 0x4e, 0x20, 0x49, 0x50, 0x34, 0x20, 0x32, 0x30,
    0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x0d, 0x0a, 0x73, 0x3d, 0x58, 0x2d, 0x4c, 0x69, 0x74, 0x65, 0x0d, 0x0a, 0x63, 0x3d,
    0x49, 0x4e, 0x20, 0x49, 0x50, 0x34, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x0d, 0x0a, 0x74, 0x3d, 0x30,
    0x20, 0x30, 0x0d, 0x0a, 0x6d, 0x3d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x20, 0x38, 0x30, 0x30, 0x30, 0x20, 0x52, 0x54, 0x50, 0x2f, 0x41, 0x56, 0x50,
    0x20, 0x38, 0x20, 0x30, 0x20, 0x33, 0x20, 0x39, 0x38, 0x20, 0x39, 0x37, 0x20, 0x31, 0x30, 0x31, 0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d,
    0x61, 0x70, 0x3a, 0x30, 0x20, 0x70, 0x63, 0x6d, 0x75, 0x2f, 0x38, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70,
    0x3a, 0x38, 0x20, 0x70, 0x63, 0x6d, 0x61, 0x2f, 0x38, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x33,
    0x20, 0x67, 0x73, 0x6d, 0x2f, 0x38, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x39, 0x38, 0x20, 0x69,
    0x4c, 0x42, 0x43, 0x2f, 0x38, 0x30, 0x30, 0x30,  0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x39, 0x37, 0x20, 0x73, 0x70,
    0x65, 0x65, 0x78, 0x2f, 0x38, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x31, 0x30, 0x31, 0x20, 0x74,
    0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x2d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2f, 0x38, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x66,
    0x6d, 0x74, 0x70, 0x3a, 0x31, 0x30, 0x31, 0x20, 0x30, 0x2d, 0x31, 0x35, 0x0d, 0x0a };
char pkt200[] = {
    0x41, 0x43, 0x4b, 0x20, 0x73, 0x69,
    0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34,
    0x3a, 0x35, 0x30, 0x36, 0x31, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f,
    0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3b, 0x62, 0x72, 0x61,
    0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x30, 0x66, 0x34, 0x39, 0x36, 0x65, 0x33, 0x62, 0x36, 0x65, 0x37, 0x62, 0x64,
    0x31, 0x34, 0x30, 0x65, 0x30, 0x62, 0x37, 0x30, 0x31, 0x30, 0x37, 0x31, 0x63, 0x31, 0x32, 0x34, 0x35, 0x61, 0x62, 0x0d, 0x0a, 0x56, 0x69, 0x61,
    0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31,
    0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x61,
    0x38, 0x32, 0x39, 0x62, 0x35, 0x34, 0x66, 0x31, 0x36, 0x37, 0x64, 0x32, 0x62, 0x62, 0x35, 0x62, 0x39, 0x36, 0x36, 0x36, 0x32, 0x62, 0x34, 0x65,
    0x66, 0x61, 0x30, 0x62, 0x62, 0x63, 0x36, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x32, 0x30, 0x30, 0x2e,
    0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x70, 0x68, 0x6f, 0x6e,
    0x65, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x47, 0x52, 0x35, 0x32, 0x52, 0x57, 0x47, 0x33, 0x34, 0x36, 0x2d, 0x33, 0x34, 0x0d, 0x0a, 0x54, 0x6f,
    0x3a, 0x20, 0x22, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22,
    0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63,
    0x6f, 0x6d, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x30, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x32, 0x39, 0x38, 0x38, 0x35, 0x32, 0x30, 0x34, 0x34, 0x0d,
    0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x31, 0x32, 0x30, 0x31, 0x33, 0x32, 0x32, 0x33, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35,
    0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x41, 0x43, 0x4b, 0x0d, 0x0a, 0x43, 0x6f,
    0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35,
    0x3a, 0x35, 0x30, 0x36, 0x30, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20,
    0x30, 0x0d, 0x0a, 0x0d, 0x0a };

    char pkt753[] = {
    0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
    0x45, 0x52, 0x20, 0x73, 0x69, 0x70, 0x3a, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e,
    0x30, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e,
    0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x3b, 0x62, 0x72, 0x61, 0x6e,
    0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x34, 0x45, 0x37, 0x36, 0x44, 0x41, 0x45, 0x37, 0x43, 0x35, 0x35, 0x38, 0x34, 0x42,
    0x32, 0x31, 0x42, 0x46, 0x38, 0x43, 0x35, 0x46, 0x36, 0x38, 0x37, 0x32, 0x39, 0x36, 0x43, 0x43, 0x41, 0x35, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d,
    0x3a, 0x20, 0x61, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f,
    0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x33, 0x38, 0x34, 0x38, 0x39, 0x30, 0x32,
    0x30, 0x32, 0x35, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x61, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72,
    0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x3e, 0x0d, 0x0a, 0x43, 0x6f, 0x6e,
    0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x22, 0x61, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61,
    0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x3a, 0x35, 0x30, 0x36, 0x31,
    0x3e, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x44, 0x33, 0x41, 0x32, 0x36, 0x46, 0x43, 0x33, 0x39, 0x37, 0x34, 0x42,
    0x34, 0x34, 0x45, 0x43, 0x42, 0x35, 0x41, 0x39, 0x36, 0x45, 0x30, 0x37, 0x32, 0x38, 0x32, 0x39, 0x30, 0x33, 0x45, 0x33, 0x40, 0x62, 0x65, 0x73,
    0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x33, 0x39, 0x32, 0x34, 0x31, 0x20, 0x52, 0x45, 0x47,
    0x49, 0x53, 0x54, 0x45, 0x52, 0x0d, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x3a, 0x20, 0x31, 0x38, 0x30, 0x30, 0x0d, 0x0a, 0x4d, 0x61,
    0x78, 0x2d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x37, 0x30, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65,
    0x6e, 0x74, 0x3a, 0x20, 0x58, 0x2d, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61,0x73, 0x65, 0x20, 0x31, 0x31, 0x30, 0x33, 0x6d,
    0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a };

    char pkt755[] = {
    0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e,
    0x30, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55,
    0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x72, 0x65, 0x63,
    0x65, 0x69, 0x76, 0x65, 0x64, 0x3d, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x3b, 0x72, 0x70, 0x6f, 0x72, 0x74,
    0x3d, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x34, 0x45, 0x37, 0x36,
    0x44, 0x41, 0x45, 0x37, 0x43, 0x35, 0x35, 0x38, 0x34, 0x42, 0x32, 0x31, 0x42, 0x46, 0x38, 0x43, 0x35, 0x46, 0x36, 0x38, 0x37, 0x32, 0x39, 0x36,
    0x43, 0x43, 0x41, 0x35, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x22, 0x61, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x22, 0x20, 0x3c, 0x73,
    0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x3e,
    0x3b, 0x74, 0x61, 0x67, 0x3d, 0x33, 0x38, 0x34, 0x38, 0x39, 0x30, 0x32, 0x30, 0x32, 0x35, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x22, 0x61, 0x6d,
    0x65, 0x72, 0x69, 0x63, 0x61, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65,
    0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x3e, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x44, 0x33, 0x41, 0x32,
    0x36, 0x46, 0x43, 0x33, 0x39, 0x37, 0x34, 0x42, 0x34, 0x34, 0x45, 0x43, 0x42, 0x35, 0x41, 0x39, 0x36, 0x45, 0x30, 0x37, 0x32, 0x38, 0x32, 0x39,
    0x30, 0x33, 0x45, 0x33, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x33,
    0x39, 0x32, 0x34, 0x31, 0x20, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20,
    0x22, 0x61, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x61, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f,
    0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3e, 0x0d, 0x0a, 0x65, 0x78, 0x70,
    0x69, 0x72, 0x65, 0x73, 0x3a, 0x20, 0x32, 0x30, 0x0d, 0x0a, 0x6d, 0x61, 0x78, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20,
    0x37, 0x30, 0x0d, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x58, 0x2d, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x72,
    0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x31, 0x31, 0x30, 0x33, 0x6d, 0x0d, 0x0a, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x3a, 0x20, 0x52, 0x45, 0x46,
    0x45, 0x52, 0x2c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x2c, 0x20, 0x42, 0x59, 0x45, 0x2c, 0x20, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x2c, 0x20, 0x49,
    0x4e, 0x56, 0x49, 0x54, 0x45, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30,
    0x0d, 0x0a, 0x0d, 0x0a };

    char pkt1287[] = {
    0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
    0x45, 0x52, 0x20, 0x73, 0x69, 0x70, 0x3a, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30,
    0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35,
    0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x35, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63,
    0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x33, 0x36, 0x30, 0x38, 0x36, 0x39, 0x30, 0x32, 0x37, 0x41, 0x45, 0x46, 0x34, 0x46, 0x42,
    0x38, 0x41, 0x44, 0x45, 0x35, 0x36, 0x45, 0x43, 0x37, 0x41, 0x37, 0x37, 0x35, 0x43, 0x41, 0x43, 0x44, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a,
    0x20, 0x49, 0x76, 0x61, 0x6e, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x49, 0x76, 0x61, 0x6e, 0x40, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e, 0x63, 0x6f,
    0x6d, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x31, 0x35, 0x31, 0x36, 0x36, 0x35, 0x39, 0x33, 0x37, 0x30, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x49,
    0x76, 0x61, 0x6e, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x49, 0x76, 0x61, 0x6e, 0x40, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x3e,
    0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x22, 0x49, 0x76, 0x61, 0x6e, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x49,
    0x76, 0x61, 0x6e, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x35, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3e, 0x0d, 0x0a,
    0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x34, 0x36, 0x45, 0x31, 0x43, 0x33, 0x43, 0x42, 0x33, 0x36, 0x33, 0x30, 0x34, 0x46, 0x38,
    0x34, 0x41, 0x30, 0x32, 0x30, 0x43, 0x46, 0x36, 0x44, 0x44, 0x33, 0x46, 0x39, 0x36, 0x34, 0x36, 0x31, 0x40, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e,
    0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x33, 0x37, 0x37, 0x36, 0x35, 0x20, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
    0x52, 0x0d, 0x0a, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x3a, 0x20, 0x31, 0x38, 0x30, 0x30, 0x0d, 0x0a, 0x4d, 0x61, 0x78, 0x2d, 0x46, 0x6f,
    0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x37, 0x30, 0x0d, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20,
    0x56, 0x65, 0x72, 0x73, 0x6f, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20,
    0x31, 0x31, 0x30, 0x34, 0x77, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30,
    0x0d, 0x0a, 0x0d, 0x0a };

    char pkt1288[] = {
    0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e,
    0x30, 0x20, 0x32, 0x30, 0x30, 0x20, 0x4f, 0x4b, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55,
    0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x35, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x72, 0x65, 0x63,
    0x65, 0x69, 0x76, 0x65, 0x64, 0x3d, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x35, 0x3b, 0x72, 0x70, 0x6f, 0x72, 0x74,
    0x3d, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x33, 0x36, 0x30, 0x38,
    0x36, 0x39, 0x30, 0x32, 0x37, 0x41, 0x45, 0x46, 0x34, 0x46, 0x42, 0x38, 0x41, 0x44, 0x45, 0x35, 0x36, 0x45, 0x43, 0x37, 0x41, 0x37, 0x37, 0x35,
    0x43, 0x41, 0x43, 0x44, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x22, 0x49, 0x76, 0x61, 0x6e, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a,
    0x49, 0x76, 0x61, 0x6e, 0x40, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x31, 0x35, 0x31, 0x36,
    0x36, 0x35, 0x39, 0x33, 0x37, 0x30, 0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x22, 0x49, 0x76, 0x61, 0x6e, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a,
    0x49, 0x76, 0x61, 0x6e, 0x40, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x3e, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44,
    0x3a, 0x20, 0x34, 0x36, 0x45, 0x31, 0x43, 0x33, 0x43, 0x42, 0x33, 0x36, 0x33, 0x30, 0x34, 0x46, 0x38, 0x34, 0x41, 0x30, 0x32, 0x30, 0x43, 0x46,
    0x36, 0x44, 0x44, 0x33, 0x46, 0x39, 0x36, 0x34, 0x36, 0x31, 0x40, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x0d, 0x0a, 0x43, 0x53,
    0x65, 0x71, 0x3a, 0x20, 0x33, 0x37, 0x37, 0x36, 0x35, 0x20, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74,
    0x61, 0x63, 0x74, 0x3a, 0x20, 0x22, 0x49, 0x76,  0x61, 0x6e, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x49, 0x76, 0x61, 0x6e, 0x40, 0x32, 0x30,
    0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x35, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3e, 0x0d, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
    0x73, 0x3a, 0x20, 0x32, 0x30, 0x0d, 0x0a, 0x6d, 0x61, 0x78, 0x2d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x3a, 0x20, 0x37, 0x30, 0x0d,
    0x0a, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x56, 0x65, 0x72, 0x73, 0x6f, 0x20, 0x53, 0x6f, 0x66, 0x74, 0x70,
    0x68, 0x6f, 0x6e, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x31, 0x31, 0x30, 0x34, 0x77, 0x0d, 0x0a, 0x41, 0x6c, 0x6c, 0x6f,
    0x77, 0x3a, 0x20, 0x52, 0x45, 0x46, 0x45, 0x52, 0x2c, 0x20, 0x49, 0x4e, 0x46, 0x4f, 0x2c, 0x20, 0x42, 0x59, 0x45, 0x2c, 0x20, 0x43, 0x41, 0x4e,
    0x43, 0x45, 0x4c, 0x2c, 0x20, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e,
    0x67, 0x74, 0x68, 0x3a, 0x20, 0x30, 0x0d, 0x0a, 0x0d, 0x0a };

    char pkt1311[] = {
    0x49, 0x4e, 0x56, 0x49, 0x54, 0x45,
    0x20, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
    0x6d, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x30, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49,
    0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3b, 0x62,
    0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x39, 0x61, 0x38, 0x36, 0x30, 0x34, 0x33, 0x61, 0x35, 0x64, 0x61,
    0x66, 0x35, 0x39, 0x66, 0x34, 0x65, 0x39, 0x61, 0x66, 0x64, 0x38, 0x33, 0x65, 0x66, 0x66, 0x39, 0x66, 0x63, 0x36, 0x65, 0x38, 0x0d, 0x0a, 0x56,
    0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37,
    0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62,
    0x4b, 0x66, 0x33, 0x61, 0x62, 0x61, 0x64, 0x31, 0x61, 0x64, 0x38, 0x36, 0x63, 0x38, 0x36, 0x66, 0x63, 0x39, 0x66, 0x33, 0x66, 0x61, 0x65, 0x37,
    0x66, 0x34, 0x39, 0x35, 0x34, 0x38, 0x35, 0x36, 0x34, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x22, 0x49, 0x76, 0x61, 0x6e, 0x20, 0x41,
    0x6c, 0x69, 0x7a, 0x61, 0x64, 0x65, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x35, 0x35, 0x31, 0x34, 0x35, 0x34, 0x30, 0x30, 0x30, 0x32, 0x40,
    0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d,
    0x70, 0x68, 0x6f, 0x6e, 0x65, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x47, 0x52, 0x35, 0x32, 0x52, 0x57, 0x47, 0x33, 0x34, 0x36, 0x2d, 0x33, 0x34,
    0x0d, 0x0a, 0x54, 0x6f, 0x3a, 0x20, 0x22, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e,
    0x63, 0x6f, 0x6d, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74,
    0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x30, 0x3e, 0x0d, 0x0a, 0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20,
    0x31, 0x32, 0x30, 0x31, 0x35, 0x36, 0x32, 0x34, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x0d, 0x0a, 0x43,
    0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20,
    0x3c, 0x73, 0x69, 0x70, 0x3a, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x30, 0x36, 0x30, 0x3e, 0x0d,
    0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
    0x6f, 0x6e, 0x2f, 0x73, 0x64, 0x70, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20,
    0x20, 0x20, 0x32, 0x30, 0x35, 0x0d, 0x0a, 0x0d, 0x0a, 0x76, 0x3d, 0x30, 0x0d, 0x0a, 0x6f, 0x3d, 0x43, 0x6c, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20,
    0x31, 0x32, 0x31, 0x30, 0x38, 0x32, 0x20, 0x31, 0x32, 0x31, 0x30, 0x38, 0x33, 0x20, 0x49, 0x4e, 0x20, 0x49, 0x50, 0x34, 0x20, 0x32, 0x30, 0x30,
    0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x36, 0x0d, 0x0a, 0x73, 0x3d, 0x43, 0x6c, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x43, 0x35, 0x43,
    0x4d, 0x0d, 0x0a, 0x63, 0x3d, 0x49, 0x4e, 0x20, 0x49, 0x50, 0x34, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x36,
    0x0d, 0x0a, 0x74, 0x3d, 0x30, 0x20, 0x30, 0x0d, 0x0a, 0x6d, 0x3d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x20, 0x34, 0x30, 0x33, 0x36, 0x30, 0x20, 0x52,
    0x54, 0x50, 0x2f, 0x41, 0x56, 0x50, 0x20, 0x38, 0x20, 0x31, 0x38, 0x20, 0x34, 0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a,
    0x38, 0x20, 0x50, 0x43, 0x4d, 0x41, 0x2f, 0x38, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x31, 0x38,
    0x20, 0x47, 0x37, 0x32, 0x39, 0x2f, 0x38, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x72, 0x74, 0x70, 0x6d, 0x61, 0x70, 0x3a, 0x34, 0x20, 0x47,
    0x37, 0x32, 0x33, 0x2f, 0x38, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x61, 0x3d, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x63, 0x76, 0x0d, 0x0a };

    char pkt1312[] = {
    0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e,
    0x30, 0x20, 0x31, 0x30, 0x30, 0x20, 0x54, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32,
    0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3b, 0x62, 0x72, 0x61, 0x6e,
    0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x39, 0x61, 0x38, 0x36, 0x30, 0x34, 0x33, 0x61, 0x35, 0x64, 0x61, 0x66, 0x35, 0x39,
    0x66, 0x34, 0x65, 0x39, 0x61, 0x66, 0x64, 0x38, 0x33, 0x65, 0x66, 0x66, 0x39, 0x66, 0x63, 0x36, 0x65, 0x38, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a,
    0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39,
    0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x66, 0x33,
    0x61, 0x62, 0x61, 0x64, 0x31, 0x61, 0x64, 0x38, 0x36, 0x63, 0x38, 0x36, 0x66, 0x63, 0x39, 0x66, 0x33, 0x66, 0x61, 0x65, 0x37, 0x66, 0x34, 0x39,
    0x35, 0x34, 0x38, 0x35, 0x36, 0x34, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x22, 0x49, 0x76, 0x61, 0x6e, 0x20, 0x41, 0x6c, 0x69, 0x7a,
    0x61, 0x64, 0x65, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x35, 0x35, 0x31, 0x34, 0x35, 0x34, 0x30, 0x30, 0x30, 0x32, 0x40, 0x32, 0x30, 0x30,
    0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x70, 0x68, 0x6f,
    0x6e, 0x65, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x47, 0x52, 0x35, 0x32, 0x52, 0x57, 0x47, 0x33, 0x34, 0x36, 0x2d, 0x33, 0x34, 0x0d, 0x0a, 0x54,
    0x6f, 0x3a, 0x20, 0x22, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f, 0x6d,
    0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e,
    0x63, 0x6f, 0x6d, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x30, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x34, 0x30, 0x39, 0x38, 0x32, 0x30, 0x39, 0x36, 0x37,
    0x39, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73,
    0x63, 0x6f, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3e, 0x0d, 0x0a, 0x43,
    0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x31, 0x32, 0x30, 0x31, 0x35, 0x36, 0x32, 0x34, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e,
    0x37, 0x2e, 0x31, 0x39, 0x35, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x0d, 0x0a, 0x53,
    0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x58, 0x2d, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x31, 0x31,
    0x30, 0x33, 0x6d, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30, 0x0d, 0x0a,
    0x0d, 0x0a };
    char pkt1314[] = {
    0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e,
    0x30, 0x20, 0x31, 0x38, 0x30, 0x20, 0x52, 0x69, 0x6e, 0x67, 0x69, 0x6e, 0x67, 0x0d, 0x0a, 0x56, 0x69, 0x61, 0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f,
    0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3b, 0x62, 0x72, 0x61,
    0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x39, 0x61, 0x38, 0x36, 0x30, 0x34, 0x33, 0x61, 0x35, 0x64, 0x61, 0x66, 0x35,
    0x39, 0x66, 0x34, 0x65, 0x39, 0x61, 0x66, 0x64, 0x38, 0x33, 0x65, 0x66, 0x66, 0x39, 0x66, 0x63, 0x36, 0x65, 0x38, 0x0d, 0x0a, 0x56, 0x69, 0x61,
    0x3a, 0x20, 0x53, 0x49, 0x50, 0x2f, 0x32, 0x2e, 0x30, 0x2f, 0x55, 0x44, 0x50, 0x20, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31,
    0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x3d, 0x7a, 0x39, 0x68, 0x47, 0x34, 0x62, 0x4b, 0x66,
    0x33, 0x61, 0x62, 0x61, 0x64, 0x31, 0x61, 0x64, 0x38, 0x36, 0x63, 0x38, 0x36, 0x66, 0x63, 0x39, 0x66, 0x33, 0x66, 0x61, 0x65, 0x37, 0x66, 0x34,
    0x39, 0x35, 0x34, 0x38, 0x35, 0x36, 0x34, 0x0d, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x3a, 0x20, 0x22, 0x49, 0x76, 0x61, 0x6e, 0x20, 0x41, 0x6c, 0x69,
    0x7a, 0x61, 0x64, 0x65, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x35, 0x35, 0x31, 0x34, 0x35, 0x34, 0x30, 0x30, 0x30, 0x32, 0x40, 0x32, 0x30,
    0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x31, 0x3b, 0x75, 0x73, 0x65, 0x72, 0x3d, 0x70, 0x68,
    0x6f, 0x6e, 0x65, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x47, 0x52, 0x35, 0x32, 0x52, 0x57, 0x47, 0x33, 0x34, 0x36, 0x2d, 0x33, 0x34, 0x0d, 0x0a,
    0x54, 0x6f, 0x3a, 0x20, 0x22, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c, 0x2e, 0x63, 0x6f,
    0x6d, 0x22, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69, 0x73, 0x63, 0x6f, 0x40, 0x62, 0x65, 0x73, 0x74, 0x65, 0x6c,
    0x2e, 0x63, 0x6f, 0x6d, 0x3a, 0x35, 0x35, 0x30, 0x36, 0x30, 0x3e, 0x3b, 0x74, 0x61, 0x67, 0x3d, 0x34, 0x30, 0x39, 0x38, 0x32, 0x30, 0x39, 0x36,
    0x37, 0x39, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x3a, 0x20, 0x3c, 0x73, 0x69, 0x70, 0x3a, 0x66, 0x72, 0x61, 0x6e, 0x63, 0x69,
    0x73, 0x63, 0x6f, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37, 0x2e, 0x37, 0x2e, 0x32, 0x30, 0x34, 0x3a, 0x35, 0x30, 0x36, 0x31, 0x3e, 0x0d, 0x0a,
    0x43, 0x61, 0x6c, 0x6c, 0x2d, 0x49, 0x44, 0x3a, 0x20, 0x31, 0x32, 0x30, 0x31, 0x35, 0x36, 0x32, 0x34, 0x40, 0x32, 0x30, 0x30, 0x2e, 0x35, 0x37,
    0x2e, 0x37, 0x2e, 0x31, 0x39, 0x35, 0x0d, 0x0a, 0x43, 0x53, 0x65, 0x71, 0x3a, 0x20, 0x31, 0x20, 0x49, 0x4e, 0x56, 0x49, 0x54, 0x45, 0x0d, 0x0a,
    0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x20, 0x58, 0x2d, 0x4c, 0x69, 0x74, 0x65, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x31,
    0x31, 0x30, 0x33, 0x6d, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x3a, 0x20, 0x30, 0x0d,
    0x0a, 0x0d, 0x0a };


    switch (whichMessage)
    {
      case 1: mesg = "REGISTER sip:192.168.1.102 SIP/2.0\r\nVia: SIP/2.0/UDP 192.168.1.60;branch=z9hG4bKf0fe931c64b4bac1\r\nFrom: <sip:010@192.168.1.102>;tag=3ef305a067e48171\r\nTo: <sip:010@192.168.1.102>\r\nContact: <sip:010@192.168.1.60>\r\nCall-ID: b85d47e42c35b245@192.168.1.60\r\nCSeq: 100 REGISTER\r\nExpires: 3600\r\nUser-Agent: Grandstream BT100 1.0.6.7\r\nMax-Forwards: 70\r\nAllow: INVITE,ACK,CANCEL,BYE,NOTIFY,REFER,OPTIONS,INFO,SUBSCRIBE\r\nContent-Length: 0\r\n\r\n";
      break;
      case 2: mesg = "SIP/2.0 401 Unauthorized\r\nVia: SIP/2.0/UDP 192.168.1.60;branch=z9hG4bKf0fe931c64b4bac1\r\nFrom: <sip:010@192.168.1.102>;tag=3ef305a067e48171\r\nTo: <sip:010@192.168.1.102>\r\nCall-ID: b85d47e42c35b245@192.168.1.60\r\nCSeq: 100 REGISTER\r\nWWW-Authenticate: Digest realm=\"wellx.org\", nonce=\"b2eb8dfe1d02734d1fad6d84bba3ab0a\", opaque=\"f2e09354066e480d12ef5844e48649a3\"\r\nserver: partysip/0.5.5\r\nContent-Length: 0\r\n\r\n";
             break;
      case 3: mesg = "REGISTER sip:192.168.1.102 SIP/2.0\r\nVia: SIP/2.0/UDP 192.168.1.60;branch=z9hG4bK73bd2f92d8843d19\r\nFrom: <sip:010@192.168.1.102>;tag=3ef305a067e48171\r\nTo: <sip:010@192.168.1.102>\r\nContact: <sip:010@192.168.1.60>\r\nAuthorization: Digest username=\"line3\", realm=\"wellx.org\", algorithm=MD5, uri=\"sip:192.168.1.102\", opaque=\"f2e09354066e480d12ef5844e48649a3\", nonce=\"b2eb8dfe1d02734d1fad6d84bba3ab0a\", response=\"735262e3b726927885402a5ac6dc9096\"\r\nCall-ID: b85d47e42c35b245@192.168.1.60\r\nCSeq: 101 REGISTER\r\nExpires: 3600\r\nUser-Agent: Grandstream BT100 1.0.6.7\r\nMax-Forwards: 70\r\nAllow: INVITE,ACK,CANCEL,BYE,NOTIFY,REFER,OPTIONS,INFO,SUBSCRIBE\r\nContent-Length: 0\r\n\r\n";
             break;
     case 4: mesg = "SIP/2.0 200 OK\r\nVia: SIP/2.0/UDP 192.168.1.60;branch=z9hG4bK73bd2f92d8843d19\r\nFrom: <sip:010@192.168.1.102>;tag=3ef305a067e48171\r\nTo: <sip:010@192.168.1.102>;tag=2210719419\r\nCall-ID: b85d47e42c35b245@192.168.1.60\r\nCSeq: 101 REGISTER\r\nContact: <sip:010@192.168.1.60>;expires=3600\r\nserver: partysip/0.5.5\r\nContent-Length: 0\r\n\r\n";
             break;
     case 5: mesg = "INVITE sip:user@example.com SIP/2.0\r\nTo: sip:j.user@example.com\r\nFrom: sip:caller@example.net;tag=134161461246\r\nMax-Forwards: 7\r\nCall-ID: badinv01.0ha0isndaksdjasdf3234nas\r\nCSeq: 8 INVITE\r\nVia: SIP/2.0/UDP 192.0.2.15;;,;,,\r\nContact: \"Joe\" <sip:joe@example.org>;;;;\r\nContent-Length: 152\r\nContent-Type: application/sdp\r\nv=0\r\no=mhandley 29739 7272939 IN IP4 192.0.2.15\r\ns=-\r\nc=IN IP4 192.0.2.15\r\nt=0 0\r\nm=audio 49217 RTP/AVP 0 12\r\nm=video 3227 RTP/AVP 31\r\na=rtpmap:31 LPC\r\n\r\n";
             break;
     case 6: mesg.assign(pkt1);
             break;
     case 7: mesg.assign(pkt2);
             break;
     case 8: mesg.assign(pkt3);
             break;
     case 9: mesg.assign(pkt44);
             break;
     case 10: mesg.assign(pkt45);
             break;
     case 11: mesg.assign(pkt195);
             break;
     case 12: mesg.assign(pkt200);
             break;
     case 13: mesg.assign(pkt753);
             break;
     case 14: mesg.assign(pkt755);
                  break;
     case 15: mesg.assign(pkt1287);
                  break;
     case 16: mesg.assign(pkt1288);
                  break;
     case 17: mesg.assign(pkt1311);
                  break;
     case 18: mesg.assign(pkt1312);
                  break;
     case 19: mesg.assign(pkt1314);
                  break;

    }
    if (!mesg.empty())
    {
      printf("%s\n", mesg.c_str());
      SUB_H248_BaseNotify* message = new SUB_H248_BaseNotify(mesg);
      m_app->getSipParserQueue()->enqueueNotification(message);
    }
    //m_app->displayQueueInfo();
    printf("\n");
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
      consumed++;
    }
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed+1] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_SendMessagesSip::help(char *argv[])
{
  if ((argv[0] == 0) || ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0)))
  {
    printf("Call: send hcommands param\n");
    printf("");


  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}


#include <sstream>
H248_CLI_Stimuli_SendMegacoTestMessages::H248_CLI_Stimuli_SendMegacoTestMessages(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database,
                            class SmallMgc* app): H248_CLI_Stimuli(command, parent, database), m_app(app)
{
}

H248_CLI_Stimuli_SendMegacoTestMessages::~H248_CLI_Stimuli_SendMegacoTestMessages()
{

}
void H248_CLI_Stimuli_SendMegacoTestMessages::doAction(char *argv[])
{

  if ((m_command.find (argv[0]) != std::string::npos) )
  {
    std::string param1(argv[1]);
    if (param1.find("set") != std::string::npos)
    {
      std::string param2("gatewayIP");
      std::string param2a("terminationId");
      std::string param2b("contextId");

      if (param2.find(argv[2]) != std::string::npos)
      {
         m_ipAddress = argv[3];
      }
      else if (param2a.find(argv[2]) != std::string::npos)
      {
        m_terminationId = argv[3];
      }
      else if (param2b.find(argv[2]) != std::string::npos)
      {
         m_contextId = argv[3];
      }
    }
    else if (param1.find("clear") != std::string::npos)
    {
      m_ipAddress.clear();
      m_terminationId.clear();
      m_contextId.clear();
    }
    else if (param1.find("part1") != std::string::npos)
    {
      int whichMessage = atoi(argv[2]);
      m_app->sendTo(m_ipAddress, m_database->getDatabase()->getTestMessages()[whichMessage]->part1);
    }
    else if (param1.find("file") != std::string::npos)
    {
       std::string fileName = m_database->getDatabase()->getTestMessagesFileName();
       Poco::FileStream fos(fileName);
       if (fos.good())
       {
         fos.seekg(0, std::ios::beg);
         std::string message;
         std::string part;
         getline(fos, part);
         while(fos)
         {
           message += part;
           message += "\n";
           getline(fos,part);
         }
         // fos >> message;
         printf("Message: %s", message.c_str());
         if (!m_ipAddress.empty())
           m_app->sendTo(m_ipAddress, message);
       }
       else
       {
         printf("file doesn't exist");
       }
    }
    else if (param1.find("request") != std::string::npos)
    {


      int whichMessage = atoi(argv[2]);

      switch(whichMessage)
      {
        case 1:
          {
            std::stringstream ss1;
            ss1 << "!/1 [" << m_database->getDatabase()->getMgcH248IpAddress() << "]:2944 T="
            << m_database->getDatabase()->getNextTransactionId() << "{C="
            << m_contextId << m_database->getDatabase()->getTestMessages()[1]->part1
            <<"=" << m_terminationId << m_database->getDatabase()->getTestMessages()[1]->part2
            <<"}";
          }
          break;
        case 2:
          break;
        case 3:
          break;
      }
      if (whichMessage == 4)
      {
        Poco::UInt16 index = whichMessage;
        Poco::UInt32 transactionId = 88888;
        std::stringstream ss;
         ss << "!/1 [" << m_database->getDatabase()->getMgcH248IpAddress() << "]:2944 T=" << transactionId << "{"
           << "C=${"
           << "A=${"
           << "M{O{MO=SR,RG=ON,RV=ON},L{v=0\r\nc=IN IP4 $\r\nm=audio $ RTP/AVP $\r\na=ptime:$\r\na=rtcp-xr:voip-metrics\r\n\rm=image $ udptl t38\r\n},R{v=0\r\no=sip11u14 3611353538 3611353538 IN IP4 172.31.63.157\r\ns=nortelnetworks\r\ne=phxV2_sip11u14@co11.com\r\nc=IN IP4 172.31.63.157\r\nt=0 0\r\nm=audio 52132 RTP/AVP 18 8 0 110 111\r\nc=IN IP4 172.31.63.157\r\na=rtpmap:18 G729/8000\r\na=rtpmap:8 PCMA/8000\r\na=rtpmap:0 PCMU/8000\r\na=rtpmap:110 telephone-event/8000\r\na=rtpmap:111 X-nt-inforeq/8000\r\nm=video 0 RTP/AVP 34 97\r\nc=IN IP4 172.31.63.157\r\na=TIAS:10240\r\n"
           << "a=rtpmap:34 H263/90000\r\na=fmtp:34 QCIF=15;CIF=15;SQCIF=15;F\r\na=rtpmap:97 X-NNVC/500\r\na=fmtp:97 p=03af\r\na=maxprate:6.00\r\na=framerate:2.0\r\n}},E=4874{nt/netfail}}}}\n";
       std::string message(ss.str());
         m_app->sendTo(m_ipAddress, message);
      }
      if (whichMessage == 5)
      {
        if (m_ipAddress.empty())
          m_ipAddress = "172.31.63.164";
        Poco::UInt16 index = whichMessage;
        Poco::UInt32 transactionId = 23000;
        Poco::UInt32 eventId = 33000;
        std::string message = H248STACK_AMessageBuilder::buildModifyTdmEvents(transactionId, "-", "p/1", eventId);
        std::string message1 = H248STACK_AMessageBuilder::buildModifyTdmEvents(transactionId+1, "-", "p/2", eventId+1);
        std::string message2 = H248STACK_AMessageBuilder::buildModifyTdmEvents(transactionId+2, "-", "p/3", eventId+2);
        std::string message3 = H248STACK_AMessageBuilder::buildModifyTdmEvents(transactionId+3, "-", "p/4", eventId+3);
        std::string message4 = H248STACK_AMessageBuilder::buildModifyTdmEvents(transactionId+4, "-", "p/5", eventId+4);
        std::string message5 = H248STACK_AMessageBuilder::buildModifyTdmEvents(transactionId+5, "-", "p/6", eventId+5);
        std::string message6 = H248STACK_AMessageBuilder::buildModifyTdmEvents(transactionId+6, "-", "p/7", eventId+6);
        std::string message7 = H248STACK_AMessageBuilder::buildModifyTdmEvents(transactionId+7, "-", "p/8", eventId+7);
        std::string message8 = H248STACK_AMessageBuilder::buildModifyTdmEvents(transactionId+8, "-", "p/9", eventId+8);

        m_app->sendTo(m_ipAddress, message);
        m_app->sendTo(m_ipAddress, message1);
        m_app->sendTo(m_ipAddress, message2);
        m_app->sendTo(m_ipAddress, message3);
        m_app->sendTo(m_ipAddress, message4);
        m_app->sendTo(m_ipAddress, message5);
        m_app->sendTo(m_ipAddress, message6);
        m_app->sendTo(m_ipAddress, message7);
        m_app->sendTo(m_ipAddress, message8);
      }
    }
    else
    {
      printf("Wrong parameters");
    }


    printf("\n");
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
      consumed++;
    }
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed+1] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_SendMegacoTestMessages::help(char *argv[])
{
  if ((argv[0] == 0) || ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0)))
  {
    printf("Call: send megaco gatewayIP terminationId contextId messageId\n");
    printf("Call: send megaco set gatewayIP ipAddress\n");
    printf("Call: send megaco set terminationId terminationId\n");
    printf("Call: send megaco set contextId contextId\n");
    printf("Call: send megaco request messageId\n");
    printf("Call: send megaco clear\n");
    printf("Call: send megaco part1 messageId\n");
    printf("Call: send megaco file\n");
  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}

H248_CLI_Stimuli_SendMessagesSdp::H248_CLI_Stimuli_SendMessagesSdp(std::string command, class H248_CLI_Stimuli* parent, SUB_H248_Database* database,
                            class SmallMgc* app): H248_CLI_Stimuli(command, parent, database), m_app(app)
{
}

H248_CLI_Stimuli_SendMessagesSdp::~H248_CLI_Stimuli_SendMessagesSdp()
{

}
void H248_CLI_Stimuli_SendMessagesSdp::doAction(char *argv[])
{

  if ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0))
  {
    printf("   Send Message Sdp to Parser\n");
    printf("---------------------------------\n");
    int whichMessage = atoi(argv[1]);
    std::string mesg;


    switch (whichMessage)
    {
      case 1: mesg = "v=0\r\no=mhandley 2890844526 2890842807 IN IP4 126.16.64.4\r\ns=SDP Seminar\r\ni=A Seminar on the session description protocol\r\nu=http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps\r\ne=mjh@isi.edu (Mark Handley)\r\nc=IN IP4 224.2.17.12/127\r\nt=2873397496 2873404696\r\na=recvonly\r\nm=audio 49170 RTP/AVP 0 1 2 3\r\nm=video 51372 RTP/AVP 31\r\nm=application 32416 udp wb\r\na=orient:portraitbreak\r\n";
      break;
      case 2: mesg = "v=0\r\no=foobar 2890844521 2890842804 IN IP4 10.2.1.100\r\ns=peer-to-peer example\r\nt=0 0\r\nm=audio 5000 TCP/RTP/AVP 3\r\nc=IN IP4 10.2.1.100\r\na=rtpmap:3 GSM/8000\r\na=silc:direct\r\na=setup:active\r\n";
      break;
      case 3: mesg = "v=0\r\no=foobar 2890844521 2890842804 IN IP4 10.2.1.32\r\ns=Group conferencing example\r\nc=IN IP4 10.2.1.7\r\nt=0 0\r\na=silc:group channel=foobar\r\nm=audio 706 TCP/RTP/AVP 3\r\na=rtpmap:3 GSM/8000\r\n";
      break;
     case 4: mesg = "v=0\r\no=alice 2890844526 2890844526 IN IP4 host.atlanta.example.com\r\ns= \r\nc=IN IP4 host.atlanta.example.com\r\nt=0 0\r\nm=audio 49170 RTP/AVP 0 8 97\r\na=rtpmap:0 PCMU/8000\r\na=rtpmap:8 PCMA/8000\r\na=rtpmap:97 iLBC/8000\r\nm=video 51372 RTP/AVP 31 32\r\na=rtpmap:31 H261/90000\r\na=rtpmap:32 MPV/90000\r\n";
      break;
     case 5: mesg = "v=0\r\no=bob 2808844564 2808844564 IN IP4 host.biloxi.example.com\r\ns= \r\nc=IN IP4 host.biloxi.example.com\r\nt=0 0\r\nm=audio 49174 RTP/AVP 0\r\na=rtpmap:0 PCMU/8000\r\nm=video 49170 RTP/AVP 32\r\na=rtpmap:32 MPV/90000\r\n";
     break;
     case 6:
             break;
     case 7:
             break;
     case 8:
             break;
     case 9:
             break;
     case 10:
             break;
     case 11:
             break;
     case 12:
             break;


    }
    if (!mesg.empty())
    {
      printf("%s\n", mesg.c_str());
      SUB_H248_BaseNotify* message = new SUB_H248_BaseNotify(mesg);
      m_app->getSub_sdp_parser()->parser(mesg);
    }
    //m_app->displayQueueInfo();
    printf("\n");
  }
  else
  {
    int consumed = 0;
    if((m_command.find (argv[0]) != std::string::npos))
    {
      consumed++;
    }
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[consumed+1] != 0)
        (*iterChildList)->doAction(&argv[consumed]);
    }
  }

}

void H248_CLI_Stimuli_SendMessagesSdp::help(char *argv[])
{
  if ((argv[0] == 0) || ((m_command.find (argv[0]) != std::string::npos) && (argv[2] == 0)))
  {
    printf("Call: send sdp param\n");
    printf("");


  }
  else
  {
    std::list<class H248_CLI_Stimuli*>::iterator iterChildList;
    for (iterChildList = m_childs.begin();
        iterChildList != m_childs.end();
        iterChildList++)
    {
      if (argv[1] != 0)
        (*iterChildList)->help(&argv[1]);
    }
  }
}

