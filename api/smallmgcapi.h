/******************************************************************************
 * SmallMGC
 *
 * Copyright (C) 2009 Thomas Miesch
 *
 * Authors: Thomas Miesch <thomas.miesch@smallmgc.org>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 *
 * created:
 * filename:
 * purpose:
 *
 ******************************************************************************/


#ifndef SMALLMGCAPI_H_
#define SMALLMGCAPI_H_

//#include <sys/socket.h>
#include <sys/un.h>


enum SmallMGC_Api_Commands
{
  SmallMGC_API_COMMAND_CONFIG_SMALLMGC_IP = 1 ,
  SmallMGC_API_COMMAND_CONFIG_SMALLMGC_GENERAL,
  SmallMGC_API_COMMAND_CONFIG_SMALLMGC_DIGITMAP,
  SmallMGC_API_COMMAND_CONFIG_SMALLMGC_SA,
  SmallMGC_API_COMMAND_CONFIG_GATEWAY_IP = 10,
  SmallMGC_API_COMMAND_CONFIG_GATEWAY_GENERAL,
  SmallMGC_API_COMMAND_CONFIG_ADD_GATEWAY,
  SmallMGC_API_COMMAND_CONFIG_REMOVE_GATEWAY,
  SmallMGC_API_COMMAND_CONFIG_BLOCK_GATEWAY,
  SmallMGC_API_COMMAND_CONFIG_SUBSCRIBER_GENERAL = 20,
  SmallMGC_API_COMMAND_CONFIG_ADD_SUBSCRIBER,
  SmallMGC_API_COMMAND_CONFIG_REMOVE_SUBSCRIBER,
  SmallMGC_API_COMMAND_STATUS_SMALLMGC = 101,
  SmallMGC_API_COMMAND_STATUS_GATEWAY = 110,
  SmallMGC_API_COMMAND_STATUS_SUBSCRIBER = 120,
  SmallMGC_API_COMMAND_STATUS_SUBSCRIBER_INSERVICE,
  SmallMGC_API_COMMAND_STATUS_SUBSCRIBER_OUTSERVICE_FORCED,
  SmallMGC_API_COMMAND_STATUS_SUBSCRIBER_OUTSERVICE,
  SmallMGC_API_AlARM_SMALLMGC = 201,
  SmallMGC_API_AlARM_GATEWAY = 210,
  SmallMGC_API_AlARM_SUBSCRIBER =  220,
  SmallMGC_API_TEST_START = 300,
  SmallMGC_API_TEST_STOP,
  SmallMGC_API_TEST_RESULT,

  SmallMGC_API_SEND_RAW  = 310,
  SmallMGC_API_RECEIVED_NOTIFY = 350,
  SmallMGC_API_RECEIVED_MODIFY,
  SmallMGC_API_RECEIVED_ADD,
  SmallMGC_API_RECEIVED_SUBTRACT,
  SmallMGC_API_RECEIVED_MOVE,
  SmallMGC_API_RECEIVED_AUDITVALUE,
  SmallMGC_API_RECEIVED_SERVICECHANGE,
  SmallMGC_API_RECEIVED_PENDING,
  SmallMGC_API_RECEIVED_ERROR,
};

enum SmallMGC_Api_SubscriberAlarms
{
  SmallMGC_SUBSCRIBER_ALARM_BLOCKED,
  SmallMGC_SUBSCRIBER_ALARM_UNDEFINED,

};

enum SmallMGC_Api_GatewayAlarms
{
  SmallMGC_GATEWAY_ALARM_H248Association,
  SmallMGC_GATEWAY_ALARM_IUAAssociation,
  SmallMGC_GATEWAY_ALARM_UNDEFINED,
};

enum SmallMGC_Api_SubscriberTypes
{
  SmallMGC_SUBSCRIBER_PSTN,
  SmallMGC_SUBSCRIBER_ISDNBA,
  SmallMGC_SUBSCRIBER_ISDNPRA,
  SmallMGC_SUBSCRIBER_SIP,
  SmallMGC_SUBSCRIBER_UNDEFINED,
};

enum SmallMGC_Api_GatewayH248State
{
  SmallMGC_GATEWAY_STATUS_REGISTERED,
  SmallMGC_GATEWAY_STATUS_UP,
  SmallMGC_GATEWAY_STATUS_DOWN,
  SmallMGC_GATEWAY_STATUS_LOST,
  SmallMGC_GATEWAY_STATUS_UNDEFINED,
};

enum SmallMGC_Api_GatewayIUAState
{
  SmallMGC_GATEWAY_STATUS_IUA_REGISTERED,
  SmallMGC_GATEWAY_STATUS_IUA_UP,
  SmallMGC_GATEWAY_STATUS_IUA_DOWN,
  SmallMGC_GATEWAY_STATUS_IUA_LOST,
  SmallMGC_GATEWAY_STATUS_IUA_UNDEFINED,
};

enum SmallMGC_Api_SubscriberH248State
{
  SmallMGC_SUBSCRIBER_STATUS_REGISTERED,
  SmallMGC_SUBSCRIBER_STATUS_UP,
  SmallMGC_SUBSCRIBER_STATUS_DOWN,
  SmallMGC_SUBSCRIBER_STATUS_SHUTTINGDOWN,
  SmallMGC_SUBSCRIBER_STATUS_UNDEFINED,
};

struct SmallMGC_Api_TestReceivedMessage
{
  SmallMGC_Api_Commands command;
  int transactionId;
  int contextId;
  int eventId;
  char termId[32];
  char event[128];
  char localSdp[512];
  char remoteSdp[512];
};

struct SmallMGC_Api_ConfigIp
{
  char m_name[32];
  char m_h248IpAddress[32];
  char m_h248IpPort[32];
  char m_h248IpDomainName[64];
  char m_sigtranIpAddress[32];
  char m_sigtranIpPort[32];
  char m_sigtranIpDomainName[64];
  char m_sipIpAddress[32];
  char m_sipIpPort[32];
  char m_sipIpDomainName[64];
};

struct SmallMGC_Api_ConfigGeneral
{
  int  m_retransmissions;
  int  m_modifybundles;
  int  m_bundlestimeout;
  int  m_busyToneDuration;
  int  m_congestionToneDuration;
  int  m_howlerToneDuration;
};

struct SmallMGC_Api_ConfigDigitmap
{
  char m_digitmap[512];
};

struct SmallMGC_Api_ConfigSA
{
  int  m_sa_enabled;
  int  m_sa_timeout;
  char m_sa_mainMgcIpAddress[32];
  char m_sa_mainMgcIpPort[32];
  char m_sa_mainMgcIpDomain[64];
};

struct SmallMGC_Api_Config
{
  SmallMGC_Api_ConfigIp       m_configIp;
  SmallMGC_Api_ConfigGeneral  m_configGeneral;
  SmallMGC_Api_ConfigDigitmap m_configDigitmap;
  SmallMGC_Api_ConfigSA       m_configSA;
};

struct SmallMGC_Api_GatewayGeneral
{
  int m_gatewayCallControlMode;
  int m_gatewayItPackageTimeout;
  int m_gatewayItPackageEnabled;

};


struct SmallMGC_Api_Gateway
{
  SmallMGC_Api_ConfigIp m_gatewayIp;
  SmallMGC_Api_GatewayGeneral m_gatewayGeneral;

};

struct SmallMGC_Api_GatewayStatus
{
  char m_gatewayIpAddress[32];
  SmallMGC_Api_GatewayH248State m_h248State;
  SmallMGC_Api_GatewayIUAState  m_iuaState;
  int m_callsTotal;
  int m_callOngoing;

};

struct SmallMGC_Api_Status
{
  int m_callsTotal;
  int m_callOngoing;

};

struct SmallMGC_Api_Subscriber
{
  char m_gatewayIpAddress[32];
  char m_subscriberName[32];
  SmallMGC_Api_SubscriberTypes m_subscriberType;
  char m_subscriberTermination[2][32];  // for PRA this is not enough but at the moment pRA is not supported
  char m_subscriberNumber[32];
  char m_subscriberNumberRangeStart[32]; //for ISDN if several numbers are assigned
  char m_subscriberNumberRangeEnd[32];
  char m_subscriberDomainName[64];
  char m_subscriberIuaId[32];
  int  m_subscriberIuaInt;
};

struct SmallMGC_Api_SubscriberStatus
{
  char m_gatewayIpAddress[32];
  char m_subscriberTermination[2][32];
  SmallMGC_Api_SubscriberH248State m_subscriberState[2];
  char m_subscriberDomainName[64];
  char m_subscriberIuaId[32];
  int m_subscriberIuaInt;
  int m_callsTotal;
  int m_callOngoing;

};



class SmallMGC_Api
{
public:
  SmallMGC_Api();
  int addGateway(SmallMGC_Api_Gateway* gateway);
  int removeGateway(SmallMGC_Api_Gateway* gateway);
  int blockGateway(SmallMGC_Api_Gateway* gateway);
  int addSubscriber(SmallMGC_Api_Subscriber* subscriber);
  int removeSubscriber(SmallMGC_Api_Subscriber* subscriber);
  int blockSubscriber(SmallMGC_Api_Subscriber* subscriber);
  int unblockSubscriber(SmallMGC_Api_Subscriber* subscriber);
  int shutdownSubscriber(SmallMGC_Api_Subscriber* subscriber);
  SmallMGC_Api_SubscriberStatus*  getSubscriberStatus(SmallMGC_Api_Subscriber* subscriber);
  int setSubscriberStatus(SmallMGC_Api_SubscriberStatus* status);
  int setGatewayStatus(SmallMGC_Api_GatewayStatus* status);
  SmallMGC_Api_GatewayStatus*  getGatewayStatus(SmallMGC_Api_Gateway* subscriber);

  int subscriberAlarmSet(SmallMGC_Api_SubscriberAlarms* subscriberAlarms);
  int subscriberAlarmClear(SmallMGC_Api_SubscriberAlarms* subscriberAlarms);

  int gatewayAlarmSet(SmallMGC_Api_GatewayAlarms* gatewayAlarms);
  int gatewayAlarmClear(SmallMGC_Api_GatewayAlarms* gatewayAlarms);

  virtual ~SmallMGC_Api();

  int setConfigSA(SmallMGC_Api_ConfigSA* configSA);
  int setConfigDigitmap(SmallMGC_Api_ConfigDigitmap* configDigitmap);
  int setConfigGeneral(SmallMGC_Api_ConfigGeneral* configGeneral);
  int setConfigIp(SmallMGC_Api_ConfigIp* config);

  SmallMGC_Api_ConfigSA* getConfigSA();
  SmallMGC_Api_ConfigDigitmap* getConfigDigitmap();
  SmallMGC_Api_ConfigGeneral* getConfigGeneral();
  SmallMGC_Api_ConfigIp* getConfigIp();

  int startTest(char* filePath);
  int stopTest(char* filePath);
  int getTestResult();
  int sendRawMessage(char* destination, char* message);
  int getReceivedMessage(SmallMGC_Api_Commands* command, int* transactionId, int* contextId,
		                 int* eventId, char* termId, char* event, char* localSdp, char* remoteSdp);

  static char SMALLMGC_API_SOCKET[]; // = "./smallmgc_api_socket";
  static char SMALLMGC_API_USER[];

protected:

private:
  SmallMGC_Api_Config m_configuration;
  virtual void createUnixSockets();
  virtual void sendOverSockets(char* buffer, int len);
  virtual int  receiveFromSockets(char* buffer, int len);
  struct sockaddr_un            // UNIX addresses to be used
        m_apiUserSocket,            // Client address
        m_smallmgcSocket;            // Server address
 int    m_orig_sock;           // Original socket descriptor

};

#endif /* SMALLMGCAPI_H_ */
