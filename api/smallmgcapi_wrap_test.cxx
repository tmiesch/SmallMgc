/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGTCL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdio.h>
#include <tcl.h>
#include <errno.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return and integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13



/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGINTERN const char*
SWIG_Tcl_ErrorType(int code) {
  const char* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = "MemoryError";
    break;
  case SWIG_IOError:
    type = "IOError";
    break;
  case SWIG_RuntimeError:
    type = "RuntimeError";
    break;
  case SWIG_IndexError:
    type = "IndexError";
    break;
  case SWIG_TypeError:
    type = "TypeError";
    break;
  case SWIG_DivisionByZero:
    type = "ZeroDivisionError";
    break;
  case SWIG_OverflowError:
    type = "OverflowError";
    break;
  case SWIG_SyntaxError:
    type = "SyntaxError";
    break;
  case SWIG_ValueError:
    type = "ValueError";
    break;
  case SWIG_SystemError:
    type = "SystemError";
    break;
  case SWIG_AttributeError:
    type = "AttributeError";
    break;
  default:
    type = "RuntimeError";
  }
  return type;
}


SWIGINTERN void
SWIG_Tcl_SetErrorObj(Tcl_Interp *interp, const char *ctype, Tcl_Obj *obj)
{
  Tcl_ResetResult(interp);
  Tcl_SetObjResult(interp, obj);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
}

SWIGINTERN void
SWIG_Tcl_SetErrorMsg(Tcl_Interp *interp, const char *ctype, const char *mesg)
{
  Tcl_ResetResult(interp);
  Tcl_SetErrorCode(interp, "SWIG", ctype, NULL);
  Tcl_AppendResult(interp, ctype, " ", mesg, NULL);
  /*
  Tcl_AddErrorInfo(interp, ctype);
  Tcl_AddErrorInfo(interp, " ");
  Tcl_AddErrorInfo(interp, mesg);
  */
}

SWIGINTERNINLINE void
SWIG_Tcl_AddErrorMsg(Tcl_Interp *interp, const char* mesg)
{
  Tcl_AddErrorInfo(interp, mesg);
}



/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_TCL_POINTER 4
#define SWIG_TCL_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

typedef int   (*swig_wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef int   (*swig_wrapper_func)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
typedef char *(*swig_variable_func)(ClientData, Tcl_Interp *, char *, char *, int);
typedef void  (*swig_delete_func)(ClientData);

typedef struct swig_method {
  const char     *name;
  swig_wrapper   method;
} swig_method;

typedef struct swig_attribute {
  const char     *name;
  swig_wrapper   getmethod;
  swig_wrapper   setmethod;
} swig_attribute;

typedef struct swig_class {
  const char         *name;
  swig_type_info   **type;
  swig_wrapper       constructor;
  void              (*destructor)(void *);
  swig_method        *methods;
  swig_attribute     *attributes;
  struct swig_class **bases;
  const char              **base_names;
  swig_module_info   *module;
} swig_class;

typedef struct swig_instance {
  Tcl_Obj       *thisptr;
  void          *thisvalue;
  swig_class   *classptr;
  int            destroy;
  Tcl_Command    cmdtok;
} swig_instance;

/* Structure for command table */
typedef struct {
  const char *name;
  int       (*wrapper)(ClientData, Tcl_Interp *, int, Tcl_Obj *CONST []);
  ClientData  clientdata;
} swig_command_info;

/* Structure for variable linking table */
typedef struct {
  const char *name;
  void *addr;
  char * (*get)(ClientData, Tcl_Interp *, char *, char *, int);
  char * (*set)(ClientData, Tcl_Interp *, char *, char *, int);
} swig_var_info;


/* -----------------------------------------------------------------------------*
 *  Install a constant object 
 * -----------------------------------------------------------------------------*/

static Tcl_HashTable   swigconstTable;
static int             swigconstTableinit = 0;

SWIGINTERN void
SWIG_Tcl_SetConstantObj(Tcl_Interp *interp, const char* name, Tcl_Obj *obj) {
  int newobj;
  Tcl_ObjSetVar2(interp,Tcl_NewStringObj(name,-1), NULL, obj, TCL_GLOBAL_ONLY);
  Tcl_SetHashValue(Tcl_CreateHashEntry(&swigconstTable, name, &newobj), (ClientData) obj);
}

SWIGINTERN Tcl_Obj *
SWIG_Tcl_GetConstantObj(const char *key) {
  Tcl_HashEntry *entryPtr;
  if (!swigconstTableinit) return 0;
  entryPtr = Tcl_FindHashEntry(&swigconstTable, key);
  if (entryPtr) {
    return (Tcl_Obj *) Tcl_GetHashValue(entryPtr);
  }
  return 0;
}

#ifdef __cplusplus
}
#endif



/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * tclrun.swg
 *
 * This file contains the runtime support for Tcl modules and includes
 * code for managing global variables and pointer type checking.
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_ConvertPtr(oc, ptr, ty, flags)             SWIG_Tcl_ConvertPtr(interp, oc, ptr, ty, flags)
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Tcl_NewPointerObj(ptr, type, flags)

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp, obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, flags)
#define SWIG_NewInstanceObj(thisvalue, type, flags)     SWIG_Tcl_NewInstanceObj(interp, thisvalue, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Tcl_ConvertPtr(interp, obj, pptr, type, 0)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Tcl_NewPointerObj(ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Tcl_ConvertPacked(interp,obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Tcl_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Tcl_GetModule((Tcl_Interp *) (clientdata))	     
#define SWIG_SetModule(clientdata, pointer)          	SWIG_Tcl_SetModule((Tcl_Interp *) (clientdata), pointer)


/* Error manipulation */

#define SWIG_ErrorType(code)                            SWIG_Tcl_ErrorType(code)                                      
#define SWIG_Error(code, msg)            		SWIG_Tcl_SetErrorMsg(interp, SWIG_Tcl_ErrorType(code), msg)
#define SWIG_fail                        		goto fail						    


/* Tcl-specific SWIG API */

#define SWIG_Acquire(ptr)                               SWIG_Tcl_Acquire(ptr)                                     
#define SWIG_MethodCommand                           	SWIG_Tcl_MethodCommand				       
#define SWIG_Disown(ptr)                             	SWIG_Tcl_Disown(ptr)				       
#define SWIG_ConvertPtrFromString(c, ptr, ty, flags) 	SWIG_Tcl_ConvertPtrFromString(interp, c, ptr, ty, flags)  
#define SWIG_MakePtr(c, ptr, ty, flags)              	SWIG_Tcl_MakePtr(c, ptr, ty, flags)		       
#define SWIG_PointerTypeFromString(c)                	SWIG_Tcl_PointerTypeFromString(c)			       
#define SWIG_GetArgs                                 	SWIG_Tcl_GetArgs					       
#define SWIG_GetConstantObj(key)                     	SWIG_Tcl_GetConstantObj(key)			       
#define SWIG_ObjectConstructor                       	SWIG_Tcl_ObjectConstructor				       
#define SWIG_Thisown(ptr)                            	SWIG_Tcl_Thisown(ptr)				       
#define SWIG_ObjectDelete                            	SWIG_Tcl_ObjectDelete				       


#define SWIG_TCL_DECL_ARGS_2(arg1, arg2)                (Tcl_Interp *interp SWIGUNUSED, arg1, arg2)
#define SWIG_TCL_CALL_ARGS_2(arg1, arg2)                (interp, arg1, arg2)
/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* For backward compatibility only */
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_GetConstant        SWIG_GetConstantObj
#define SWIG_Tcl_GetConstant    SWIG_Tcl_GetConstantObj

#include "assert.h"

#ifdef __cplusplus
extern "C" {
#if 0
} /* cc-mode */
#endif
#endif

/* Object support */

SWIGRUNTIME Tcl_HashTable*
SWIG_Tcl_ObjectTable(void) {
  static Tcl_HashTable  swigobjectTable;
  static int            swigobjectTableinit = 0;
  if (!swigobjectTableinit) {
    Tcl_InitHashTable(&swigobjectTable, TCL_ONE_WORD_KEYS);
    swigobjectTableinit = 1;
  }
  return &swigobjectTable;
}

/* Acquire ownership of a pointer */
SWIGRUNTIME void
SWIG_Tcl_Acquire(void *ptr) {
  int newobj;
  Tcl_CreateHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr, &newobj);
}

SWIGRUNTIME int
SWIG_Tcl_Thisown(void *ptr) {
  if (Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr)) {
    return 1;
  }
  return 0;
}

/* Disown a pointer.  Returns 1 if we owned it to begin with */
SWIGRUNTIME int
SWIG_Tcl_Disown(void *ptr) {
  Tcl_HashEntry *entryPtr = Tcl_FindHashEntry(SWIG_Tcl_ObjectTable(), (char *) ptr);
  if (entryPtr) {
    Tcl_DeleteHashEntry(entryPtr);
    return 1;
  }
  return 0;
}

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPtrFromString(Tcl_Interp *interp, const char *c, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  /* Pointer values must start with leading underscore */
  while (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) return SWIG_OK;

    /* Empty string: not a pointer */
    if (*c == 0) return SWIG_ERROR; 

    /* Hmmm. It could be an object name. */

    /* Check if this is a command at all. Prevents <c> cget -this         */
    /* from being called when c is not a command, firing the unknown proc */
    if (Tcl_VarEval(interp,"info commands ", c, (char *) NULL) == TCL_OK) {
      Tcl_Obj *result = Tcl_GetObjResult(interp);
      if (*(Tcl_GetStringFromObj(result, NULL)) == 0) {
        /* It's not a command, so it can't be a pointer */
        Tcl_ResetResult(interp);
        return SWIG_ERROR;
      }
    } else {
      /* This will only fail if the argument is multiple words. */
      /* Multiple words are also not commands.                  */
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    /* Check if this is really a SWIG pointer */
    if (Tcl_VarEval(interp,c," cget -this", (char *) NULL) != TCL_OK) {
      Tcl_ResetResult(interp);
      return SWIG_ERROR;
    }

    c = Tcl_GetStringFromObj(Tcl_GetObjResult(interp), NULL);
  }

  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (ty) {
    tc = c ? SWIG_TypeCheck(c,ty) : 0;
    if (!tc) {
      return SWIG_ERROR;
    }
    if (flags & SWIG_POINTER_DISOWN) {
      SWIG_Disown((void *) *ptr);
    }
    {
      int newmemory = 0;
      *ptr = SWIG_TypeCast(tc,(void *) *ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
    }
  }
  return SWIG_OK;
}

/* Convert a pointer value */
SWIGRUNTIMEINLINE int
SWIG_Tcl_ConvertPtr(Tcl_Interp *interp, Tcl_Obj *oc, void **ptr, swig_type_info *ty, int flags) {
  return SWIG_Tcl_ConvertPtrFromString(interp, Tcl_GetStringFromObj(oc,NULL), ptr, ty, flags);
}

/* Convert a pointer value */
SWIGRUNTIME char *
SWIG_Tcl_PointerTypeFromString(char *c) {
  char d;
  /* Pointer values must start with leading underscore. NULL has no type */
  if (*c != '_') {
    return 0;
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if (!(((d >= '0') && (d <= '9')) || ((d >= 'a') && (d <= 'f')))) break;
    c++;
  }
  return c;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Tcl_ConvertPacked(Tcl_Interp *SWIGUNUSEDPARM(interp) , Tcl_Obj *obj, void *ptr, int sz, swig_type_info *ty) {
  swig_cast_info *tc;
  const char  *c;

  if (!obj) goto type_error;
  c = Tcl_GetStringFromObj(obj,NULL);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return SWIG_OK;

 type_error:

  return SWIG_ERROR;
}


/* Take a pointer and convert it to a string */
SWIGRUNTIME void
SWIG_Tcl_MakePtr(char *c, void *ptr, swig_type_info *ty, int flags) {
  if (ptr) {
    *(c++) = '_';
    c = SWIG_PackData(c,&ptr,sizeof(void *));
    strcpy(c,ty->name);
  } else {
    strcpy(c,(char *)"NULL");
  }
  flags = 0;
}

/* Create a new pointer object */
SWIGRUNTIMEINLINE Tcl_Obj *
SWIG_Tcl_NewPointerObj(void *ptr, swig_type_info *type, int flags) {
  Tcl_Obj *robj;
  char result[SWIG_BUFFER_SIZE];
  SWIG_MakePtr(result,ptr,type,flags);
  robj = Tcl_NewStringObj(result,-1);
  return robj;
}

SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return Tcl_NewStringObj(result,-1);
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

SWIGRUNTIME swig_module_info * 
SWIG_Tcl_GetModule(Tcl_Interp *interp) {
  const char *data;
  swig_module_info *ret = 0;
  
  /* first check if pointer already created */
  data = Tcl_GetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, TCL_GLOBAL_ONLY);
  if (data) {
    SWIG_UnpackData(data, &ret, sizeof(swig_type_info **));
  }

  return ret;
}

SWIGRUNTIME void
SWIG_Tcl_SetModule(Tcl_Interp *interp, swig_module_info *module) {
  char buf[SWIG_BUFFER_SIZE];
  char *data;

  /* create a new pointer */
  data = SWIG_PackData(buf, &module, sizeof(swig_type_info **));
  *data = 0;
  Tcl_SetVar(interp, (char *)"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME, buf, 0);
}

/* -----------------------------------------------------------------------------*
 *  Object auxiliars
 * -----------------------------------------------------------------------------*/


SWIGRUNTIME void
SWIG_Tcl_ObjectDelete(ClientData clientData) {
  swig_instance *si = (swig_instance *) clientData;
  if ((si) && (si->destroy) && (SWIG_Disown(si->thisvalue))) {
    if (si->classptr->destructor) {
      (si->classptr->destructor)(si->thisvalue);
    }
  }
  Tcl_DecrRefCount(si->thisptr);
  free(si);
}

/* Function to invoke object methods given an instance */
SWIGRUNTIME int
SWIG_Tcl_MethodCommand(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST _objv[]) {
  char *method,   *attrname;
  swig_instance   *inst = (swig_instance *) clientData;
  swig_method     *meth;
  swig_attribute  *attr;
  Tcl_Obj         *oldarg;
  Tcl_Obj         **objv;
  int              rcode;
  swig_class      *cls;
  swig_class      *cls_stack[64];
  int              cls_stack_bi[64];
  int              cls_stack_top = 0;
  int              numconf = 2;
  int              bi;

  objv = (Tcl_Obj **) _objv;
  if (objc < 2) {
    Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
    return TCL_ERROR;
  }
  method = Tcl_GetStringFromObj(objv[1],NULL);
  if (strcmp(method,"-acquire") == 0) {
    inst->destroy = 1;
    SWIG_Acquire(inst->thisvalue);
    return TCL_OK;
  }
  if (strcmp(method,"-disown") == 0) {
    if (inst->destroy) {
      SWIG_Disown(inst->thisvalue);
    }
    inst->destroy = 0;
    return TCL_OK;
  }
  if (strcmp(method,"-delete") == 0) {
    Tcl_DeleteCommandFromToken(interp,inst->cmdtok);
    return TCL_OK;
  }
  cls_stack[cls_stack_top] = inst->classptr;
  cls_stack_bi[cls_stack_top] = -1;
  cls = inst->classptr;
  while (1) {
    bi = cls_stack_bi[cls_stack_top];
    cls = cls_stack[cls_stack_top];
    if (bi != -1) {
      if (!cls->bases[bi] && cls->base_names[bi]) {
        /* lookup and cache the base class */
	swig_type_info *info = SWIG_TypeQueryModule(cls->module, cls->module, cls->base_names[bi]);
	if (info) cls->bases[bi] = (swig_class *) info->clientdata;
      }
      cls = cls->bases[bi];
      if (cls) {
        cls_stack_bi[cls_stack_top]++;
        cls_stack_top++;
        cls_stack[cls_stack_top] = cls;
        cls_stack_bi[cls_stack_top] = -1;
        continue;
      }
    }
    if (!cls) {
      cls_stack_top--;
      if (cls_stack_top < 0) break;
      else continue;
    }
    cls_stack_bi[cls_stack_top]++;

    meth = cls->methods;
    /* Check for methods */
    while (meth && meth->name) {
      if (strcmp(meth->name,method) == 0) {
        oldarg = objv[1];
        objv[1] = inst->thisptr;
        Tcl_IncrRefCount(inst->thisptr);
        rcode = (*meth->method)(clientData,interp,objc,objv);
        objv[1] = oldarg;
        Tcl_DecrRefCount(inst->thisptr);
        return rcode;
      }
      meth++;
    }
    /* Check class methods for a match */
    if (strcmp(method,"cget") == 0) {
      if (objc < 3) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      attrname = Tcl_GetStringFromObj(objv[2],NULL);
      attr = cls->attributes;
      while (attr && attr->name) {
        if ((strcmp(attr->name, attrname) == 0) && (attr->getmethod)) {
          oldarg = objv[1];
          objv[1] = inst->thisptr;
          Tcl_IncrRefCount(inst->thisptr);
          rcode = (*attr->getmethod)(clientData,interp,2, objv);
          objv[1] = oldarg;
          Tcl_DecrRefCount(inst->thisptr);
          return rcode;
        }
        attr++;
      }
      if (strcmp(attrname, "-this") == 0) {
        Tcl_SetObjResult(interp, Tcl_DuplicateObj(inst->thisptr));
        return TCL_OK;
      }
      if (strcmp(attrname, "-thisown") == 0) {
        if (SWIG_Thisown(inst->thisvalue)) {
          Tcl_SetResult(interp,(char*)"1",TCL_STATIC);
        } else {
          Tcl_SetResult(interp,(char*)"0",TCL_STATIC);
        }
        return TCL_OK;
      }
    } else if (strcmp(method, "configure") == 0) {
      int i;
      if (objc < 4) {
        Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
        return TCL_ERROR;
      }
      i = 2;
      while (i < objc) {
        attrname = Tcl_GetStringFromObj(objv[i],NULL);
        attr = cls->attributes;
        while (attr && attr->name) {
          if ((strcmp(attr->name, attrname) == 0) && (attr->setmethod)) {
            oldarg = objv[i];
            objv[i] = inst->thisptr;
            Tcl_IncrRefCount(inst->thisptr);
            rcode = (*attr->setmethod)(clientData,interp,3, &objv[i-1]);
            objv[i] = oldarg;
            Tcl_DecrRefCount(inst->thisptr);
            if (rcode != TCL_OK) return rcode;
            numconf += 2;
          }
          attr++;
        }
        i+=2;
      }
    }
  }
  if (strcmp(method,"configure") == 0) {
    if (numconf >= objc) {
      return TCL_OK;
    } else {
      Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
      return TCL_ERROR;
    }
  }
  if (strcmp(method,"cget") == 0) {
    Tcl_SetResult(interp,(char *) "Invalid attribute name.", TCL_STATIC);
    return TCL_ERROR;
  }
  Tcl_SetResult(interp, (char *) "Invalid method. Must be one of: configure cget -acquire -disown -delete", TCL_STATIC);
  cls = inst->classptr;
  bi = 0;
  while (cls) {
    meth = cls->methods;
    while (meth && meth->name) {
      char *cr = (char *) Tcl_GetStringResult(interp);
      size_t meth_len = strlen(meth->name);
      char* where = strchr(cr,':');
      while(where) {
        where = strstr(where, meth->name);
        if(where) {
          if(where[-1] == ' ' && (where[meth_len] == ' ' || where[meth_len]==0)) {
            break;
          } else {
            where++;
          }
        }
      }

      if (!where)
        Tcl_AppendElement(interp, (char *) meth->name);
      meth++;
    }
    cls = inst->classptr->bases[bi++];
  }
  return TCL_ERROR;
}

/* This function takes the current result and turns it into an object command */
SWIGRUNTIME Tcl_Obj *
SWIG_Tcl_NewInstanceObj(Tcl_Interp *interp, void *thisvalue, swig_type_info *type, int flags) {
  Tcl_Obj *robj = SWIG_NewPointerObj(thisvalue, type,0);
  /* Check to see if this pointer belongs to a class or not */
  if ((type->clientdata) && (interp)) {
    Tcl_CmdInfo    ci;
    char          *name;
    name = Tcl_GetStringFromObj(robj,NULL);
    if (!Tcl_GetCommandInfo(interp,name, &ci) || (flags)) {
      swig_instance *newinst = (swig_instance *) malloc(sizeof(swig_instance));
      newinst->thisptr = Tcl_DuplicateObj(robj);
      Tcl_IncrRefCount(newinst->thisptr);
      newinst->thisvalue = thisvalue;
      newinst->classptr = (swig_class *) type->clientdata;
      newinst->destroy = flags;
      newinst->cmdtok = Tcl_CreateObjCommand(interp, Tcl_GetStringFromObj(robj,NULL), (swig_wrapper_func) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
      if (flags) {
        SWIG_Acquire(thisvalue);
      }
    }
  }
  return robj;
}

/* Function to create objects */
SWIGRUNTIME int
SWIG_Tcl_ObjectConstructor(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  Tcl_Obj          *newObj = 0;
  void             *thisvalue = 0;
  swig_instance   *newinst = 0;
  swig_class      *classptr = (swig_class *) clientData;
  swig_wrapper     cons = 0;
  char             *name = 0;
  int               firstarg = 0;
  int               thisarg = 0;
  int               destroy = 1;

  if (!classptr) {
    Tcl_SetResult(interp, (char *) "swig: internal runtime error. No class object defined.", TCL_STATIC);
    return TCL_ERROR;
  }
  cons = classptr->constructor;
  if (objc > 1) {
    char *s = Tcl_GetStringFromObj(objv[1],NULL);
    if (strcmp(s,"-this") == 0) {
      thisarg = 2;
      cons = 0;
    } else if (strcmp(s,"-args") == 0) {
      firstarg = 1;
    } else if (objc == 2) {
      firstarg = 1;
      name = s;
    } else if (objc >= 3) {
      char *s1;
      name = s;
      s1 = Tcl_GetStringFromObj(objv[2],NULL);
      if (strcmp(s1,"-this") == 0) {
	thisarg = 3;
	cons = 0;
      } else {
	firstarg = 1;
      }
    }
  }
  if (cons) {
    int result;
    result = (*cons)(0, interp, objc-firstarg, &objv[firstarg]);
    if (result != TCL_OK) {
      return result;
    }
    newObj = Tcl_DuplicateObj(Tcl_GetObjResult(interp));
    if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
  } else if (thisarg > 0) {
    if (thisarg < objc) {
      destroy = 0;
      newObj = Tcl_DuplicateObj(objv[thisarg]);
      if (!name) name = Tcl_GetStringFromObj(newObj,NULL);
    } else {
      Tcl_SetResult(interp, (char *) "wrong # args.", TCL_STATIC);
      return TCL_ERROR;
    }
  } else {
    Tcl_SetResult(interp, (char *) "No constructor available.", TCL_STATIC);
    return TCL_ERROR;
  }
  if (SWIG_Tcl_ConvertPtr(interp,newObj, (void **) &thisvalue, *(classptr->type), 0) != SWIG_OK) {
    Tcl_DecrRefCount(newObj);
    return TCL_ERROR;
  }
  newinst = (swig_instance *) malloc(sizeof(swig_instance));
  newinst->thisptr = newObj;
  Tcl_IncrRefCount(newObj);
  newinst->thisvalue = thisvalue;
  newinst->classptr = classptr;
  newinst->destroy = destroy;
  if (destroy) {
    SWIG_Acquire(thisvalue);
  }
  newinst->cmdtok = Tcl_CreateObjCommand(interp,name, (swig_wrapper) SWIG_MethodCommand, (ClientData) newinst, (swig_delete_func) SWIG_ObjectDelete);
  return TCL_OK;
}

/* -----------------------------------------------------------------------------*
 *   Get arguments 
 * -----------------------------------------------------------------------------*/
SWIGRUNTIME int
SWIG_Tcl_GetArgs(Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[], const char *fmt, ...) {
  int        argno = 0, opt = 0;
  long       tempi;
  double     tempd;
  const char *c;
  va_list    ap;
  void      *vptr;
  Tcl_Obj   *obj = 0;
  swig_type_info *ty;

  va_start(ap,fmt);
  for (c = fmt; (*c && (*c != ':') && (*c != ';')); c++,argno++) {
    if (*c == '|') {
      opt = 1;
      c++;
    }
    if (argno >= (objc-1)) {
      if (!opt) {
        Tcl_SetResult(interp, (char *) "Wrong number of arguments ", TCL_STATIC);
        goto argerror;
      } else {
        va_end(ap);
        return TCL_OK;
      }
    }

    vptr = va_arg(ap,void *);
    if (vptr) {
      if (isupper(*c)) {
        obj = SWIG_Tcl_GetConstantObj(Tcl_GetStringFromObj(objv[argno+1],0));
        if (!obj) obj = objv[argno+1];
      } else {
        obj = objv[argno+1];
      }
      switch(*c) {
      case 'i': case 'I':
      case 'l': case 'L':
      case 'h': case 'H':
      case 'b': case 'B':
        if (Tcl_GetLongFromObj(interp,obj,&tempi) != TCL_OK) goto argerror;
        if ((*c == 'i') || (*c == 'I')) *((int *)vptr) = (int)tempi;
        else if ((*c == 'l') || (*c == 'L')) *((long *)vptr) = (long)tempi;
        else if ((*c == 'h') || (*c == 'H')) *((short*)vptr) = (short)tempi;
        else if ((*c == 'b') || (*c == 'B')) *((unsigned char *)vptr) = (unsigned char)tempi;
        break;
      case 'f': case 'F':
      case 'd': case 'D':
        if (Tcl_GetDoubleFromObj(interp,obj,&tempd) != TCL_OK) goto argerror;
        if ((*c == 'f') || (*c == 'F')) *((float *) vptr) = (float)tempd;
        else if ((*c == 'd') || (*c == 'D')) *((double*) vptr) = tempd;
        break;
      case 's': case 'S':
        if (*(c+1) == '#') {
          int *vlptr = (int *) va_arg(ap, void *);
          *((char **) vptr) = Tcl_GetStringFromObj(obj, vlptr);
          c++;
        } else {
          *((char **)vptr) = Tcl_GetStringFromObj(obj,NULL);
        }
        break;
      case 'c': case 'C':
        *((char *)vptr) = *(Tcl_GetStringFromObj(obj,NULL));
        break;
      case 'p': case 'P':
        ty = (swig_type_info *) va_arg(ap, void *);
        if (SWIG_Tcl_ConvertPtr(interp, obj, (void **) vptr, ty, 0) != SWIG_OK) goto argerror;
        break;
      case 'o': case 'O':
        *((Tcl_Obj **)vptr) = objv[argno+1];
        break;
      default:
        break;
      }
    }
  }

  if ((*c != ';') && ((objc-1) > argno)) {
    Tcl_SetResult(interp, (char *) "Wrong # args.", TCL_STATIC);
    goto argerror;
  }
  va_end(ap);
  return TCL_OK;

 argerror:
  {
    char temp[32];
    sprintf(temp,"%d", argno+1);
    c = strchr(fmt,':');
    if (!c) c = strchr(fmt,';');
    if (!c) c = (char *)"";
    Tcl_AppendResult(interp,c," argument ", temp, NULL);
    va_end(ap);
    return TCL_ERROR;
  }
}

#ifdef __cplusplus
#if 0
{ /* cc-mode */
#endif
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_SmallMGC_Api swig_types[0]
#define SWIGTYPE_p_SmallMGC_Api_Commands swig_types[1]
#define SWIGTYPE_p_SmallMGC_Api_Config swig_types[2]
#define SWIGTYPE_p_SmallMGC_Api_ConfigDigitmap swig_types[3]
#define SWIGTYPE_p_SmallMGC_Api_ConfigGeneral swig_types[4]
#define SWIGTYPE_p_SmallMGC_Api_ConfigIp swig_types[5]
#define SWIGTYPE_p_SmallMGC_Api_ConfigSA swig_types[6]
#define SWIGTYPE_p_SmallMGC_Api_Gateway swig_types[7]
#define SWIGTYPE_p_SmallMGC_Api_GatewayAlarms swig_types[8]
#define SWIGTYPE_p_SmallMGC_Api_GatewayGeneral swig_types[9]
#define SWIGTYPE_p_SmallMGC_Api_GatewayStatus swig_types[10]
#define SWIGTYPE_p_SmallMGC_Api_Status swig_types[11]
#define SWIGTYPE_p_SmallMGC_Api_Subscriber swig_types[12]
#define SWIGTYPE_p_SmallMGC_Api_SubscriberAlarms swig_types[13]
#define SWIGTYPE_p_SmallMGC_Api_SubscriberH248State swig_types[14]
#define SWIGTYPE_p_SmallMGC_Api_SubscriberStatus swig_types[15]
#define SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage swig_types[16]
#define SWIGTYPE_p_a_32__char swig_types[17]
#define SWIGTYPE_p_char swig_types[18]
#define SWIGTYPE_p_int swig_types[19]
static swig_type_info *swig_types[21];
static swig_module_info swig_module = {swig_types, 20, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_init    Smallmgcapi_Init
#define SWIG_name    "smallmgcapi"
#define SWIG_prefix  ""
#define SWIG_version "0.0"

#define SWIGVERSION 0x010340 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>



#ifdef __cplusplus
extern "C" {
#endif
#ifdef MAC_TCL
#pragma export on
#endif
SWIGEXPORT int SWIG_init(Tcl_Interp *);
#ifdef MAC_TCL
#pragma export off
#endif
#ifdef __cplusplus
}
#endif

/* Compatibility version for TCL stubs */
#ifndef SWIG_TCL_STUBS_VERSION
#define SWIG_TCL_STUBS_VERSION "8.1"
#endif



#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERNINLINE Tcl_Obj* 
SWIG_From_long  (long value)
{
  if (((long) INT_MIN <= value) && (value <= (long) INT_MAX)) {
    return Tcl_NewIntObj(static_cast< int >(value));
  } else {
    return Tcl_NewLongObj(value);
  }
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_From_int  (int value)
{    
  return SWIG_From_long  (value);
}


SWIGINTERN int
SWIG_AsVal_long SWIG_TCL_DECL_ARGS_2(Tcl_Obj *obj, long* val)
{
  long v;
  if (Tcl_GetLongFromObj(0,obj, &v) == TCL_OK) {
    if (val) *val = (long) v;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int SWIG_TCL_DECL_ARGS_2(Tcl_Obj * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long SWIG_TCL_CALL_ARGS_2(obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(Tcl_Obj *obj, char** cptr, size_t* psize, int *alloc)
{ 
  int len = 0;
  char *cstr = Tcl_GetStringFromObj(obj, &len);
  if (cstr) {
    if (cptr)  *cptr = cstr;
    if (psize) *psize = len + 1;
    if (alloc) *alloc = SWIG_OLDOBJ;
    return SWIG_OK;
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsCharArray(Tcl_Obj * obj, char *val, size_t size)
{ 
  char* cptr = 0; size_t csize = 0; int alloc = SWIG_OLDOBJ;
  int res = SWIG_AsCharPtrAndSize(obj, &cptr, &csize, &alloc);
  if (SWIG_IsOK(res)) {
    if ((csize == size + 1) && cptr && !(cptr[csize-1])) --csize;
    if (csize <= size) {
      if (val) {
	if (csize) memcpy(val, cptr, csize*sizeof(char));
	if (csize < size) memset(val + csize, 0, (size - csize)*sizeof(char));
      }
      if (alloc == SWIG_NEWOBJ) {
	delete[] cptr;
	res = SWIG_DelNewMask(res);
      }      
      return res;
    }
    if (alloc == SWIG_NEWOBJ) delete[] cptr;
  }
  return SWIG_TypeError;
}


SWIGINTERNINLINE Tcl_Obj *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  return (size < INT_MAX) ? Tcl_NewStringObj(carray, static_cast< int >(size)) : NULL;
}





SWIGINTERNINLINE Tcl_Obj * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_command_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  SmallMGC_Api_Commands arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_TestReceivedMessage_command_set self command ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_command_set" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_TestReceivedMessage_command_set" "', argument " "2"" of type '" "SmallMGC_Api_Commands""'");
  } 
  arg2 = static_cast< SmallMGC_Api_Commands >(val2);
  if (arg1) (arg1)->command = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_command_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_Commands result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_TestReceivedMessage_command_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_command_get" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  result = (SmallMGC_Api_Commands) ((arg1)->command);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_transactionId_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_TestReceivedMessage_transactionId_set self transactionId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_transactionId_set" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_TestReceivedMessage_transactionId_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->transactionId = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_transactionId_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_TestReceivedMessage_transactionId_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_transactionId_get" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  result = (int) ((arg1)->transactionId);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_contextId_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_TestReceivedMessage_contextId_set self contextId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_contextId_set" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_TestReceivedMessage_contextId_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->contextId = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_contextId_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_TestReceivedMessage_contextId_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_contextId_get" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  result = (int) ((arg1)->contextId);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_eventId_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_TestReceivedMessage_eventId_set self eventId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_eventId_set" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_TestReceivedMessage_eventId_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->eventId = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_eventId_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_TestReceivedMessage_eventId_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_eventId_get" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  result = (int) ((arg1)->eventId);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_termId_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_TestReceivedMessage_termId_set self termId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_termId_set" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_TestReceivedMessage_termId_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->termId,arg2,32*sizeof(char));
  else memset(arg1->termId,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_termId_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_TestReceivedMessage_termId_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_termId_get" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  result = (char *)(char *) ((arg1)->termId);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_event_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[128] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_TestReceivedMessage_event_set self event ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_event_set" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 128);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_TestReceivedMessage_event_set" "', argument " "2"" of type '" "char [128]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->event,arg2,128*sizeof(char));
  else memset(arg1->event,0,128*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_event_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_TestReceivedMessage_event_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_event_get" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  result = (char *)(char *) ((arg1)->event);
  {
    size_t size = 128;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_localSdp_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[512] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_TestReceivedMessage_localSdp_set self localSdp ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_localSdp_set" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 512);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_TestReceivedMessage_localSdp_set" "', argument " "2"" of type '" "char [512]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->localSdp,arg2,512*sizeof(char));
  else memset(arg1->localSdp,0,512*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_localSdp_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_TestReceivedMessage_localSdp_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_localSdp_get" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  result = (char *)(char *) ((arg1)->localSdp);
  {
    size_t size = 512;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_remoteSdp_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[512] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_TestReceivedMessage_remoteSdp_set self remoteSdp ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_remoteSdp_set" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 512);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_TestReceivedMessage_remoteSdp_set" "', argument " "2"" of type '" "char [512]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->remoteSdp,arg2,512*sizeof(char));
  else memset(arg1->remoteSdp,0,512*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_TestReceivedMessage_remoteSdp_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_TestReceivedMessage_remoteSdp_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_TestReceivedMessage_remoteSdp_get" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  result = (char *)(char *) ((arg1)->remoteSdp);
  {
    size_t size = 512;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SmallMGC_Api_TestReceivedMessage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api_TestReceivedMessage ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api_TestReceivedMessage *)new SmallMGC_Api_TestReceivedMessage();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api_TestReceivedMessage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api_TestReceivedMessage self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api_TestReceivedMessage" "', argument " "1"" of type '" "SmallMGC_Api_TestReceivedMessage *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_TestReceivedMessage * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SmallMGC_Api_TestReceivedMessage(void *obj) {
SmallMGC_Api_TestReceivedMessage *arg1 = (SmallMGC_Api_TestReceivedMessage *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_TestReceivedMessage_methods[] = {
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_TestReceivedMessage_attributes[] = {
    { "-command",_wrap_SmallMGC_Api_TestReceivedMessage_command_get, _wrap_SmallMGC_Api_TestReceivedMessage_command_set},
    { "-transactionId",_wrap_SmallMGC_Api_TestReceivedMessage_transactionId_get, _wrap_SmallMGC_Api_TestReceivedMessage_transactionId_set},
    { "-contextId",_wrap_SmallMGC_Api_TestReceivedMessage_contextId_get, _wrap_SmallMGC_Api_TestReceivedMessage_contextId_set},
    { "-eventId",_wrap_SmallMGC_Api_TestReceivedMessage_eventId_get, _wrap_SmallMGC_Api_TestReceivedMessage_eventId_set},
    { "-termId",_wrap_SmallMGC_Api_TestReceivedMessage_termId_get, _wrap_SmallMGC_Api_TestReceivedMessage_termId_set},
    { "-event",_wrap_SmallMGC_Api_TestReceivedMessage_event_get, _wrap_SmallMGC_Api_TestReceivedMessage_event_set},
    { "-localSdp",_wrap_SmallMGC_Api_TestReceivedMessage_localSdp_get, _wrap_SmallMGC_Api_TestReceivedMessage_localSdp_set},
    { "-remoteSdp",_wrap_SmallMGC_Api_TestReceivedMessage_remoteSdp_get, _wrap_SmallMGC_Api_TestReceivedMessage_remoteSdp_set},
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_TestReceivedMessage_bases[] = {0};
static const char * swig_SmallMGC_Api_TestReceivedMessage_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api_TestReceivedMessage = { "SmallMGC_Api_TestReceivedMessage", &SWIGTYPE_p_SmallMGC_Api_TestReceivedMessage,_wrap_new_SmallMGC_Api_TestReceivedMessage, swig_delete_SmallMGC_Api_TestReceivedMessage, swig_SmallMGC_Api_TestReceivedMessage_methods, swig_SmallMGC_Api_TestReceivedMessage_attributes, swig_SmallMGC_Api_TestReceivedMessage_bases,swig_SmallMGC_Api_TestReceivedMessage_base_names, &swig_module };
SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_name_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigIp_m_name_set self m_name ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_name_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigIp_m_name_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_name,arg2,32*sizeof(char));
  else memset(arg1->m_name,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_name_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigIp_m_name_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_name_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  result = (char *)(char *) ((arg1)->m_name);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_h248IpAddress_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigIp_m_h248IpAddress_set self m_h248IpAddress ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_h248IpAddress_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigIp_m_h248IpAddress_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_h248IpAddress,arg2,32*sizeof(char));
  else memset(arg1->m_h248IpAddress,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_h248IpAddress_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigIp_m_h248IpAddress_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_h248IpAddress_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  result = (char *)(char *) ((arg1)->m_h248IpAddress);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_h248IpPort_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigIp_m_h248IpPort_set self m_h248IpPort ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_h248IpPort_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigIp_m_h248IpPort_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_h248IpPort,arg2,32*sizeof(char));
  else memset(arg1->m_h248IpPort,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_h248IpPort_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigIp_m_h248IpPort_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_h248IpPort_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  result = (char *)(char *) ((arg1)->m_h248IpPort);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_h248IpDomainName_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigIp_m_h248IpDomainName_set self m_h248IpDomainName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_h248IpDomainName_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigIp_m_h248IpDomainName_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_h248IpDomainName,arg2,64*sizeof(char));
  else memset(arg1->m_h248IpDomainName,0,64*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_h248IpDomainName_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigIp_m_h248IpDomainName_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_h248IpDomainName_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  result = (char *)(char *) ((arg1)->m_h248IpDomainName);
  {
    size_t size = 64;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_sigtranIpAddress_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigIp_m_sigtranIpAddress_set self m_sigtranIpAddress ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_sigtranIpAddress_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigIp_m_sigtranIpAddress_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_sigtranIpAddress,arg2,32*sizeof(char));
  else memset(arg1->m_sigtranIpAddress,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_sigtranIpAddress_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigIp_m_sigtranIpAddress_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_sigtranIpAddress_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  result = (char *)(char *) ((arg1)->m_sigtranIpAddress);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_sigtranIpPort_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigIp_m_sigtranIpPort_set self m_sigtranIpPort ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_sigtranIpPort_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigIp_m_sigtranIpPort_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_sigtranIpPort,arg2,32*sizeof(char));
  else memset(arg1->m_sigtranIpPort,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_sigtranIpPort_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigIp_m_sigtranIpPort_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_sigtranIpPort_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  result = (char *)(char *) ((arg1)->m_sigtranIpPort);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_set self m_sigtranIpDomainName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_sigtranIpDomainName,arg2,64*sizeof(char));
  else memset(arg1->m_sigtranIpDomainName,0,64*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  result = (char *)(char *) ((arg1)->m_sigtranIpDomainName);
  {
    size_t size = 64;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_sipIpAddress_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigIp_m_sipIpAddress_set self m_sipIpAddress ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_sipIpAddress_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigIp_m_sipIpAddress_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_sipIpAddress,arg2,32*sizeof(char));
  else memset(arg1->m_sipIpAddress,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_sipIpAddress_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigIp_m_sipIpAddress_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_sipIpAddress_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  result = (char *)(char *) ((arg1)->m_sipIpAddress);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_sipIpPort_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigIp_m_sipIpPort_set self m_sipIpPort ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_sipIpPort_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigIp_m_sipIpPort_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_sipIpPort,arg2,32*sizeof(char));
  else memset(arg1->m_sipIpPort,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_sipIpPort_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigIp_m_sipIpPort_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_sipIpPort_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  result = (char *)(char *) ((arg1)->m_sipIpPort);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_sipIpDomainName_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigIp_m_sipIpDomainName_set self m_sipIpDomainName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_sipIpDomainName_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigIp_m_sipIpDomainName_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_sipIpDomainName,arg2,64*sizeof(char));
  else memset(arg1->m_sipIpDomainName,0,64*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigIp_m_sipIpDomainName_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigIp_m_sipIpDomainName_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigIp_m_sipIpDomainName_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  result = (char *)(char *) ((arg1)->m_sipIpDomainName);
  {
    size_t size = 64;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SmallMGC_Api_ConfigIp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api_ConfigIp ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api_ConfigIp *)new SmallMGC_Api_ConfigIp();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigIp,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api_ConfigIp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api_ConfigIp self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigIp, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api_ConfigIp" "', argument " "1"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SmallMGC_Api_ConfigIp(void *obj) {
SmallMGC_Api_ConfigIp *arg1 = (SmallMGC_Api_ConfigIp *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_ConfigIp_methods[] = {
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_ConfigIp_attributes[] = {
    { "-m_name",_wrap_SmallMGC_Api_ConfigIp_m_name_get, _wrap_SmallMGC_Api_ConfigIp_m_name_set},
    { "-m_h248IpAddress",_wrap_SmallMGC_Api_ConfigIp_m_h248IpAddress_get, _wrap_SmallMGC_Api_ConfigIp_m_h248IpAddress_set},
    { "-m_h248IpPort",_wrap_SmallMGC_Api_ConfigIp_m_h248IpPort_get, _wrap_SmallMGC_Api_ConfigIp_m_h248IpPort_set},
    { "-m_h248IpDomainName",_wrap_SmallMGC_Api_ConfigIp_m_h248IpDomainName_get, _wrap_SmallMGC_Api_ConfigIp_m_h248IpDomainName_set},
    { "-m_sigtranIpAddress",_wrap_SmallMGC_Api_ConfigIp_m_sigtranIpAddress_get, _wrap_SmallMGC_Api_ConfigIp_m_sigtranIpAddress_set},
    { "-m_sigtranIpPort",_wrap_SmallMGC_Api_ConfigIp_m_sigtranIpPort_get, _wrap_SmallMGC_Api_ConfigIp_m_sigtranIpPort_set},
    { "-m_sigtranIpDomainName",_wrap_SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_get, _wrap_SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_set},
    { "-m_sipIpAddress",_wrap_SmallMGC_Api_ConfigIp_m_sipIpAddress_get, _wrap_SmallMGC_Api_ConfigIp_m_sipIpAddress_set},
    { "-m_sipIpPort",_wrap_SmallMGC_Api_ConfigIp_m_sipIpPort_get, _wrap_SmallMGC_Api_ConfigIp_m_sipIpPort_set},
    { "-m_sipIpDomainName",_wrap_SmallMGC_Api_ConfigIp_m_sipIpDomainName_get, _wrap_SmallMGC_Api_ConfigIp_m_sipIpDomainName_set},
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_ConfigIp_bases[] = {0};
static const char * swig_SmallMGC_Api_ConfigIp_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api_ConfigIp = { "SmallMGC_Api_ConfigIp", &SWIGTYPE_p_SmallMGC_Api_ConfigIp,_wrap_new_SmallMGC_Api_ConfigIp, swig_delete_SmallMGC_Api_ConfigIp, swig_SmallMGC_Api_ConfigIp_methods, swig_SmallMGC_Api_ConfigIp_attributes, swig_SmallMGC_Api_ConfigIp_bases,swig_SmallMGC_Api_ConfigIp_base_names, &swig_module };
SWIGINTERN int
_wrap_SmallMGC_Api_ConfigGeneral_m_retransmissions_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigGeneral_m_retransmissions_set self m_retransmissions ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigGeneral_m_retransmissions_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_ConfigGeneral_m_retransmissions_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_retransmissions = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigGeneral_m_retransmissions_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigGeneral_m_retransmissions_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigGeneral_m_retransmissions_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  result = (int) ((arg1)->m_retransmissions);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigGeneral_m_modifybundles_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigGeneral_m_modifybundles_set self m_modifybundles ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigGeneral_m_modifybundles_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_ConfigGeneral_m_modifybundles_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_modifybundles = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigGeneral_m_modifybundles_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigGeneral_m_modifybundles_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigGeneral_m_modifybundles_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  result = (int) ((arg1)->m_modifybundles);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigGeneral_m_bundlestimeout_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigGeneral_m_bundlestimeout_set self m_bundlestimeout ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigGeneral_m_bundlestimeout_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_ConfigGeneral_m_bundlestimeout_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_bundlestimeout = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigGeneral_m_bundlestimeout_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigGeneral_m_bundlestimeout_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigGeneral_m_bundlestimeout_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  result = (int) ((arg1)->m_bundlestimeout);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigGeneral_m_busyToneDuration_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigGeneral_m_busyToneDuration_set self m_busyToneDuration ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigGeneral_m_busyToneDuration_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_ConfigGeneral_m_busyToneDuration_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_busyToneDuration = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigGeneral_m_busyToneDuration_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigGeneral_m_busyToneDuration_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigGeneral_m_busyToneDuration_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  result = (int) ((arg1)->m_busyToneDuration);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_set self m_congestionToneDuration ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_congestionToneDuration = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  result = (int) ((arg1)->m_congestionToneDuration);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_set self m_howlerToneDuration ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_howlerToneDuration = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  result = (int) ((arg1)->m_howlerToneDuration);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SmallMGC_Api_ConfigGeneral(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api_ConfigGeneral ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api_ConfigGeneral *)new SmallMGC_Api_ConfigGeneral();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigGeneral,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api_ConfigGeneral(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api_ConfigGeneral self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api_ConfigGeneral" "', argument " "1"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SmallMGC_Api_ConfigGeneral(void *obj) {
SmallMGC_Api_ConfigGeneral *arg1 = (SmallMGC_Api_ConfigGeneral *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_ConfigGeneral_methods[] = {
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_ConfigGeneral_attributes[] = {
    { "-m_retransmissions",_wrap_SmallMGC_Api_ConfigGeneral_m_retransmissions_get, _wrap_SmallMGC_Api_ConfigGeneral_m_retransmissions_set},
    { "-m_modifybundles",_wrap_SmallMGC_Api_ConfigGeneral_m_modifybundles_get, _wrap_SmallMGC_Api_ConfigGeneral_m_modifybundles_set},
    { "-m_bundlestimeout",_wrap_SmallMGC_Api_ConfigGeneral_m_bundlestimeout_get, _wrap_SmallMGC_Api_ConfigGeneral_m_bundlestimeout_set},
    { "-m_busyToneDuration",_wrap_SmallMGC_Api_ConfigGeneral_m_busyToneDuration_get, _wrap_SmallMGC_Api_ConfigGeneral_m_busyToneDuration_set},
    { "-m_congestionToneDuration",_wrap_SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_get, _wrap_SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_set},
    { "-m_howlerToneDuration",_wrap_SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_get, _wrap_SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_set},
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_ConfigGeneral_bases[] = {0};
static const char * swig_SmallMGC_Api_ConfigGeneral_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api_ConfigGeneral = { "SmallMGC_Api_ConfigGeneral", &SWIGTYPE_p_SmallMGC_Api_ConfigGeneral,_wrap_new_SmallMGC_Api_ConfigGeneral, swig_delete_SmallMGC_Api_ConfigGeneral, swig_SmallMGC_Api_ConfigGeneral_methods, swig_SmallMGC_Api_ConfigGeneral_attributes, swig_SmallMGC_Api_ConfigGeneral_bases,swig_SmallMGC_Api_ConfigGeneral_base_names, &swig_module };
SWIGINTERN int
_wrap_SmallMGC_Api_ConfigDigitmap_m_digitmap_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigDigitmap *arg1 = (SmallMGC_Api_ConfigDigitmap *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[512] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigDigitmap_m_digitmap_set self m_digitmap ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigDigitmap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigDigitmap_m_digitmap_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigDigitmap *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigDigitmap * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 512);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigDigitmap_m_digitmap_set" "', argument " "2"" of type '" "char [512]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_digitmap,arg2,512*sizeof(char));
  else memset(arg1->m_digitmap,0,512*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigDigitmap_m_digitmap_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigDigitmap *arg1 = (SmallMGC_Api_ConfigDigitmap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigDigitmap_m_digitmap_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigDigitmap, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigDigitmap_m_digitmap_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigDigitmap *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigDigitmap * >(argp1);
  result = (char *)(char *) ((arg1)->m_digitmap);
  {
    size_t size = 512;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SmallMGC_Api_ConfigDigitmap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigDigitmap *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api_ConfigDigitmap ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api_ConfigDigitmap *)new SmallMGC_Api_ConfigDigitmap();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigDigitmap,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api_ConfigDigitmap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigDigitmap *arg1 = (SmallMGC_Api_ConfigDigitmap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api_ConfigDigitmap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigDigitmap, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api_ConfigDigitmap" "', argument " "1"" of type '" "SmallMGC_Api_ConfigDigitmap *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigDigitmap * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SmallMGC_Api_ConfigDigitmap(void *obj) {
SmallMGC_Api_ConfigDigitmap *arg1 = (SmallMGC_Api_ConfigDigitmap *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_ConfigDigitmap_methods[] = {
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_ConfigDigitmap_attributes[] = {
    { "-m_digitmap",_wrap_SmallMGC_Api_ConfigDigitmap_m_digitmap_get, _wrap_SmallMGC_Api_ConfigDigitmap_m_digitmap_set},
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_ConfigDigitmap_bases[] = {0};
static const char * swig_SmallMGC_Api_ConfigDigitmap_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api_ConfigDigitmap = { "SmallMGC_Api_ConfigDigitmap", &SWIGTYPE_p_SmallMGC_Api_ConfigDigitmap,_wrap_new_SmallMGC_Api_ConfigDigitmap, swig_delete_SmallMGC_Api_ConfigDigitmap, swig_SmallMGC_Api_ConfigDigitmap_methods, swig_SmallMGC_Api_ConfigDigitmap_attributes, swig_SmallMGC_Api_ConfigDigitmap_bases,swig_SmallMGC_Api_ConfigDigitmap_base_names, &swig_module };
SWIGINTERN int
_wrap_SmallMGC_Api_ConfigSA_m_sa_enabled_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigSA *arg1 = (SmallMGC_Api_ConfigSA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigSA_m_sa_enabled_set self m_sa_enabled ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigSA_m_sa_enabled_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_ConfigSA_m_sa_enabled_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_sa_enabled = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigSA_m_sa_enabled_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigSA *arg1 = (SmallMGC_Api_ConfigSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigSA_m_sa_enabled_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigSA_m_sa_enabled_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp1);
  result = (int) ((arg1)->m_sa_enabled);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigSA_m_sa_timeout_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigSA *arg1 = (SmallMGC_Api_ConfigSA *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigSA_m_sa_timeout_set self m_sa_timeout ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigSA_m_sa_timeout_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_ConfigSA_m_sa_timeout_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_sa_timeout = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigSA_m_sa_timeout_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigSA *arg1 = (SmallMGC_Api_ConfigSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigSA_m_sa_timeout_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigSA_m_sa_timeout_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp1);
  result = (int) ((arg1)->m_sa_timeout);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigSA *arg1 = (SmallMGC_Api_ConfigSA *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_set self m_sa_mainMgcIpAddress ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_sa_mainMgcIpAddress,arg2,32*sizeof(char));
  else memset(arg1->m_sa_mainMgcIpAddress,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigSA *arg1 = (SmallMGC_Api_ConfigSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp1);
  result = (char *)(char *) ((arg1)->m_sa_mainMgcIpAddress);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigSA *arg1 = (SmallMGC_Api_ConfigSA *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_set self m_sa_mainMgcIpPort ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_sa_mainMgcIpPort,arg2,32*sizeof(char));
  else memset(arg1->m_sa_mainMgcIpPort,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigSA *arg1 = (SmallMGC_Api_ConfigSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp1);
  result = (char *)(char *) ((arg1)->m_sa_mainMgcIpPort);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigSA *arg1 = (SmallMGC_Api_ConfigSA *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_set self m_sa_mainMgcIpDomain ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_set" "', argument " "1"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_sa_mainMgcIpDomain,arg2,64*sizeof(char));
  else memset(arg1->m_sa_mainMgcIpDomain,0,64*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigSA *arg1 = (SmallMGC_Api_ConfigSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigSA, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_get" "', argument " "1"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp1);
  result = (char *)(char *) ((arg1)->m_sa_mainMgcIpDomain);
  {
    size_t size = 64;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SmallMGC_Api_ConfigSA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigSA *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api_ConfigSA ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api_ConfigSA *)new SmallMGC_Api_ConfigSA();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigSA,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api_ConfigSA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_ConfigSA *arg1 = (SmallMGC_Api_ConfigSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api_ConfigSA self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_ConfigSA, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api_ConfigSA" "', argument " "1"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SmallMGC_Api_ConfigSA(void *obj) {
SmallMGC_Api_ConfigSA *arg1 = (SmallMGC_Api_ConfigSA *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_ConfigSA_methods[] = {
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_ConfigSA_attributes[] = {
    { "-m_sa_enabled",_wrap_SmallMGC_Api_ConfigSA_m_sa_enabled_get, _wrap_SmallMGC_Api_ConfigSA_m_sa_enabled_set},
    { "-m_sa_timeout",_wrap_SmallMGC_Api_ConfigSA_m_sa_timeout_get, _wrap_SmallMGC_Api_ConfigSA_m_sa_timeout_set},
    { "-m_sa_mainMgcIpAddress",_wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_get, _wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_set},
    { "-m_sa_mainMgcIpPort",_wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_get, _wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_set},
    { "-m_sa_mainMgcIpDomain",_wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_get, _wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_set},
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_ConfigSA_bases[] = {0};
static const char * swig_SmallMGC_Api_ConfigSA_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api_ConfigSA = { "SmallMGC_Api_ConfigSA", &SWIGTYPE_p_SmallMGC_Api_ConfigSA,_wrap_new_SmallMGC_Api_ConfigSA, swig_delete_SmallMGC_Api_ConfigSA, swig_SmallMGC_Api_ConfigSA_methods, swig_SmallMGC_Api_ConfigSA_attributes, swig_SmallMGC_Api_ConfigSA_bases,swig_SmallMGC_Api_ConfigSA_base_names, &swig_module };
SWIGINTERN int
_wrap_SmallMGC_Api_Config_m_configIp_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Config *arg1 = (SmallMGC_Api_Config *) 0 ;
  SmallMGC_Api_ConfigIp *arg2 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Config_m_configIp_set self m_configIp ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Config_m_configIp_set" "', argument " "1"" of type '" "SmallMGC_Api_Config *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Config * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Config_m_configIp_set" "', argument " "2"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp2);
  if (arg1) (arg1)->m_configIp = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Config_m_configIp_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Config *arg1 = (SmallMGC_Api_Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_ConfigIp *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Config_m_configIp_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Config_m_configIp_get" "', argument " "1"" of type '" "SmallMGC_Api_Config *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Config * >(argp1);
  result = (SmallMGC_Api_ConfigIp *)& ((arg1)->m_configIp);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigIp,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Config_m_configGeneral_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Config *arg1 = (SmallMGC_Api_Config *) 0 ;
  SmallMGC_Api_ConfigGeneral *arg2 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Config_m_configGeneral_set self m_configGeneral ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Config_m_configGeneral_set" "', argument " "1"" of type '" "SmallMGC_Api_Config *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Config * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Config_m_configGeneral_set" "', argument " "2"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp2);
  if (arg1) (arg1)->m_configGeneral = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Config_m_configGeneral_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Config *arg1 = (SmallMGC_Api_Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_ConfigGeneral *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Config_m_configGeneral_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Config_m_configGeneral_get" "', argument " "1"" of type '" "SmallMGC_Api_Config *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Config * >(argp1);
  result = (SmallMGC_Api_ConfigGeneral *)& ((arg1)->m_configGeneral);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigGeneral,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Config_m_configDigitmap_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Config *arg1 = (SmallMGC_Api_Config *) 0 ;
  SmallMGC_Api_ConfigDigitmap *arg2 = (SmallMGC_Api_ConfigDigitmap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Config_m_configDigitmap_set self m_configDigitmap ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Config_m_configDigitmap_set" "', argument " "1"" of type '" "SmallMGC_Api_Config *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Config * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_ConfigDigitmap, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Config_m_configDigitmap_set" "', argument " "2"" of type '" "SmallMGC_Api_ConfigDigitmap *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_ConfigDigitmap * >(argp2);
  if (arg1) (arg1)->m_configDigitmap = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Config_m_configDigitmap_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Config *arg1 = (SmallMGC_Api_Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_ConfigDigitmap *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Config_m_configDigitmap_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Config_m_configDigitmap_get" "', argument " "1"" of type '" "SmallMGC_Api_Config *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Config * >(argp1);
  result = (SmallMGC_Api_ConfigDigitmap *)& ((arg1)->m_configDigitmap);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigDigitmap,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Config_m_configSA_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Config *arg1 = (SmallMGC_Api_Config *) 0 ;
  SmallMGC_Api_ConfigSA *arg2 = (SmallMGC_Api_ConfigSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Config_m_configSA_set self m_configSA ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Config_m_configSA_set" "', argument " "1"" of type '" "SmallMGC_Api_Config *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Config * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_ConfigSA, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Config_m_configSA_set" "', argument " "2"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp2);
  if (arg1) (arg1)->m_configSA = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Config_m_configSA_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Config *arg1 = (SmallMGC_Api_Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_ConfigSA *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Config_m_configSA_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Config, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Config_m_configSA_get" "', argument " "1"" of type '" "SmallMGC_Api_Config *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Config * >(argp1);
  result = (SmallMGC_Api_ConfigSA *)& ((arg1)->m_configSA);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigSA,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SmallMGC_Api_Config(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Config *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api_Config ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api_Config *)new SmallMGC_Api_Config();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_Config,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api_Config(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Config *arg1 = (SmallMGC_Api_Config *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api_Config self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Config, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api_Config" "', argument " "1"" of type '" "SmallMGC_Api_Config *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Config * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SmallMGC_Api_Config(void *obj) {
SmallMGC_Api_Config *arg1 = (SmallMGC_Api_Config *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_Config_methods[] = {
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_Config_attributes[] = {
    { "-m_configIp",_wrap_SmallMGC_Api_Config_m_configIp_get, _wrap_SmallMGC_Api_Config_m_configIp_set},
    { "-m_configGeneral",_wrap_SmallMGC_Api_Config_m_configGeneral_get, _wrap_SmallMGC_Api_Config_m_configGeneral_set},
    { "-m_configDigitmap",_wrap_SmallMGC_Api_Config_m_configDigitmap_get, _wrap_SmallMGC_Api_Config_m_configDigitmap_set},
    { "-m_configSA",_wrap_SmallMGC_Api_Config_m_configSA_get, _wrap_SmallMGC_Api_Config_m_configSA_set},
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_Config_bases[] = {0};
static const char * swig_SmallMGC_Api_Config_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api_Config = { "SmallMGC_Api_Config", &SWIGTYPE_p_SmallMGC_Api_Config,_wrap_new_SmallMGC_Api_Config, swig_delete_SmallMGC_Api_Config, swig_SmallMGC_Api_Config_methods, swig_SmallMGC_Api_Config_attributes, swig_SmallMGC_Api_Config_bases,swig_SmallMGC_Api_Config_base_names, &swig_module };
SWIGINTERN int
_wrap_SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayGeneral *arg1 = (SmallMGC_Api_GatewayGeneral *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_set self m_gatewayCallControlMode ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_set" "', argument " "1"" of type '" "SmallMGC_Api_GatewayGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_gatewayCallControlMode = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayGeneral *arg1 = (SmallMGC_Api_GatewayGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_get" "', argument " "1"" of type '" "SmallMGC_Api_GatewayGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayGeneral * >(argp1);
  result = (int) ((arg1)->m_gatewayCallControlMode);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayGeneral *arg1 = (SmallMGC_Api_GatewayGeneral *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_set self m_gatewayItPackageTimeout ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_set" "', argument " "1"" of type '" "SmallMGC_Api_GatewayGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_gatewayItPackageTimeout = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayGeneral *arg1 = (SmallMGC_Api_GatewayGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_get" "', argument " "1"" of type '" "SmallMGC_Api_GatewayGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayGeneral * >(argp1);
  result = (int) ((arg1)->m_gatewayItPackageTimeout);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayGeneral *arg1 = (SmallMGC_Api_GatewayGeneral *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_set self m_gatewayItPackageEnabled ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_set" "', argument " "1"" of type '" "SmallMGC_Api_GatewayGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayGeneral * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_gatewayItPackageEnabled = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayGeneral *arg1 = (SmallMGC_Api_GatewayGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayGeneral, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_get" "', argument " "1"" of type '" "SmallMGC_Api_GatewayGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayGeneral * >(argp1);
  result = (int) ((arg1)->m_gatewayItPackageEnabled);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SmallMGC_Api_GatewayGeneral(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayGeneral *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api_GatewayGeneral ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api_GatewayGeneral *)new SmallMGC_Api_GatewayGeneral();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_GatewayGeneral,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api_GatewayGeneral(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayGeneral *arg1 = (SmallMGC_Api_GatewayGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api_GatewayGeneral self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayGeneral, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api_GatewayGeneral" "', argument " "1"" of type '" "SmallMGC_Api_GatewayGeneral *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayGeneral * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SmallMGC_Api_GatewayGeneral(void *obj) {
SmallMGC_Api_GatewayGeneral *arg1 = (SmallMGC_Api_GatewayGeneral *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_GatewayGeneral_methods[] = {
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_GatewayGeneral_attributes[] = {
    { "-m_gatewayCallControlMode",_wrap_SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_get, _wrap_SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_set},
    { "-m_gatewayItPackageTimeout",_wrap_SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_get, _wrap_SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_set},
    { "-m_gatewayItPackageEnabled",_wrap_SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_get, _wrap_SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_set},
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_GatewayGeneral_bases[] = {0};
static const char * swig_SmallMGC_Api_GatewayGeneral_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api_GatewayGeneral = { "SmallMGC_Api_GatewayGeneral", &SWIGTYPE_p_SmallMGC_Api_GatewayGeneral,_wrap_new_SmallMGC_Api_GatewayGeneral, swig_delete_SmallMGC_Api_GatewayGeneral, swig_SmallMGC_Api_GatewayGeneral_methods, swig_SmallMGC_Api_GatewayGeneral_attributes, swig_SmallMGC_Api_GatewayGeneral_bases,swig_SmallMGC_Api_GatewayGeneral_base_names, &swig_module };
SWIGINTERN int
_wrap_SmallMGC_Api_Gateway_m_gatewayIp_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Gateway *arg1 = (SmallMGC_Api_Gateway *) 0 ;
  SmallMGC_Api_ConfigIp *arg2 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Gateway_m_gatewayIp_set self m_gatewayIp ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Gateway_m_gatewayIp_set" "', argument " "1"" of type '" "SmallMGC_Api_Gateway *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Gateway * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Gateway_m_gatewayIp_set" "', argument " "2"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp2);
  if (arg1) (arg1)->m_gatewayIp = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Gateway_m_gatewayIp_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Gateway *arg1 = (SmallMGC_Api_Gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_ConfigIp *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Gateway_m_gatewayIp_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Gateway_m_gatewayIp_get" "', argument " "1"" of type '" "SmallMGC_Api_Gateway *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Gateway * >(argp1);
  result = (SmallMGC_Api_ConfigIp *)& ((arg1)->m_gatewayIp);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigIp,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Gateway_m_gatewayGeneral_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Gateway *arg1 = (SmallMGC_Api_Gateway *) 0 ;
  SmallMGC_Api_GatewayGeneral *arg2 = (SmallMGC_Api_GatewayGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Gateway_m_gatewayGeneral_set self m_gatewayGeneral ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Gateway_m_gatewayGeneral_set" "', argument " "1"" of type '" "SmallMGC_Api_Gateway *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Gateway * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_GatewayGeneral, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Gateway_m_gatewayGeneral_set" "', argument " "2"" of type '" "SmallMGC_Api_GatewayGeneral *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_GatewayGeneral * >(argp2);
  if (arg1) (arg1)->m_gatewayGeneral = *arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Gateway_m_gatewayGeneral_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Gateway *arg1 = (SmallMGC_Api_Gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_GatewayGeneral *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Gateway_m_gatewayGeneral_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Gateway, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Gateway_m_gatewayGeneral_get" "', argument " "1"" of type '" "SmallMGC_Api_Gateway *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Gateway * >(argp1);
  result = (SmallMGC_Api_GatewayGeneral *)& ((arg1)->m_gatewayGeneral);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_GatewayGeneral,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SmallMGC_Api_Gateway(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Gateway *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api_Gateway ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api_Gateway *)new SmallMGC_Api_Gateway();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_Gateway,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api_Gateway(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Gateway *arg1 = (SmallMGC_Api_Gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api_Gateway self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Gateway, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api_Gateway" "', argument " "1"" of type '" "SmallMGC_Api_Gateway *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Gateway * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SmallMGC_Api_Gateway(void *obj) {
SmallMGC_Api_Gateway *arg1 = (SmallMGC_Api_Gateway *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_Gateway_methods[] = {
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_Gateway_attributes[] = {
    { "-m_gatewayIp",_wrap_SmallMGC_Api_Gateway_m_gatewayIp_get, _wrap_SmallMGC_Api_Gateway_m_gatewayIp_set},
    { "-m_gatewayGeneral",_wrap_SmallMGC_Api_Gateway_m_gatewayGeneral_get, _wrap_SmallMGC_Api_Gateway_m_gatewayGeneral_set},
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_Gateway_bases[] = {0};
static const char * swig_SmallMGC_Api_Gateway_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api_Gateway = { "SmallMGC_Api_Gateway", &SWIGTYPE_p_SmallMGC_Api_Gateway,_wrap_new_SmallMGC_Api_Gateway, swig_delete_SmallMGC_Api_Gateway, swig_SmallMGC_Api_Gateway_methods, swig_SmallMGC_Api_Gateway_attributes, swig_SmallMGC_Api_Gateway_bases,swig_SmallMGC_Api_Gateway_base_names, &swig_module };
SWIGINTERN int
_wrap_SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayStatus *arg1 = (SmallMGC_Api_GatewayStatus *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_set self m_gatewayIpAddress ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_set" "', argument " "1"" of type '" "SmallMGC_Api_GatewayStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayStatus * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_gatewayIpAddress,arg2,32*sizeof(char));
  else memset(arg1->m_gatewayIpAddress,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayStatus *arg1 = (SmallMGC_Api_GatewayStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_get" "', argument " "1"" of type '" "SmallMGC_Api_GatewayStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayStatus * >(argp1);
  result = (char *)(char *) ((arg1)->m_gatewayIpAddress);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayStatus_m_h248State_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayStatus *arg1 = (SmallMGC_Api_GatewayStatus *) 0 ;
  SmallMGC_Api_GatewayH248State arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_GatewayStatus_m_h248State_set self m_h248State ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayStatus_m_h248State_set" "', argument " "1"" of type '" "SmallMGC_Api_GatewayStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayStatus * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_GatewayStatus_m_h248State_set" "', argument " "2"" of type '" "SmallMGC_Api_GatewayH248State""'");
  } 
  arg2 = static_cast< SmallMGC_Api_GatewayH248State >(val2);
  if (arg1) (arg1)->m_h248State = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayStatus_m_h248State_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayStatus *arg1 = (SmallMGC_Api_GatewayStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_GatewayH248State result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_GatewayStatus_m_h248State_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayStatus_m_h248State_get" "', argument " "1"" of type '" "SmallMGC_Api_GatewayStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayStatus * >(argp1);
  result = (SmallMGC_Api_GatewayH248State) ((arg1)->m_h248State);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayStatus_m_iuaState_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayStatus *arg1 = (SmallMGC_Api_GatewayStatus *) 0 ;
  SmallMGC_Api_GatewayIUAState arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_GatewayStatus_m_iuaState_set self m_iuaState ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayStatus_m_iuaState_set" "', argument " "1"" of type '" "SmallMGC_Api_GatewayStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayStatus * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_GatewayStatus_m_iuaState_set" "', argument " "2"" of type '" "SmallMGC_Api_GatewayIUAState""'");
  } 
  arg2 = static_cast< SmallMGC_Api_GatewayIUAState >(val2);
  if (arg1) (arg1)->m_iuaState = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayStatus_m_iuaState_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayStatus *arg1 = (SmallMGC_Api_GatewayStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_GatewayIUAState result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_GatewayStatus_m_iuaState_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayStatus_m_iuaState_get" "', argument " "1"" of type '" "SmallMGC_Api_GatewayStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayStatus * >(argp1);
  result = (SmallMGC_Api_GatewayIUAState) ((arg1)->m_iuaState);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayStatus_m_callsTotal_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayStatus *arg1 = (SmallMGC_Api_GatewayStatus *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_GatewayStatus_m_callsTotal_set self m_callsTotal ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayStatus_m_callsTotal_set" "', argument " "1"" of type '" "SmallMGC_Api_GatewayStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayStatus * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_GatewayStatus_m_callsTotal_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_callsTotal = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayStatus_m_callsTotal_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayStatus *arg1 = (SmallMGC_Api_GatewayStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_GatewayStatus_m_callsTotal_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayStatus_m_callsTotal_get" "', argument " "1"" of type '" "SmallMGC_Api_GatewayStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayStatus * >(argp1);
  result = (int) ((arg1)->m_callsTotal);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayStatus_m_callOngoing_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayStatus *arg1 = (SmallMGC_Api_GatewayStatus *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_GatewayStatus_m_callOngoing_set self m_callOngoing ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayStatus_m_callOngoing_set" "', argument " "1"" of type '" "SmallMGC_Api_GatewayStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayStatus * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_GatewayStatus_m_callOngoing_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_callOngoing = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_GatewayStatus_m_callOngoing_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayStatus *arg1 = (SmallMGC_Api_GatewayStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_GatewayStatus_m_callOngoing_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_GatewayStatus_m_callOngoing_get" "', argument " "1"" of type '" "SmallMGC_Api_GatewayStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayStatus * >(argp1);
  result = (int) ((arg1)->m_callOngoing);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SmallMGC_Api_GatewayStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayStatus *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api_GatewayStatus ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api_GatewayStatus *)new SmallMGC_Api_GatewayStatus();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_GatewayStatus,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api_GatewayStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_GatewayStatus *arg1 = (SmallMGC_Api_GatewayStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api_GatewayStatus self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_GatewayStatus, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api_GatewayStatus" "', argument " "1"" of type '" "SmallMGC_Api_GatewayStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_GatewayStatus * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SmallMGC_Api_GatewayStatus(void *obj) {
SmallMGC_Api_GatewayStatus *arg1 = (SmallMGC_Api_GatewayStatus *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_GatewayStatus_methods[] = {
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_GatewayStatus_attributes[] = {
    { "-m_gatewayIpAddress",_wrap_SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_get, _wrap_SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_set},
    { "-m_h248State",_wrap_SmallMGC_Api_GatewayStatus_m_h248State_get, _wrap_SmallMGC_Api_GatewayStatus_m_h248State_set},
    { "-m_iuaState",_wrap_SmallMGC_Api_GatewayStatus_m_iuaState_get, _wrap_SmallMGC_Api_GatewayStatus_m_iuaState_set},
    { "-m_callsTotal",_wrap_SmallMGC_Api_GatewayStatus_m_callsTotal_get, _wrap_SmallMGC_Api_GatewayStatus_m_callsTotal_set},
    { "-m_callOngoing",_wrap_SmallMGC_Api_GatewayStatus_m_callOngoing_get, _wrap_SmallMGC_Api_GatewayStatus_m_callOngoing_set},
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_GatewayStatus_bases[] = {0};
static const char * swig_SmallMGC_Api_GatewayStatus_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api_GatewayStatus = { "SmallMGC_Api_GatewayStatus", &SWIGTYPE_p_SmallMGC_Api_GatewayStatus,_wrap_new_SmallMGC_Api_GatewayStatus, swig_delete_SmallMGC_Api_GatewayStatus, swig_SmallMGC_Api_GatewayStatus_methods, swig_SmallMGC_Api_GatewayStatus_attributes, swig_SmallMGC_Api_GatewayStatus_bases,swig_SmallMGC_Api_GatewayStatus_base_names, &swig_module };
SWIGINTERN int
_wrap_SmallMGC_Api_Status_m_callsTotal_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Status *arg1 = (SmallMGC_Api_Status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Status_m_callsTotal_set self m_callsTotal ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Status_m_callsTotal_set" "', argument " "1"" of type '" "SmallMGC_Api_Status *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Status * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_Status_m_callsTotal_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_callsTotal = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Status_m_callsTotal_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Status *arg1 = (SmallMGC_Api_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Status_m_callsTotal_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Status_m_callsTotal_get" "', argument " "1"" of type '" "SmallMGC_Api_Status *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Status * >(argp1);
  result = (int) ((arg1)->m_callsTotal);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Status_m_callOngoing_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Status *arg1 = (SmallMGC_Api_Status *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Status_m_callOngoing_set self m_callOngoing ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Status_m_callOngoing_set" "', argument " "1"" of type '" "SmallMGC_Api_Status *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Status * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_Status_m_callOngoing_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_callOngoing = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Status_m_callOngoing_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Status *arg1 = (SmallMGC_Api_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Status_m_callOngoing_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Status, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Status_m_callOngoing_get" "', argument " "1"" of type '" "SmallMGC_Api_Status *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Status * >(argp1);
  result = (int) ((arg1)->m_callOngoing);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SmallMGC_Api_Status(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Status *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api_Status ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api_Status *)new SmallMGC_Api_Status();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_Status,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api_Status(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Status *arg1 = (SmallMGC_Api_Status *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api_Status self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Status, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api_Status" "', argument " "1"" of type '" "SmallMGC_Api_Status *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Status * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SmallMGC_Api_Status(void *obj) {
SmallMGC_Api_Status *arg1 = (SmallMGC_Api_Status *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_Status_methods[] = {
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_Status_attributes[] = {
    { "-m_callsTotal",_wrap_SmallMGC_Api_Status_m_callsTotal_get, _wrap_SmallMGC_Api_Status_m_callsTotal_set},
    { "-m_callOngoing",_wrap_SmallMGC_Api_Status_m_callOngoing_get, _wrap_SmallMGC_Api_Status_m_callOngoing_set},
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_Status_bases[] = {0};
static const char * swig_SmallMGC_Api_Status_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api_Status = { "SmallMGC_Api_Status", &SWIGTYPE_p_SmallMGC_Api_Status,_wrap_new_SmallMGC_Api_Status, swig_delete_SmallMGC_Api_Status, swig_SmallMGC_Api_Status_methods, swig_SmallMGC_Api_Status_attributes, swig_SmallMGC_Api_Status_bases,swig_SmallMGC_Api_Status_base_names, &swig_module };
SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_gatewayIpAddress_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Subscriber_m_gatewayIpAddress_set self m_gatewayIpAddress ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_gatewayIpAddress_set" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Subscriber_m_gatewayIpAddress_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_gatewayIpAddress,arg2,32*sizeof(char));
  else memset(arg1->m_gatewayIpAddress,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_gatewayIpAddress_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Subscriber_m_gatewayIpAddress_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_gatewayIpAddress_get" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  result = (char *)(char *) ((arg1)->m_gatewayIpAddress);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberName_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Subscriber_m_subscriberName_set self m_subscriberName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberName_set" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Subscriber_m_subscriberName_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_subscriberName,arg2,32*sizeof(char));
  else memset(arg1->m_subscriberName,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberName_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Subscriber_m_subscriberName_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberName_get" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  result = (char *)(char *) ((arg1)->m_subscriberName);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberType_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  SmallMGC_Api_SubscriberTypes arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Subscriber_m_subscriberType_set self m_subscriberType ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberType_set" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_Subscriber_m_subscriberType_set" "', argument " "2"" of type '" "SmallMGC_Api_SubscriberTypes""'");
  } 
  arg2 = static_cast< SmallMGC_Api_SubscriberTypes >(val2);
  if (arg1) (arg1)->m_subscriberType = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberType_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_SubscriberTypes result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Subscriber_m_subscriberType_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberType_get" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  result = (SmallMGC_Api_SubscriberTypes) ((arg1)->m_subscriberType);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberTermination_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  char (*arg2)[32] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Subscriber_m_subscriberTermination_set self m_subscriberTermination ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberTermination_set" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_a_32__char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Subscriber_m_subscriberTermination_set" "', argument " "2"" of type '" "char [2][32]""'"); 
  } 
  arg2 = reinterpret_cast< char (*)[32] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)32; ++jj) arg1->m_subscriberTermination[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_subscriberTermination""' of type '""char [2][32]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_subscriberTermination""' of type '""char [2][32]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberTermination_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char (*result)[32] = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Subscriber_m_subscriberTermination_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberTermination_get" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  result = (char (*)[32])(char (*)[32]) ((arg1)->m_subscriberTermination);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_a_32__char,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberNumber_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Subscriber_m_subscriberNumber_set self m_subscriberNumber ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberNumber_set" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Subscriber_m_subscriberNumber_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_subscriberNumber,arg2,32*sizeof(char));
  else memset(arg1->m_subscriberNumber,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberNumber_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Subscriber_m_subscriberNumber_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberNumber_get" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  result = (char *)(char *) ((arg1)->m_subscriberNumber);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_set self m_subscriberNumberRangeStart ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_set" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_subscriberNumberRangeStart,arg2,32*sizeof(char));
  else memset(arg1->m_subscriberNumberRangeStart,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_get" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  result = (char *)(char *) ((arg1)->m_subscriberNumberRangeStart);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_set self m_subscriberNumberRangeEnd ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_set" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_subscriberNumberRangeEnd,arg2,32*sizeof(char));
  else memset(arg1->m_subscriberNumberRangeEnd,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_get" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  result = (char *)(char *) ((arg1)->m_subscriberNumberRangeEnd);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberDomainName_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Subscriber_m_subscriberDomainName_set self m_subscriberDomainName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberDomainName_set" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Subscriber_m_subscriberDomainName_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_subscriberDomainName,arg2,64*sizeof(char));
  else memset(arg1->m_subscriberDomainName,0,64*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberDomainName_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Subscriber_m_subscriberDomainName_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberDomainName_get" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  result = (char *)(char *) ((arg1)->m_subscriberDomainName);
  {
    size_t size = 64;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberIuaId_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Subscriber_m_subscriberIuaId_set self m_subscriberIuaId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberIuaId_set" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_Subscriber_m_subscriberIuaId_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_subscriberIuaId,arg2,32*sizeof(char));
  else memset(arg1->m_subscriberIuaId,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberIuaId_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Subscriber_m_subscriberIuaId_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberIuaId_get" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  result = (char *)(char *) ((arg1)->m_subscriberIuaId);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberIuaInt_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_Subscriber_m_subscriberIuaInt_set self m_subscriberIuaInt ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberIuaInt_set" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_Subscriber_m_subscriberIuaInt_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_subscriberIuaInt = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_Subscriber_m_subscriberIuaInt_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_Subscriber_m_subscriberIuaInt_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_Subscriber_m_subscriberIuaInt_get" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  result = (int) ((arg1)->m_subscriberIuaInt);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SmallMGC_Api_Subscriber(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api_Subscriber ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api_Subscriber *)new SmallMGC_Api_Subscriber();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_Subscriber,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api_Subscriber(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api_Subscriber self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_Subscriber, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api_Subscriber" "', argument " "1"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SmallMGC_Api_Subscriber(void *obj) {
SmallMGC_Api_Subscriber *arg1 = (SmallMGC_Api_Subscriber *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_Subscriber_methods[] = {
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_Subscriber_attributes[] = {
    { "-m_gatewayIpAddress",_wrap_SmallMGC_Api_Subscriber_m_gatewayIpAddress_get, _wrap_SmallMGC_Api_Subscriber_m_gatewayIpAddress_set},
    { "-m_subscriberName",_wrap_SmallMGC_Api_Subscriber_m_subscriberName_get, _wrap_SmallMGC_Api_Subscriber_m_subscriberName_set},
    { "-m_subscriberType",_wrap_SmallMGC_Api_Subscriber_m_subscriberType_get, _wrap_SmallMGC_Api_Subscriber_m_subscriberType_set},
    { "-m_subscriberTermination",_wrap_SmallMGC_Api_Subscriber_m_subscriberTermination_get, _wrap_SmallMGC_Api_Subscriber_m_subscriberTermination_set},
    { "-m_subscriberNumber",_wrap_SmallMGC_Api_Subscriber_m_subscriberNumber_get, _wrap_SmallMGC_Api_Subscriber_m_subscriberNumber_set},
    { "-m_subscriberNumberRangeStart",_wrap_SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_get, _wrap_SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_set},
    { "-m_subscriberNumberRangeEnd",_wrap_SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_get, _wrap_SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_set},
    { "-m_subscriberDomainName",_wrap_SmallMGC_Api_Subscriber_m_subscriberDomainName_get, _wrap_SmallMGC_Api_Subscriber_m_subscriberDomainName_set},
    { "-m_subscriberIuaId",_wrap_SmallMGC_Api_Subscriber_m_subscriberIuaId_get, _wrap_SmallMGC_Api_Subscriber_m_subscriberIuaId_set},
    { "-m_subscriberIuaInt",_wrap_SmallMGC_Api_Subscriber_m_subscriberIuaInt_get, _wrap_SmallMGC_Api_Subscriber_m_subscriberIuaInt_set},
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_Subscriber_bases[] = {0};
static const char * swig_SmallMGC_Api_Subscriber_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api_Subscriber = { "SmallMGC_Api_Subscriber", &SWIGTYPE_p_SmallMGC_Api_Subscriber,_wrap_new_SmallMGC_Api_Subscriber, swig_delete_SmallMGC_Api_Subscriber, swig_SmallMGC_Api_Subscriber_methods, swig_SmallMGC_Api_Subscriber_attributes, swig_SmallMGC_Api_Subscriber_bases,swig_SmallMGC_Api_Subscriber_base_names, &swig_module };
SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_set self m_gatewayIpAddress ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_set" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_gatewayIpAddress,arg2,32*sizeof(char));
  else memset(arg1->m_gatewayIpAddress,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_get" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  result = (char *)(char *) ((arg1)->m_gatewayIpAddress);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberTermination_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  char (*arg2)[32] ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_SubscriberStatus_m_subscriberTermination_set self m_subscriberTermination ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberTermination_set" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_a_32__char, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberTermination_set" "', argument " "2"" of type '" "char [2][32]""'"); 
  } 
  arg2 = reinterpret_cast< char (*)[32] >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) {
        if (arg2[ii]) {
          size_t jj = 0;
          for (; jj < (size_t)32; ++jj) arg1->m_subscriberTermination[ii][jj] = arg2[ii][jj];
        } else {
          SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_subscriberTermination""' of type '""char [2][32]""'");
        }
      }
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_subscriberTermination""' of type '""char [2][32]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberTermination_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char (*result)[32] = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_SubscriberStatus_m_subscriberTermination_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberTermination_get" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  result = (char (*)[32])(char (*)[32]) ((arg1)->m_subscriberTermination);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_a_32__char,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberState_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  SmallMGC_Api_SubscriberH248State *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_SubscriberStatus_m_subscriberState_set self m_subscriberState ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberState_set" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_SubscriberH248State, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberState_set" "', argument " "2"" of type '" "SmallMGC_Api_SubscriberH248State [2]""'"); 
  } 
  arg2 = reinterpret_cast< SmallMGC_Api_SubscriberH248State * >(argp2);
  {
    if (arg2) {
      size_t ii = 0;
      for (; ii < (size_t)2; ++ii) arg1->m_subscriberState[ii] = arg2[ii];
    } else {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in variable '""m_subscriberState""' of type '""SmallMGC_Api_SubscriberH248State [2]""'");
    }
  }
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberState_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_SubscriberH248State *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_SubscriberStatus_m_subscriberState_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberState_get" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  result = (SmallMGC_Api_SubscriberH248State *)(SmallMGC_Api_SubscriberH248State *) ((arg1)->m_subscriberState);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_SubscriberH248State,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[64] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_set self m_subscriberDomainName ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_set" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 64);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_set" "', argument " "2"" of type '" "char [64]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_subscriberDomainName,arg2,64*sizeof(char));
  else memset(arg1->m_subscriberDomainName,0,64*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_get" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  result = (char *)(char *) ((arg1)->m_subscriberDomainName);
  {
    size_t size = 64;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  char *arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char temp2[32] ;
  int res2 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_set self m_subscriberIuaId ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_set" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  res2 = SWIG_AsCharArray(objv[2], temp2, 32);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_set" "', argument " "2"" of type '" "char [32]""'");
  }
  arg2 = reinterpret_cast< char * >(temp2);
  if (arg2) memcpy(arg1->m_subscriberIuaId,arg2,32*sizeof(char));
  else memset(arg1->m_subscriberIuaId,0,32*sizeof(char));
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  char *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_get" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  result = (char *)(char *) ((arg1)->m_subscriberIuaId);
  {
    size_t size = 32;
    
    while (size && (result[size - 1] == '\0')) --size;
    
    Tcl_SetObjResult(interp,SWIG_FromCharPtrAndSize(result, size));
  }
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_set self m_subscriberIuaInt ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_set" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_subscriberIuaInt = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_get" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  result = (int) ((arg1)->m_subscriberIuaInt);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_callsTotal_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_SubscriberStatus_m_callsTotal_set self m_callsTotal ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_callsTotal_set" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_SubscriberStatus_m_callsTotal_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_callsTotal = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_callsTotal_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_SubscriberStatus_m_callsTotal_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_callsTotal_get" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  result = (int) ((arg1)->m_callsTotal);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_callOngoing_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_SubscriberStatus_m_callOngoing_set self m_callOngoing ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_callOngoing_set" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  ecode2 = SWIG_AsVal_int SWIG_TCL_CALL_ARGS_2(objv[2], &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SmallMGC_Api_SubscriberStatus_m_callOngoing_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->m_callOngoing = arg2;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_SubscriberStatus_m_callOngoing_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_SubscriberStatus_m_callOngoing_get self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_SubscriberStatus_m_callOngoing_get" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  result = (int) ((arg1)->m_callOngoing);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_new_SmallMGC_Api_SubscriberStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api_SubscriberStatus ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api_SubscriberStatus *)new SmallMGC_Api_SubscriberStatus();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_SubscriberStatus,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api_SubscriberStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api_SubscriberStatus self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api_SubscriberStatus" "', argument " "1"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN void swig_delete_SmallMGC_Api_SubscriberStatus(void *obj) {
SmallMGC_Api_SubscriberStatus *arg1 = (SmallMGC_Api_SubscriberStatus *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_SubscriberStatus_methods[] = {
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_SubscriberStatus_attributes[] = {
    { "-m_gatewayIpAddress",_wrap_SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_get, _wrap_SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_set},
    { "-m_subscriberTermination",_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberTermination_get, _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberTermination_set},
    { "-m_subscriberState",_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberState_get, _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberState_set},
    { "-m_subscriberDomainName",_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_get, _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_set},
    { "-m_subscriberIuaId",_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_get, _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_set},
    { "-m_subscriberIuaInt",_wrap_SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_get, _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_set},
    { "-m_callsTotal",_wrap_SmallMGC_Api_SubscriberStatus_m_callsTotal_get, _wrap_SmallMGC_Api_SubscriberStatus_m_callsTotal_set},
    { "-m_callOngoing",_wrap_SmallMGC_Api_SubscriberStatus_m_callOngoing_get, _wrap_SmallMGC_Api_SubscriberStatus_m_callOngoing_set},
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_SubscriberStatus_bases[] = {0};
static const char * swig_SmallMGC_Api_SubscriberStatus_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api_SubscriberStatus = { "SmallMGC_Api_SubscriberStatus", &SWIGTYPE_p_SmallMGC_Api_SubscriberStatus,_wrap_new_SmallMGC_Api_SubscriberStatus, swig_delete_SmallMGC_Api_SubscriberStatus, swig_SmallMGC_Api_SubscriberStatus_methods, swig_SmallMGC_Api_SubscriberStatus_attributes, swig_SmallMGC_Api_SubscriberStatus_bases,swig_SmallMGC_Api_SubscriberStatus_base_names, &swig_module };
SWIGINTERN int
_wrap_new_SmallMGC_Api(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,":new_SmallMGC_Api ") == TCL_ERROR) SWIG_fail;
  result = (SmallMGC_Api *)new SmallMGC_Api();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_addGateway(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_Gateway *arg2 = (SmallMGC_Api_Gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_addGateway self gateway ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_addGateway" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_Gateway, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_addGateway" "', argument " "2"" of type '" "SmallMGC_Api_Gateway *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_Gateway * >(argp2);
  result = (int)(arg1)->addGateway(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_removeGateway(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_Gateway *arg2 = (SmallMGC_Api_Gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_removeGateway self gateway ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_removeGateway" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_Gateway, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_removeGateway" "', argument " "2"" of type '" "SmallMGC_Api_Gateway *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_Gateway * >(argp2);
  result = (int)(arg1)->removeGateway(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_blockGateway(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_Gateway *arg2 = (SmallMGC_Api_Gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_blockGateway self gateway ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_blockGateway" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_Gateway, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_blockGateway" "', argument " "2"" of type '" "SmallMGC_Api_Gateway *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_Gateway * >(argp2);
  result = (int)(arg1)->blockGateway(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_addSubscriber(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_Subscriber *arg2 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_addSubscriber self subscriber ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_addSubscriber" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_addSubscriber" "', argument " "2"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp2);
  result = (int)(arg1)->addSubscriber(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_removeSubscriber(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_Subscriber *arg2 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_removeSubscriber self subscriber ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_removeSubscriber" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_removeSubscriber" "', argument " "2"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp2);
  result = (int)(arg1)->removeSubscriber(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_blockSubscriber(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_Subscriber *arg2 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_blockSubscriber self subscriber ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_blockSubscriber" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_blockSubscriber" "', argument " "2"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp2);
  result = (int)(arg1)->blockSubscriber(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_unblockSubscriber(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_Subscriber *arg2 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_unblockSubscriber self subscriber ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_unblockSubscriber" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_unblockSubscriber" "', argument " "2"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp2);
  result = (int)(arg1)->unblockSubscriber(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_shutdownSubscriber(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_Subscriber *arg2 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_shutdownSubscriber self subscriber ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_shutdownSubscriber" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_shutdownSubscriber" "', argument " "2"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp2);
  result = (int)(arg1)->shutdownSubscriber(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_getSubscriberStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_Subscriber *arg2 = (SmallMGC_Api_Subscriber *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SmallMGC_Api_SubscriberStatus *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_getSubscriberStatus self subscriber ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_getSubscriberStatus" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_Subscriber, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_getSubscriberStatus" "', argument " "2"" of type '" "SmallMGC_Api_Subscriber *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_Subscriber * >(argp2);
  result = (SmallMGC_Api_SubscriberStatus *)(arg1)->getSubscriberStatus(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_SubscriberStatus,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_setSubscriberStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_SubscriberStatus *arg2 = (SmallMGC_Api_SubscriberStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_setSubscriberStatus self status ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_setSubscriberStatus" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_SubscriberStatus, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_setSubscriberStatus" "', argument " "2"" of type '" "SmallMGC_Api_SubscriberStatus *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_SubscriberStatus * >(argp2);
  result = (int)(arg1)->setSubscriberStatus(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_setGatewayStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_GatewayStatus *arg2 = (SmallMGC_Api_GatewayStatus *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_setGatewayStatus self status ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_setGatewayStatus" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_GatewayStatus, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_setGatewayStatus" "', argument " "2"" of type '" "SmallMGC_Api_GatewayStatus *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_GatewayStatus * >(argp2);
  result = (int)(arg1)->setGatewayStatus(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_getGatewayStatus(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_Gateway *arg2 = (SmallMGC_Api_Gateway *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  SmallMGC_Api_GatewayStatus *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_getGatewayStatus self subscriber ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_getGatewayStatus" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_Gateway, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_getGatewayStatus" "', argument " "2"" of type '" "SmallMGC_Api_Gateway *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_Gateway * >(argp2);
  result = (SmallMGC_Api_GatewayStatus *)(arg1)->getGatewayStatus(arg2);
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_GatewayStatus,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_subscriberAlarmSet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_SubscriberAlarms *arg2 = (SmallMGC_Api_SubscriberAlarms *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_subscriberAlarmSet self subscriberAlarms ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_subscriberAlarmSet" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_SubscriberAlarms, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_subscriberAlarmSet" "', argument " "2"" of type '" "SmallMGC_Api_SubscriberAlarms *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_SubscriberAlarms * >(argp2);
  result = (int)(arg1)->subscriberAlarmSet(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_subscriberAlarmClear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_SubscriberAlarms *arg2 = (SmallMGC_Api_SubscriberAlarms *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_subscriberAlarmClear self subscriberAlarms ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_subscriberAlarmClear" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_SubscriberAlarms, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_subscriberAlarmClear" "', argument " "2"" of type '" "SmallMGC_Api_SubscriberAlarms *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_SubscriberAlarms * >(argp2);
  result = (int)(arg1)->subscriberAlarmClear(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_gatewayAlarmSet(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_GatewayAlarms *arg2 = (SmallMGC_Api_GatewayAlarms *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_gatewayAlarmSet self gatewayAlarms ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_gatewayAlarmSet" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_GatewayAlarms, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_gatewayAlarmSet" "', argument " "2"" of type '" "SmallMGC_Api_GatewayAlarms *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_GatewayAlarms * >(argp2);
  result = (int)(arg1)->gatewayAlarmSet(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_gatewayAlarmClear(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_GatewayAlarms *arg2 = (SmallMGC_Api_GatewayAlarms *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_gatewayAlarmClear self gatewayAlarms ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_gatewayAlarmClear" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_GatewayAlarms, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_gatewayAlarmClear" "', argument " "2"" of type '" "SmallMGC_Api_GatewayAlarms *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_GatewayAlarms * >(argp2);
  result = (int)(arg1)->gatewayAlarmClear(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_delete_SmallMGC_Api(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:delete_SmallMGC_Api self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SmallMGC_Api" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  delete arg1;
  
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_setConfigSA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_ConfigSA *arg2 = (SmallMGC_Api_ConfigSA *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_setConfigSA self configSA ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_setConfigSA" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_ConfigSA, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_setConfigSA" "', argument " "2"" of type '" "SmallMGC_Api_ConfigSA *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_ConfigSA * >(argp2);
  result = (int)(arg1)->setConfigSA(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_setConfigDigitmap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_ConfigDigitmap *arg2 = (SmallMGC_Api_ConfigDigitmap *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_setConfigDigitmap self configDigitmap ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_setConfigDigitmap" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_ConfigDigitmap, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_setConfigDigitmap" "', argument " "2"" of type '" "SmallMGC_Api_ConfigDigitmap *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_ConfigDigitmap * >(argp2);
  result = (int)(arg1)->setConfigDigitmap(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_setConfigGeneral(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_ConfigGeneral *arg2 = (SmallMGC_Api_ConfigGeneral *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_setConfigGeneral self configGeneral ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_setConfigGeneral" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_ConfigGeneral, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_setConfigGeneral" "', argument " "2"" of type '" "SmallMGC_Api_ConfigGeneral *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_ConfigGeneral * >(argp2);
  result = (int)(arg1)->setConfigGeneral(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_setConfigIp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_ConfigIp *arg2 = (SmallMGC_Api_ConfigIp *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_setConfigIp self config ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_setConfigIp" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_ConfigIp, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_setConfigIp" "', argument " "2"" of type '" "SmallMGC_Api_ConfigIp *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_ConfigIp * >(argp2);
  result = (int)(arg1)->setConfigIp(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_getConfigSA(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_ConfigSA *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_getConfigSA self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_getConfigSA" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  result = (SmallMGC_Api_ConfigSA *)(arg1)->getConfigSA();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigSA,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_getConfigDigitmap(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_ConfigDigitmap *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_getConfigDigitmap self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_getConfigDigitmap" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  result = (SmallMGC_Api_ConfigDigitmap *)(arg1)->getConfigDigitmap();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigDigitmap,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_getConfigGeneral(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_ConfigGeneral *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_getConfigGeneral self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_getConfigGeneral" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  result = (SmallMGC_Api_ConfigGeneral *)(arg1)->getConfigGeneral();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigGeneral,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_getConfigIp(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  SmallMGC_Api_ConfigIp *result = 0 ;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_getConfigIp self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_getConfigIp" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  result = (SmallMGC_Api_ConfigIp *)(arg1)->getConfigIp();
  Tcl_SetObjResult(interp, SWIG_NewInstanceObj( SWIG_as_voidptr(result), SWIGTYPE_p_SmallMGC_Api_ConfigIp,0));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_startTest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_startTest self filePath ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_startTest" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_startTest" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->startTest(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_stopTest(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  char *arg2 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"oo:SmallMGC_Api_stopTest self filePath ",(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_stopTest" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_stopTest" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  result = (int)(arg1)->stopTest(arg2);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_getTestResult(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"o:SmallMGC_Api_getTestResult self ",(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_getTestResult" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  result = (int)(arg1)->getTestResult();
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  return TCL_OK;
fail:
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_sendRawMessage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 ;
  char *buf2 = 0 ;
  int alloc2 = 0 ;
  int res3 ;
  char *buf3 = 0 ;
  int alloc3 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooo:SmallMGC_Api_sendRawMessage self destination message ",(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_sendRawMessage" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_AsCharPtrAndSize(objv[2], &buf2, NULL, &alloc2);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_sendRawMessage" "', argument " "2"" of type '" "char *""'");
  }
  arg2 = reinterpret_cast< char * >(buf2);
  res3 = SWIG_AsCharPtrAndSize(objv[3], &buf3, NULL, &alloc3);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SmallMGC_Api_sendRawMessage" "', argument " "3"" of type '" "char *""'");
  }
  arg3 = reinterpret_cast< char * >(buf3);
  result = (int)(arg1)->sendRawMessage(arg2,arg3);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_OK;
fail:
  if (alloc2 == SWIG_NEWOBJ) delete[] buf2;
  if (alloc3 == SWIG_NEWOBJ) delete[] buf3;
  return TCL_ERROR;
}


SWIGINTERN int
_wrap_SmallMGC_Api_getReceivedMessage(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, int objc, Tcl_Obj *CONST objv[]) {
  SmallMGC_Api *arg1 = (SmallMGC_Api *) 0 ;
  SmallMGC_Api_Commands *arg2 = (SmallMGC_Api_Commands *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  int res6 ;
  char *buf6 = 0 ;
  int alloc6 = 0 ;
  int res7 ;
  char *buf7 = 0 ;
  int alloc7 = 0 ;
  int res8 ;
  char *buf8 = 0 ;
  int alloc8 = 0 ;
  int res9 ;
  char *buf9 = 0 ;
  int alloc9 = 0 ;
  int result;
  
  if (SWIG_GetArgs(interp, objc, objv,"ooooooooo:SmallMGC_Api_getReceivedMessage self command transactionId contextId eventId termId event localSdp remoteSdp ",(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0,(void *)0) == TCL_ERROR) SWIG_fail;
  res1 = SWIG_ConvertPtr(objv[1], &argp1,SWIGTYPE_p_SmallMGC_Api, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SmallMGC_Api_getReceivedMessage" "', argument " "1"" of type '" "SmallMGC_Api *""'"); 
  }
  arg1 = reinterpret_cast< SmallMGC_Api * >(argp1);
  res2 = SWIG_ConvertPtr(objv[2], &argp2,SWIGTYPE_p_SmallMGC_Api_Commands, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SmallMGC_Api_getReceivedMessage" "', argument " "2"" of type '" "SmallMGC_Api_Commands *""'"); 
  }
  arg2 = reinterpret_cast< SmallMGC_Api_Commands * >(argp2);
  res3 = SWIG_ConvertPtr(objv[3], &argp3,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SmallMGC_Api_getReceivedMessage" "', argument " "3"" of type '" "int *""'"); 
  }
  arg3 = reinterpret_cast< int * >(argp3);
  res4 = SWIG_ConvertPtr(objv[4], &argp4,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SmallMGC_Api_getReceivedMessage" "', argument " "4"" of type '" "int *""'"); 
  }
  arg4 = reinterpret_cast< int * >(argp4);
  res5 = SWIG_ConvertPtr(objv[5], &argp5,SWIGTYPE_p_int, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "SmallMGC_Api_getReceivedMessage" "', argument " "5"" of type '" "int *""'"); 
  }
  arg5 = reinterpret_cast< int * >(argp5);
  res6 = SWIG_AsCharPtrAndSize(objv[6], &buf6, NULL, &alloc6);
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "SmallMGC_Api_getReceivedMessage" "', argument " "6"" of type '" "char *""'");
  }
  arg6 = reinterpret_cast< char * >(buf6);
  res7 = SWIG_AsCharPtrAndSize(objv[7], &buf7, NULL, &alloc7);
  if (!SWIG_IsOK(res7)) {
    SWIG_exception_fail(SWIG_ArgError(res7), "in method '" "SmallMGC_Api_getReceivedMessage" "', argument " "7"" of type '" "char *""'");
  }
  arg7 = reinterpret_cast< char * >(buf7);
  res8 = SWIG_AsCharPtrAndSize(objv[8], &buf8, NULL, &alloc8);
  if (!SWIG_IsOK(res8)) {
    SWIG_exception_fail(SWIG_ArgError(res8), "in method '" "SmallMGC_Api_getReceivedMessage" "', argument " "8"" of type '" "char *""'");
  }
  arg8 = reinterpret_cast< char * >(buf8);
  res9 = SWIG_AsCharPtrAndSize(objv[9], &buf9, NULL, &alloc9);
  if (!SWIG_IsOK(res9)) {
    SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "SmallMGC_Api_getReceivedMessage" "', argument " "9"" of type '" "char *""'");
  }
  arg9 = reinterpret_cast< char * >(buf9);
  result = (int)(arg1)->getReceivedMessage(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  Tcl_SetObjResult(interp,SWIG_From_int(static_cast< int >(result)));
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return TCL_OK;
fail:
  if (alloc6 == SWIG_NEWOBJ) delete[] buf6;
  if (alloc7 == SWIG_NEWOBJ) delete[] buf7;
  if (alloc8 == SWIG_NEWOBJ) delete[] buf8;
  if (alloc9 == SWIG_NEWOBJ) delete[] buf9;
  return TCL_ERROR;
}


SWIGINTERN const char *_wrap_SmallMGC_Api_SMALLMGC_API_SOCKET_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_FromCharPtr(SmallMGC_Api::SMALLMGC_API_SOCKET);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_SmallMGC_Api_SMALLMGC_API_SOCKET_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""read-only SmallMGC_Api::SMALLMGC_API_SOCKET""' of type '""char []""'");
  return NULL;
fail:
  return "SmallMGC_Api_SMALLMGC_API_SOCKET";
}


SWIGINTERN const char *_wrap_SmallMGC_Api_SMALLMGC_API_USER_get(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2, int flags) {
  Tcl_Obj *value = 0;
  
  value = SWIG_FromCharPtr(SmallMGC_Api::SMALLMGC_API_USER);
  if (value) {
    Tcl_SetVar2(interp,name1,name2,Tcl_GetStringFromObj(value,NULL), flags);
    Tcl_DecrRefCount(value);
  }
  return NULL;
}


SWIGINTERN const char *_wrap_SmallMGC_Api_SMALLMGC_API_USER_set(ClientData clientData SWIGUNUSED, Tcl_Interp *interp, char *name1, char *name2 SWIGUNUSED, int flags) {
  Tcl_Obj *value = 0;
  Tcl_Obj *name1o = 0;
  
  name1o = Tcl_NewStringObj(name1,-1);
  value = Tcl_ObjGetVar2(interp, name1o, 0, flags);
  Tcl_DecrRefCount(name1o);
  if (!value) SWIG_fail;
  SWIG_exception_fail(SWIG_ArgError(SWIG_AttributeError), "in variable '""read-only SmallMGC_Api::SMALLMGC_API_USER""' of type '""char []""'");
  return NULL;
fail:
  return "SmallMGC_Api_SMALLMGC_API_USER";
}


SWIGINTERN void swig_delete_SmallMGC_Api(void *obj) {
SmallMGC_Api *arg1 = (SmallMGC_Api *) obj;
delete arg1;
}
static swig_method swig_SmallMGC_Api_methods[] = {
    {"addGateway", _wrap_SmallMGC_Api_addGateway}, 
    {"removeGateway", _wrap_SmallMGC_Api_removeGateway}, 
    {"blockGateway", _wrap_SmallMGC_Api_blockGateway}, 
    {"addSubscriber", _wrap_SmallMGC_Api_addSubscriber}, 
    {"removeSubscriber", _wrap_SmallMGC_Api_removeSubscriber}, 
    {"blockSubscriber", _wrap_SmallMGC_Api_blockSubscriber}, 
    {"unblockSubscriber", _wrap_SmallMGC_Api_unblockSubscriber}, 
    {"shutdownSubscriber", _wrap_SmallMGC_Api_shutdownSubscriber}, 
    {"getSubscriberStatus", _wrap_SmallMGC_Api_getSubscriberStatus}, 
    {"setSubscriberStatus", _wrap_SmallMGC_Api_setSubscriberStatus}, 
    {"setGatewayStatus", _wrap_SmallMGC_Api_setGatewayStatus}, 
    {"getGatewayStatus", _wrap_SmallMGC_Api_getGatewayStatus}, 
    {"subscriberAlarmSet", _wrap_SmallMGC_Api_subscriberAlarmSet}, 
    {"subscriberAlarmClear", _wrap_SmallMGC_Api_subscriberAlarmClear}, 
    {"gatewayAlarmSet", _wrap_SmallMGC_Api_gatewayAlarmSet}, 
    {"gatewayAlarmClear", _wrap_SmallMGC_Api_gatewayAlarmClear}, 
    {"setConfigSA", _wrap_SmallMGC_Api_setConfigSA}, 
    {"setConfigDigitmap", _wrap_SmallMGC_Api_setConfigDigitmap}, 
    {"setConfigGeneral", _wrap_SmallMGC_Api_setConfigGeneral}, 
    {"setConfigIp", _wrap_SmallMGC_Api_setConfigIp}, 
    {"getConfigSA", _wrap_SmallMGC_Api_getConfigSA}, 
    {"getConfigDigitmap", _wrap_SmallMGC_Api_getConfigDigitmap}, 
    {"getConfigGeneral", _wrap_SmallMGC_Api_getConfigGeneral}, 
    {"getConfigIp", _wrap_SmallMGC_Api_getConfigIp}, 
    {"startTest", _wrap_SmallMGC_Api_startTest}, 
    {"stopTest", _wrap_SmallMGC_Api_stopTest}, 
    {"getTestResult", _wrap_SmallMGC_Api_getTestResult}, 
    {"sendRawMessage", _wrap_SmallMGC_Api_sendRawMessage}, 
    {"getReceivedMessage", _wrap_SmallMGC_Api_getReceivedMessage}, 
    {0,0}
};
static swig_attribute swig_SmallMGC_Api_attributes[] = {
    {0,0,0}
};
static swig_class *swig_SmallMGC_Api_bases[] = {0};
static const char * swig_SmallMGC_Api_base_names[] = {0};
static swig_class _wrap_class_SmallMGC_Api = { "SmallMGC_Api", &SWIGTYPE_p_SmallMGC_Api,_wrap_new_SmallMGC_Api, swig_delete_SmallMGC_Api, swig_SmallMGC_Api_methods, swig_SmallMGC_Api_attributes, swig_SmallMGC_Api_bases,swig_SmallMGC_Api_base_names, &swig_module };

static swig_command_info swig_commands[] = {
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_command_set", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_command_set, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_command_get", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_command_get, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_transactionId_set", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_transactionId_set, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_transactionId_get", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_transactionId_get, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_contextId_set", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_contextId_set, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_contextId_get", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_contextId_get, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_eventId_set", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_eventId_set, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_eventId_get", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_eventId_get, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_termId_set", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_termId_set, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_termId_get", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_termId_get, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_event_set", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_event_set, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_event_get", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_event_get, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_localSdp_set", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_localSdp_set, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_localSdp_get", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_localSdp_get, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_remoteSdp_set", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_remoteSdp_set, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage_remoteSdp_get", (swig_wrapper_func) _wrap_SmallMGC_Api_TestReceivedMessage_remoteSdp_get, NULL},
    { SWIG_prefix "new_SmallMGC_Api_TestReceivedMessage", (swig_wrapper_func) _wrap_new_SmallMGC_Api_TestReceivedMessage, NULL},
    { SWIG_prefix "delete_SmallMGC_Api_TestReceivedMessage", (swig_wrapper_func) _wrap_delete_SmallMGC_Api_TestReceivedMessage, NULL},
    { SWIG_prefix "SmallMGC_Api_TestReceivedMessage", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api_TestReceivedMessage},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_name_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_name_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_name_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_name_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_h248IpAddress_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_h248IpAddress_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_h248IpAddress_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_h248IpAddress_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_h248IpPort_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_h248IpPort_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_h248IpPort_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_h248IpPort_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_h248IpDomainName_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_h248IpDomainName_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_h248IpDomainName_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_h248IpDomainName_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_sigtranIpAddress_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_sigtranIpAddress_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_sigtranIpAddress_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_sigtranIpAddress_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_sigtranIpPort_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_sigtranIpPort_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_sigtranIpPort_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_sigtranIpPort_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_sigtranIpDomainName_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_sipIpAddress_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_sipIpAddress_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_sipIpAddress_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_sipIpAddress_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_sipIpPort_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_sipIpPort_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_sipIpPort_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_sipIpPort_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_sipIpDomainName_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_sipIpDomainName_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp_m_sipIpDomainName_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigIp_m_sipIpDomainName_get, NULL},
    { SWIG_prefix "new_SmallMGC_Api_ConfigIp", (swig_wrapper_func) _wrap_new_SmallMGC_Api_ConfigIp, NULL},
    { SWIG_prefix "delete_SmallMGC_Api_ConfigIp", (swig_wrapper_func) _wrap_delete_SmallMGC_Api_ConfigIp, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigIp", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api_ConfigIp},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral_m_retransmissions_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigGeneral_m_retransmissions_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral_m_retransmissions_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigGeneral_m_retransmissions_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral_m_modifybundles_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigGeneral_m_modifybundles_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral_m_modifybundles_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigGeneral_m_modifybundles_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral_m_bundlestimeout_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigGeneral_m_bundlestimeout_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral_m_bundlestimeout_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigGeneral_m_bundlestimeout_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral_m_busyToneDuration_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigGeneral_m_busyToneDuration_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral_m_busyToneDuration_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigGeneral_m_busyToneDuration_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigGeneral_m_congestionToneDuration_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigGeneral_m_howlerToneDuration_get, NULL},
    { SWIG_prefix "new_SmallMGC_Api_ConfigGeneral", (swig_wrapper_func) _wrap_new_SmallMGC_Api_ConfigGeneral, NULL},
    { SWIG_prefix "delete_SmallMGC_Api_ConfigGeneral", (swig_wrapper_func) _wrap_delete_SmallMGC_Api_ConfigGeneral, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigGeneral", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api_ConfigGeneral},
    { SWIG_prefix "SmallMGC_Api_ConfigDigitmap_m_digitmap_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigDigitmap_m_digitmap_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigDigitmap_m_digitmap_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigDigitmap_m_digitmap_get, NULL},
    { SWIG_prefix "new_SmallMGC_Api_ConfigDigitmap", (swig_wrapper_func) _wrap_new_SmallMGC_Api_ConfigDigitmap, NULL},
    { SWIG_prefix "delete_SmallMGC_Api_ConfigDigitmap", (swig_wrapper_func) _wrap_delete_SmallMGC_Api_ConfigDigitmap, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigDigitmap", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api_ConfigDigitmap},
    { SWIG_prefix "SmallMGC_Api_ConfigSA_m_sa_enabled_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigSA_m_sa_enabled_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigSA_m_sa_enabled_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigSA_m_sa_enabled_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigSA_m_sa_timeout_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigSA_m_sa_timeout_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigSA_m_sa_timeout_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigSA_m_sa_timeout_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpAddress_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpPort_get, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_set", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_set, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_get", (swig_wrapper_func) _wrap_SmallMGC_Api_ConfigSA_m_sa_mainMgcIpDomain_get, NULL},
    { SWIG_prefix "new_SmallMGC_Api_ConfigSA", (swig_wrapper_func) _wrap_new_SmallMGC_Api_ConfigSA, NULL},
    { SWIG_prefix "delete_SmallMGC_Api_ConfigSA", (swig_wrapper_func) _wrap_delete_SmallMGC_Api_ConfigSA, NULL},
    { SWIG_prefix "SmallMGC_Api_ConfigSA", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api_ConfigSA},
    { SWIG_prefix "SmallMGC_Api_Config_m_configIp_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Config_m_configIp_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Config_m_configIp_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Config_m_configIp_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Config_m_configGeneral_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Config_m_configGeneral_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Config_m_configGeneral_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Config_m_configGeneral_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Config_m_configDigitmap_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Config_m_configDigitmap_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Config_m_configDigitmap_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Config_m_configDigitmap_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Config_m_configSA_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Config_m_configSA_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Config_m_configSA_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Config_m_configSA_get, NULL},
    { SWIG_prefix "new_SmallMGC_Api_Config", (swig_wrapper_func) _wrap_new_SmallMGC_Api_Config, NULL},
    { SWIG_prefix "delete_SmallMGC_Api_Config", (swig_wrapper_func) _wrap_delete_SmallMGC_Api_Config, NULL},
    { SWIG_prefix "SmallMGC_Api_Config", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api_Config},
    { SWIG_prefix "SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_set", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_set, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_get", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayGeneral_m_gatewayCallControlMode_get, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_set", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_set, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_get", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayGeneral_m_gatewayItPackageTimeout_get, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_set", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_set, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_get", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayGeneral_m_gatewayItPackageEnabled_get, NULL},
    { SWIG_prefix "new_SmallMGC_Api_GatewayGeneral", (swig_wrapper_func) _wrap_new_SmallMGC_Api_GatewayGeneral, NULL},
    { SWIG_prefix "delete_SmallMGC_Api_GatewayGeneral", (swig_wrapper_func) _wrap_delete_SmallMGC_Api_GatewayGeneral, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayGeneral", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api_GatewayGeneral},
    { SWIG_prefix "SmallMGC_Api_Gateway_m_gatewayIp_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Gateway_m_gatewayIp_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Gateway_m_gatewayIp_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Gateway_m_gatewayIp_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Gateway_m_gatewayGeneral_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Gateway_m_gatewayGeneral_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Gateway_m_gatewayGeneral_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Gateway_m_gatewayGeneral_get, NULL},
    { SWIG_prefix "new_SmallMGC_Api_Gateway", (swig_wrapper_func) _wrap_new_SmallMGC_Api_Gateway, NULL},
    { SWIG_prefix "delete_SmallMGC_Api_Gateway", (swig_wrapper_func) _wrap_delete_SmallMGC_Api_Gateway, NULL},
    { SWIG_prefix "SmallMGC_Api_Gateway", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api_Gateway},
    { SWIG_prefix "SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_set", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_set, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_get", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayStatus_m_gatewayIpAddress_get, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayStatus_m_h248State_set", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayStatus_m_h248State_set, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayStatus_m_h248State_get", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayStatus_m_h248State_get, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayStatus_m_iuaState_set", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayStatus_m_iuaState_set, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayStatus_m_iuaState_get", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayStatus_m_iuaState_get, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayStatus_m_callsTotal_set", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayStatus_m_callsTotal_set, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayStatus_m_callsTotal_get", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayStatus_m_callsTotal_get, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayStatus_m_callOngoing_set", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayStatus_m_callOngoing_set, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayStatus_m_callOngoing_get", (swig_wrapper_func) _wrap_SmallMGC_Api_GatewayStatus_m_callOngoing_get, NULL},
    { SWIG_prefix "new_SmallMGC_Api_GatewayStatus", (swig_wrapper_func) _wrap_new_SmallMGC_Api_GatewayStatus, NULL},
    { SWIG_prefix "delete_SmallMGC_Api_GatewayStatus", (swig_wrapper_func) _wrap_delete_SmallMGC_Api_GatewayStatus, NULL},
    { SWIG_prefix "SmallMGC_Api_GatewayStatus", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api_GatewayStatus},
    { SWIG_prefix "SmallMGC_Api_Status_m_callsTotal_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Status_m_callsTotal_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Status_m_callsTotal_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Status_m_callsTotal_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Status_m_callOngoing_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Status_m_callOngoing_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Status_m_callOngoing_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Status_m_callOngoing_get, NULL},
    { SWIG_prefix "new_SmallMGC_Api_Status", (swig_wrapper_func) _wrap_new_SmallMGC_Api_Status, NULL},
    { SWIG_prefix "delete_SmallMGC_Api_Status", (swig_wrapper_func) _wrap_delete_SmallMGC_Api_Status, NULL},
    { SWIG_prefix "SmallMGC_Api_Status", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api_Status},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_gatewayIpAddress_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_gatewayIpAddress_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_gatewayIpAddress_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_gatewayIpAddress_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberName_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberName_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberName_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberName_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberType_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberType_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberType_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberType_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberTermination_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberTermination_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberTermination_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberTermination_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberNumber_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberNumber_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberNumber_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberNumber_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberNumberRangeStart_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberNumberRangeEnd_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberDomainName_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberDomainName_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberDomainName_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberDomainName_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberIuaId_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberIuaId_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberIuaId_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberIuaId_get, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberIuaInt_set", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberIuaInt_set, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber_m_subscriberIuaInt_get", (swig_wrapper_func) _wrap_SmallMGC_Api_Subscriber_m_subscriberIuaInt_get, NULL},
    { SWIG_prefix "new_SmallMGC_Api_Subscriber", (swig_wrapper_func) _wrap_new_SmallMGC_Api_Subscriber, NULL},
    { SWIG_prefix "delete_SmallMGC_Api_Subscriber", (swig_wrapper_func) _wrap_delete_SmallMGC_Api_Subscriber, NULL},
    { SWIG_prefix "SmallMGC_Api_Subscriber", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api_Subscriber},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_set", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_set, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_get", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_gatewayIpAddress_get, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_subscriberTermination_set", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberTermination_set, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_subscriberTermination_get", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberTermination_get, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_subscriberState_set", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberState_set, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_subscriberState_get", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberState_get, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_set", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_set, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_get", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberDomainName_get, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_set", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_set, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_get", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberIuaId_get, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_set", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_set, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_get", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_subscriberIuaInt_get, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_callsTotal_set", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_callsTotal_set, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_callsTotal_get", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_callsTotal_get, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_callOngoing_set", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_callOngoing_set, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus_m_callOngoing_get", (swig_wrapper_func) _wrap_SmallMGC_Api_SubscriberStatus_m_callOngoing_get, NULL},
    { SWIG_prefix "new_SmallMGC_Api_SubscriberStatus", (swig_wrapper_func) _wrap_new_SmallMGC_Api_SubscriberStatus, NULL},
    { SWIG_prefix "delete_SmallMGC_Api_SubscriberStatus", (swig_wrapper_func) _wrap_delete_SmallMGC_Api_SubscriberStatus, NULL},
    { SWIG_prefix "SmallMGC_Api_SubscriberStatus", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api_SubscriberStatus},
    { SWIG_prefix "new_SmallMGC_Api", (swig_wrapper_func) _wrap_new_SmallMGC_Api, NULL},
    { SWIG_prefix "SmallMGC_Api_addGateway", (swig_wrapper_func) _wrap_SmallMGC_Api_addGateway, NULL},
    { SWIG_prefix "SmallMGC_Api_removeGateway", (swig_wrapper_func) _wrap_SmallMGC_Api_removeGateway, NULL},
    { SWIG_prefix "SmallMGC_Api_blockGateway", (swig_wrapper_func) _wrap_SmallMGC_Api_blockGateway, NULL},
    { SWIG_prefix "SmallMGC_Api_addSubscriber", (swig_wrapper_func) _wrap_SmallMGC_Api_addSubscriber, NULL},
    { SWIG_prefix "SmallMGC_Api_removeSubscriber", (swig_wrapper_func) _wrap_SmallMGC_Api_removeSubscriber, NULL},
    { SWIG_prefix "SmallMGC_Api_blockSubscriber", (swig_wrapper_func) _wrap_SmallMGC_Api_blockSubscriber, NULL},
    { SWIG_prefix "SmallMGC_Api_unblockSubscriber", (swig_wrapper_func) _wrap_SmallMGC_Api_unblockSubscriber, NULL},
    { SWIG_prefix "SmallMGC_Api_shutdownSubscriber", (swig_wrapper_func) _wrap_SmallMGC_Api_shutdownSubscriber, NULL},
    { SWIG_prefix "SmallMGC_Api_getSubscriberStatus", (swig_wrapper_func) _wrap_SmallMGC_Api_getSubscriberStatus, NULL},
    { SWIG_prefix "SmallMGC_Api_setSubscriberStatus", (swig_wrapper_func) _wrap_SmallMGC_Api_setSubscriberStatus, NULL},
    { SWIG_prefix "SmallMGC_Api_setGatewayStatus", (swig_wrapper_func) _wrap_SmallMGC_Api_setGatewayStatus, NULL},
    { SWIG_prefix "SmallMGC_Api_getGatewayStatus", (swig_wrapper_func) _wrap_SmallMGC_Api_getGatewayStatus, NULL},
    { SWIG_prefix "SmallMGC_Api_subscriberAlarmSet", (swig_wrapper_func) _wrap_SmallMGC_Api_subscriberAlarmSet, NULL},
    { SWIG_prefix "SmallMGC_Api_subscriberAlarmClear", (swig_wrapper_func) _wrap_SmallMGC_Api_subscriberAlarmClear, NULL},
    { SWIG_prefix "SmallMGC_Api_gatewayAlarmSet", (swig_wrapper_func) _wrap_SmallMGC_Api_gatewayAlarmSet, NULL},
    { SWIG_prefix "SmallMGC_Api_gatewayAlarmClear", (swig_wrapper_func) _wrap_SmallMGC_Api_gatewayAlarmClear, NULL},
    { SWIG_prefix "delete_SmallMGC_Api", (swig_wrapper_func) _wrap_delete_SmallMGC_Api, NULL},
    { SWIG_prefix "SmallMGC_Api_setConfigSA", (swig_wrapper_func) _wrap_SmallMGC_Api_setConfigSA, NULL},
    { SWIG_prefix "SmallMGC_Api_setConfigDigitmap", (swig_wrapper_func) _wrap_SmallMGC_Api_setConfigDigitmap, NULL},
    { SWIG_prefix "SmallMGC_Api_setConfigGeneral", (swig_wrapper_func) _wrap_SmallMGC_Api_setConfigGeneral, NULL},
    { SWIG_prefix "SmallMGC_Api_setConfigIp", (swig_wrapper_func) _wrap_SmallMGC_Api_setConfigIp, NULL},
    { SWIG_prefix "SmallMGC_Api_getConfigSA", (swig_wrapper_func) _wrap_SmallMGC_Api_getConfigSA, NULL},
    { SWIG_prefix "SmallMGC_Api_getConfigDigitmap", (swig_wrapper_func) _wrap_SmallMGC_Api_getConfigDigitmap, NULL},
    { SWIG_prefix "SmallMGC_Api_getConfigGeneral", (swig_wrapper_func) _wrap_SmallMGC_Api_getConfigGeneral, NULL},
    { SWIG_prefix "SmallMGC_Api_getConfigIp", (swig_wrapper_func) _wrap_SmallMGC_Api_getConfigIp, NULL},
    { SWIG_prefix "SmallMGC_Api_startTest", (swig_wrapper_func) _wrap_SmallMGC_Api_startTest, NULL},
    { SWIG_prefix "SmallMGC_Api_stopTest", (swig_wrapper_func) _wrap_SmallMGC_Api_stopTest, NULL},
    { SWIG_prefix "SmallMGC_Api_getTestResult", (swig_wrapper_func) _wrap_SmallMGC_Api_getTestResult, NULL},
    { SWIG_prefix "SmallMGC_Api_sendRawMessage", (swig_wrapper_func) _wrap_SmallMGC_Api_sendRawMessage, NULL},
    { SWIG_prefix "SmallMGC_Api_getReceivedMessage", (swig_wrapper_func) _wrap_SmallMGC_Api_getReceivedMessage, NULL},
    { SWIG_prefix "SmallMGC_Api", (swig_wrapper_func) SWIG_ObjectConstructor, (ClientData)&_wrap_class_SmallMGC_Api},
    {0, 0, 0}
};

static swig_var_info swig_variables[] = {
    { SWIG_prefix "SmallMGC_Api_SMALLMGC_API_SOCKET", 0, (swig_variable_func) _wrap_SmallMGC_Api_SMALLMGC_API_SOCKET_get,(swig_variable_func) _wrap_SmallMGC_Api_SMALLMGC_API_SOCKET_set},
    { SWIG_prefix "SmallMGC_Api_SMALLMGC_API_USER", 0, (swig_variable_func) _wrap_SmallMGC_Api_SMALLMGC_API_USER_get,(swig_variable_func) _wrap_SmallMGC_Api_SMALLMGC_API_USER_set},
    {0,0,0,0}
};

static swig_const_info swig_constants[] = {
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_SmallMGC_Api = {"_p_SmallMGC_Api", "SmallMGC_Api *", 0, 0, (void*)&_wrap_class_SmallMGC_Api, 0};
static swig_type_info _swigt__p_SmallMGC_Api_Commands = {"_p_SmallMGC_Api_Commands", "enum SmallMGC_Api_Commands *|SmallMGC_Api_Commands *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SmallMGC_Api_Config = {"_p_SmallMGC_Api_Config", "SmallMGC_Api_Config *", 0, 0, (void*)&_wrap_class_SmallMGC_Api_Config, 0};
static swig_type_info _swigt__p_SmallMGC_Api_ConfigDigitmap = {"_p_SmallMGC_Api_ConfigDigitmap", "SmallMGC_Api_ConfigDigitmap *", 0, 0, (void*)&_wrap_class_SmallMGC_Api_ConfigDigitmap, 0};
static swig_type_info _swigt__p_SmallMGC_Api_ConfigGeneral = {"_p_SmallMGC_Api_ConfigGeneral", "SmallMGC_Api_ConfigGeneral *", 0, 0, (void*)&_wrap_class_SmallMGC_Api_ConfigGeneral, 0};
static swig_type_info _swigt__p_SmallMGC_Api_ConfigIp = {"_p_SmallMGC_Api_ConfigIp", "SmallMGC_Api_ConfigIp *", 0, 0, (void*)&_wrap_class_SmallMGC_Api_ConfigIp, 0};
static swig_type_info _swigt__p_SmallMGC_Api_ConfigSA = {"_p_SmallMGC_Api_ConfigSA", "SmallMGC_Api_ConfigSA *", 0, 0, (void*)&_wrap_class_SmallMGC_Api_ConfigSA, 0};
static swig_type_info _swigt__p_SmallMGC_Api_Gateway = {"_p_SmallMGC_Api_Gateway", "SmallMGC_Api_Gateway *", 0, 0, (void*)&_wrap_class_SmallMGC_Api_Gateway, 0};
static swig_type_info _swigt__p_SmallMGC_Api_GatewayAlarms = {"_p_SmallMGC_Api_GatewayAlarms", "enum SmallMGC_Api_GatewayAlarms *|SmallMGC_Api_GatewayAlarms *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SmallMGC_Api_GatewayGeneral = {"_p_SmallMGC_Api_GatewayGeneral", "SmallMGC_Api_GatewayGeneral *", 0, 0, (void*)&_wrap_class_SmallMGC_Api_GatewayGeneral, 0};
static swig_type_info _swigt__p_SmallMGC_Api_GatewayStatus = {"_p_SmallMGC_Api_GatewayStatus", "SmallMGC_Api_GatewayStatus *", 0, 0, (void*)&_wrap_class_SmallMGC_Api_GatewayStatus, 0};
static swig_type_info _swigt__p_SmallMGC_Api_Status = {"_p_SmallMGC_Api_Status", "SmallMGC_Api_Status *", 0, 0, (void*)&_wrap_class_SmallMGC_Api_Status, 0};
static swig_type_info _swigt__p_SmallMGC_Api_Subscriber = {"_p_SmallMGC_Api_Subscriber", "SmallMGC_Api_Subscriber *", 0, 0, (void*)&_wrap_class_SmallMGC_Api_Subscriber, 0};
static swig_type_info _swigt__p_SmallMGC_Api_SubscriberAlarms = {"_p_SmallMGC_Api_SubscriberAlarms", "enum SmallMGC_Api_SubscriberAlarms *|SmallMGC_Api_SubscriberAlarms *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SmallMGC_Api_SubscriberH248State = {"_p_SmallMGC_Api_SubscriberH248State", "enum SmallMGC_Api_SubscriberH248State *|SmallMGC_Api_SubscriberH248State *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SmallMGC_Api_SubscriberStatus = {"_p_SmallMGC_Api_SubscriberStatus", "SmallMGC_Api_SubscriberStatus *", 0, 0, (void*)&_wrap_class_SmallMGC_Api_SubscriberStatus, 0};
static swig_type_info _swigt__p_SmallMGC_Api_TestReceivedMessage = {"_p_SmallMGC_Api_TestReceivedMessage", "SmallMGC_Api_TestReceivedMessage *", 0, 0, (void*)&_wrap_class_SmallMGC_Api_TestReceivedMessage, 0};
static swig_type_info _swigt__p_a_32__char = {"_p_a_32__char", "char (*)[32]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_SmallMGC_Api,
  &_swigt__p_SmallMGC_Api_Commands,
  &_swigt__p_SmallMGC_Api_Config,
  &_swigt__p_SmallMGC_Api_ConfigDigitmap,
  &_swigt__p_SmallMGC_Api_ConfigGeneral,
  &_swigt__p_SmallMGC_Api_ConfigIp,
  &_swigt__p_SmallMGC_Api_ConfigSA,
  &_swigt__p_SmallMGC_Api_Gateway,
  &_swigt__p_SmallMGC_Api_GatewayAlarms,
  &_swigt__p_SmallMGC_Api_GatewayGeneral,
  &_swigt__p_SmallMGC_Api_GatewayStatus,
  &_swigt__p_SmallMGC_Api_Status,
  &_swigt__p_SmallMGC_Api_Subscriber,
  &_swigt__p_SmallMGC_Api_SubscriberAlarms,
  &_swigt__p_SmallMGC_Api_SubscriberH248State,
  &_swigt__p_SmallMGC_Api_SubscriberStatus,
  &_swigt__p_SmallMGC_Api_TestReceivedMessage,
  &_swigt__p_a_32__char,
  &_swigt__p_char,
  &_swigt__p_int,
};

static swig_cast_info _swigc__p_SmallMGC_Api[] = {  {&_swigt__p_SmallMGC_Api, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_Commands[] = {  {&_swigt__p_SmallMGC_Api_Commands, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_Config[] = {  {&_swigt__p_SmallMGC_Api_Config, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_ConfigDigitmap[] = {  {&_swigt__p_SmallMGC_Api_ConfigDigitmap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_ConfigGeneral[] = {  {&_swigt__p_SmallMGC_Api_ConfigGeneral, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_ConfigIp[] = {  {&_swigt__p_SmallMGC_Api_ConfigIp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_ConfigSA[] = {  {&_swigt__p_SmallMGC_Api_ConfigSA, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_Gateway[] = {  {&_swigt__p_SmallMGC_Api_Gateway, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_GatewayAlarms[] = {  {&_swigt__p_SmallMGC_Api_GatewayAlarms, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_GatewayGeneral[] = {  {&_swigt__p_SmallMGC_Api_GatewayGeneral, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_GatewayStatus[] = {  {&_swigt__p_SmallMGC_Api_GatewayStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_Status[] = {  {&_swigt__p_SmallMGC_Api_Status, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_Subscriber[] = {  {&_swigt__p_SmallMGC_Api_Subscriber, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_SubscriberAlarms[] = {  {&_swigt__p_SmallMGC_Api_SubscriberAlarms, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_SubscriberH248State[] = {  {&_swigt__p_SmallMGC_Api_SubscriberH248State, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_SubscriberStatus[] = {  {&_swigt__p_SmallMGC_Api_SubscriberStatus, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SmallMGC_Api_TestReceivedMessage[] = {  {&_swigt__p_SmallMGC_Api_TestReceivedMessage, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_32__char[] = {  {&_swigt__p_a_32__char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_SmallMGC_Api,
  _swigc__p_SmallMGC_Api_Commands,
  _swigc__p_SmallMGC_Api_Config,
  _swigc__p_SmallMGC_Api_ConfigDigitmap,
  _swigc__p_SmallMGC_Api_ConfigGeneral,
  _swigc__p_SmallMGC_Api_ConfigIp,
  _swigc__p_SmallMGC_Api_ConfigSA,
  _swigc__p_SmallMGC_Api_Gateway,
  _swigc__p_SmallMGC_Api_GatewayAlarms,
  _swigc__p_SmallMGC_Api_GatewayGeneral,
  _swigc__p_SmallMGC_Api_GatewayStatus,
  _swigc__p_SmallMGC_Api_Status,
  _swigc__p_SmallMGC_Api_Subscriber,
  _swigc__p_SmallMGC_Api_SubscriberAlarms,
  _swigc__p_SmallMGC_Api_SubscriberH248State,
  _swigc__p_SmallMGC_Api_SubscriberStatus,
  _swigc__p_SmallMGC_Api_TestReceivedMessage,
  _swigc__p_a_32__char,
  _swigc__p_char,
  _swigc__p_int,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;
  
  clientdata = clientdata;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpeters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif


#ifdef __cplusplus
extern "C" {
#endif
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  
  SWIGINTERN void
  SWIG_Tcl_InstallConstants(Tcl_Interp *interp, swig_const_info constants[]) {
    int i;
    Tcl_Obj *obj;
    
    if (!swigconstTableinit) {
      Tcl_InitHashTable(&swigconstTable, TCL_STRING_KEYS);
      swigconstTableinit = 1;
    }
    for (i = 0; constants[i].type; i++) {
      switch(constants[i].type) {
      case SWIG_TCL_POINTER:
        obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_TCL_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        SWIG_Tcl_SetConstantObj(interp, constants[i].name, obj);
      }
    }
  }
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

SWIGEXPORT int SWIG_init(Tcl_Interp *interp) {
  int i;
  if (interp == 0) return TCL_ERROR;
#ifdef USE_TCL_STUBS
  /* (char*) cast is required to avoid compiler warning/error for Tcl < 8.4. */
  if (Tcl_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif  
#ifdef USE_TK_STUBS
  /* (char*) cast is required to avoid compiler warning/error. */
  if (Tk_InitStubs(interp, (char*)SWIG_TCL_STUBS_VERSION, 0) == NULL) {
    return TCL_ERROR;
  }
#endif
  
  Tcl_PkgProvide(interp, (char*)SWIG_name, (char*)SWIG_version);
  
#ifdef SWIG_namespace
  Tcl_Eval(interp, "namespace eval " SWIG_namespace " { }");
#endif
  
  SWIG_InitializeModule((void *) interp);
  SWIG_PropagateClientData();
  
  for (i = 0; swig_commands[i].name; i++) {
    Tcl_CreateObjCommand(interp, (char *) swig_commands[i].name, (swig_wrapper_func) swig_commands[i].wrapper,
      swig_commands[i].clientdata, NULL);
  }
  for (i = 0; swig_variables[i].name; i++) {
    Tcl_SetVar(interp, (char *) swig_variables[i].name, (char *) "", TCL_GLOBAL_ONLY);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_READS | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].get, (ClientData) swig_variables[i].addr);
    Tcl_TraceVar(interp, (char *) swig_variables[i].name, TCL_TRACE_WRITES | TCL_GLOBAL_ONLY, 
      (Tcl_VarTraceProc *) swig_variables[i].set, (ClientData) swig_variables[i].addr);
  }
  
  SWIG_Tcl_InstallConstants(interp, swig_constants);
  
  
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_CONFIG_SMALLMGC_IP", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_CONFIG_SMALLMGC_IP)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_CONFIG_SMALLMGC_GENERAL", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_CONFIG_SMALLMGC_GENERAL)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_CONFIG_SMALLMGC_DIGITMAP", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_CONFIG_SMALLMGC_DIGITMAP)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_CONFIG_SMALLMGC_SA", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_CONFIG_SMALLMGC_SA)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_CONFIG_GATEWAY_IP", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_CONFIG_GATEWAY_IP)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_CONFIG_GATEWAY_GENERAL", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_CONFIG_GATEWAY_GENERAL)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_CONFIG_ADD_GATEWAY", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_CONFIG_ADD_GATEWAY)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_CONFIG_REMOVE_GATEWAY", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_CONFIG_REMOVE_GATEWAY)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_CONFIG_BLOCK_GATEWAY", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_CONFIG_BLOCK_GATEWAY)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_CONFIG_SUBSCRIBER_GENERAL", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_CONFIG_SUBSCRIBER_GENERAL)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_CONFIG_ADD_SUBSCRIBER", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_CONFIG_ADD_SUBSCRIBER)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_CONFIG_REMOVE_SUBSCRIBER", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_CONFIG_REMOVE_SUBSCRIBER)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_STATUS_SMALLMGC", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_STATUS_SMALLMGC)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_STATUS_GATEWAY", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_STATUS_GATEWAY)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_STATUS_SUBSCRIBER", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_STATUS_SUBSCRIBER)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_STATUS_SUBSCRIBER_INSERVICE", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_STATUS_SUBSCRIBER_INSERVICE)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_STATUS_SUBSCRIBER_OUTSERVICE_FORCED", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_STATUS_SUBSCRIBER_OUTSERVICE_FORCED)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_COMMAND_STATUS_SUBSCRIBER_OUTSERVICE", SWIG_From_int(static_cast< int >(SmallMGC_API_COMMAND_STATUS_SUBSCRIBER_OUTSERVICE)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_AlARM_SMALLMGC", SWIG_From_int(static_cast< int >(SmallMGC_API_AlARM_SMALLMGC)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_AlARM_GATEWAY", SWIG_From_int(static_cast< int >(SmallMGC_API_AlARM_GATEWAY)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_AlARM_SUBSCRIBER", SWIG_From_int(static_cast< int >(SmallMGC_API_AlARM_SUBSCRIBER)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_TEST_START", SWIG_From_int(static_cast< int >(SmallMGC_API_TEST_START)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_TEST_STOP", SWIG_From_int(static_cast< int >(SmallMGC_API_TEST_STOP)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_TEST_RESULT", SWIG_From_int(static_cast< int >(SmallMGC_API_TEST_RESULT)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_SEND_RAW", SWIG_From_int(static_cast< int >(SmallMGC_API_SEND_RAW)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_RECEIVED_NOTIFY", SWIG_From_int(static_cast< int >(SmallMGC_API_RECEIVED_NOTIFY)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_RECEIVED_MODIFY", SWIG_From_int(static_cast< int >(SmallMGC_API_RECEIVED_MODIFY)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_RECEIVED_ADD", SWIG_From_int(static_cast< int >(SmallMGC_API_RECEIVED_ADD)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_RECEIVED_SUBTRACT", SWIG_From_int(static_cast< int >(SmallMGC_API_RECEIVED_SUBTRACT)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_RECEIVED_MOVE", SWIG_From_int(static_cast< int >(SmallMGC_API_RECEIVED_MOVE)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_RECEIVED_AUDITVALUE", SWIG_From_int(static_cast< int >(SmallMGC_API_RECEIVED_AUDITVALUE)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_RECEIVED_SERVICECHANGE", SWIG_From_int(static_cast< int >(SmallMGC_API_RECEIVED_SERVICECHANGE)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_RECEIVED_PENDING", SWIG_From_int(static_cast< int >(SmallMGC_API_RECEIVED_PENDING)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_API_RECEIVED_ERROR", SWIG_From_int(static_cast< int >(SmallMGC_API_RECEIVED_ERROR)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_SUBSCRIBER_ALARM_BLOCKED", SWIG_From_int(static_cast< int >(SmallMGC_SUBSCRIBER_ALARM_BLOCKED)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_SUBSCRIBER_ALARM_UNDEFINED", SWIG_From_int(static_cast< int >(SmallMGC_SUBSCRIBER_ALARM_UNDEFINED)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_ALARM_H248Association", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_ALARM_H248Association)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_ALARM_IUAAssociation", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_ALARM_IUAAssociation)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_ALARM_UNDEFINED", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_ALARM_UNDEFINED)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_SUBSCRIBER_PSTN", SWIG_From_int(static_cast< int >(SmallMGC_SUBSCRIBER_PSTN)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_SUBSCRIBER_ISDNBA", SWIG_From_int(static_cast< int >(SmallMGC_SUBSCRIBER_ISDNBA)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_SUBSCRIBER_ISDNPRA", SWIG_From_int(static_cast< int >(SmallMGC_SUBSCRIBER_ISDNPRA)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_SUBSCRIBER_SIP", SWIG_From_int(static_cast< int >(SmallMGC_SUBSCRIBER_SIP)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_SUBSCRIBER_UNDEFINED", SWIG_From_int(static_cast< int >(SmallMGC_SUBSCRIBER_UNDEFINED)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_STATUS_REGISTERED", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_STATUS_REGISTERED)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_STATUS_UP", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_STATUS_UP)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_STATUS_DOWN", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_STATUS_DOWN)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_STATUS_LOST", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_STATUS_LOST)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_STATUS_UNDEFINED", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_STATUS_UNDEFINED)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_STATUS_IUA_REGISTERED", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_STATUS_IUA_REGISTERED)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_STATUS_IUA_UP", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_STATUS_IUA_UP)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_STATUS_IUA_DOWN", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_STATUS_IUA_DOWN)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_STATUS_IUA_LOST", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_STATUS_IUA_LOST)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_GATEWAY_STATUS_IUA_UNDEFINED", SWIG_From_int(static_cast< int >(SmallMGC_GATEWAY_STATUS_IUA_UNDEFINED)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_SUBSCRIBER_STATUS_REGISTERED", SWIG_From_int(static_cast< int >(SmallMGC_SUBSCRIBER_STATUS_REGISTERED)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_SUBSCRIBER_STATUS_UP", SWIG_From_int(static_cast< int >(SmallMGC_SUBSCRIBER_STATUS_UP)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_SUBSCRIBER_STATUS_DOWN", SWIG_From_int(static_cast< int >(SmallMGC_SUBSCRIBER_STATUS_DOWN)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_SUBSCRIBER_STATUS_SHUTTINGDOWN", SWIG_From_int(static_cast< int >(SmallMGC_SUBSCRIBER_STATUS_SHUTTINGDOWN)));
  SWIG_Tcl_SetConstantObj(interp, "SmallMGC_SUBSCRIBER_STATUS_UNDEFINED", SWIG_From_int(static_cast< int >(SmallMGC_SUBSCRIBER_STATUS_UNDEFINED)));
  return TCL_OK;
}
SWIGEXPORT int Smallmgcapi_SafeInit(Tcl_Interp *interp) {
  return SWIG_init(interp);
}

